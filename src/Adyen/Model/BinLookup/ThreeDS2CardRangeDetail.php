<?php

/**
 * Adyen BinLookup API
 *
 * The version of the OpenAPI document: 54
 * Contact: developer-experience@adyen.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Adyen\Model\BinLookup;

use \ArrayAccess;
use Adyen\Model\BinLookup\ObjectSerializer;

/**
 * ThreeDS2CardRangeDetail Class Doc Comment
 *
 * @category Class
 * @package  Adyen
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ThreeDS2CardRangeDetail implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ThreeDS2CardRangeDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'acs_info_ind' => 'string[]',
        'brand_code' => 'string',
        'end_range' => 'string',
        'start_range' => 'string',
        'three_ds2_versions' => 'string[]',
        'three_ds_method_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'acs_info_ind' => null,
        'brand_code' => null,
        'end_range' => null,
        'start_range' => null,
        'three_ds2_versions' => null,
        'three_ds_method_url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'acs_info_ind' => false,
        'brand_code' => false,
        'end_range' => false,
        'start_range' => false,
        'three_ds2_versions' => false,
        'three_ds_method_url' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'acs_info_ind' => 'acsInfoInd',
        'brand_code' => 'brandCode',
        'end_range' => 'endRange',
        'start_range' => 'startRange',
        'three_ds2_versions' => 'threeDS2Versions',
        'three_ds_method_url' => 'threeDSMethodURL'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'acs_info_ind' => 'setAcsInfoInd',
        'brand_code' => 'setBrandCode',
        'end_range' => 'setEndRange',
        'start_range' => 'setStartRange',
        'three_ds2_versions' => 'setThreeDs2Versions',
        'three_ds_method_url' => 'setThreeDsMethodUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'acs_info_ind' => 'getAcsInfoInd',
        'brand_code' => 'getBrandCode',
        'end_range' => 'getEndRange',
        'start_range' => 'getStartRange',
        'three_ds2_versions' => 'getThreeDs2Versions',
        'three_ds_method_url' => 'getThreeDsMethodUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('acs_info_ind', $data ?? [], null);
        $this->setIfExists('brand_code', $data ?? [], null);
        $this->setIfExists('end_range', $data ?? [], null);
        $this->setIfExists('start_range', $data ?? [], null);
        $this->setIfExists('three_ds2_versions', $data ?? [], null);
        $this->setIfExists('three_ds_method_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets acs_info_ind
     *
     * @return string[]|null
     */
    public function getAcsInfoInd()
    {
        return $this->container['acs_info_ind'];
    }

    /**
     * Sets acs_info_ind
     *
     * @param string[]|null $acs_info_ind Provides additional information to the 3DS Server. Possible values: - 01 (Authentication is available at ACS) - 02 (Attempts supported by ACS or DS) - 03 (Decoupled authentication supported) - 04 (Whitelisting supported)
     *
     * @return self
     */
    public function setAcsInfoInd($acs_info_ind)
    {
        if (is_null($acs_info_ind)) {
            throw new \InvalidArgumentException('non-nullable acs_info_ind cannot be null');
        }
        $this->container['acs_info_ind'] = $acs_info_ind;

        return $this;
    }

    /**
     * Gets brand_code
     *
     * @return string|null
     */
    public function getBrandCode()
    {
        return $this->container['brand_code'];
    }

    /**
     * Sets brand_code
     *
     * @param string|null $brand_code Card brand.
     *
     * @return self
     */
    public function setBrandCode($brand_code)
    {
        if (is_null($brand_code)) {
            throw new \InvalidArgumentException('non-nullable brand_code cannot be null');
        }
        $this->container['brand_code'] = $brand_code;

        return $this;
    }

    /**
     * Gets end_range
     *
     * @return string|null
     */
    public function getEndRange()
    {
        return $this->container['end_range'];
    }

    /**
     * Sets end_range
     *
     * @param string|null $end_range BIN end range.
     *
     * @return self
     */
    public function setEndRange($end_range)
    {
        if (is_null($end_range)) {
            throw new \InvalidArgumentException('non-nullable end_range cannot be null');
        }
        $this->container['end_range'] = $end_range;

        return $this;
    }

    /**
     * Gets start_range
     *
     * @return string|null
     */
    public function getStartRange()
    {
        return $this->container['start_range'];
    }

    /**
     * Sets start_range
     *
     * @param string|null $start_range BIN start range.
     *
     * @return self
     */
    public function setStartRange($start_range)
    {
        if (is_null($start_range)) {
            throw new \InvalidArgumentException('non-nullable start_range cannot be null');
        }
        $this->container['start_range'] = $start_range;

        return $this;
    }

    /**
     * Gets three_ds2_versions
     *
     * @return string[]|null
     */
    public function getThreeDs2Versions()
    {
        return $this->container['three_ds2_versions'];
    }

    /**
     * Sets three_ds2_versions
     *
     * @param string[]|null $three_ds2_versions Supported 3D Secure protocol versions
     *
     * @return self
     */
    public function setThreeDs2Versions($three_ds2_versions)
    {
        if (is_null($three_ds2_versions)) {
            throw new \InvalidArgumentException('non-nullable three_ds2_versions cannot be null');
        }
        $this->container['three_ds2_versions'] = $three_ds2_versions;

        return $this;
    }

    /**
     * Gets three_ds_method_url
     *
     * @return string|null
     */
    public function getThreeDsMethodUrl()
    {
        return $this->container['three_ds_method_url'];
    }

    /**
     * Sets three_ds_method_url
     *
     * @param string|null $three_ds_method_url In a 3D Secure 2 browser-based flow, this is the URL where you should send the device fingerprint to.
     *
     * @return self
     */
    public function setThreeDsMethodUrl($three_ds_method_url)
    {
        if (is_null($three_ds_method_url)) {
            throw new \InvalidArgumentException('non-nullable three_ds_method_url cannot be null');
        }
        $this->container['three_ds_method_url'] = $three_ds_method_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
