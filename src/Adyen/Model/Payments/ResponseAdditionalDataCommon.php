<?php

/**
 * Adyen Payment API
 *
 * The version of the OpenAPI document: 68
 * Contact: developer-experience@adyen.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Adyen\Model\Payments;

use \ArrayAccess;
use Adyen\Model\Payments\ObjectSerializer;

/**
 * ResponseAdditionalDataCommon Class Doc Comment
 *
 * @category Class
 * @package  Adyen
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ResponseAdditionalDataCommon implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ResponseAdditionalDataCommon';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'acquirer_account_code' => 'string',
        'acquirer_code' => 'string',
        'acquirer_reference' => 'string',
        'alias' => 'string',
        'alias_type' => 'string',
        'auth_code' => 'string',
        'authorisation_mid' => 'string',
        'authorised_amount_currency' => 'string',
        'authorised_amount_value' => 'string',
        'avs_result' => 'string',
        'avs_result_raw' => 'string',
        'bic' => 'string',
        'co_branded_with' => 'string',
        'cvc_result' => 'string',
        'cvc_result_raw' => 'string',
        'ds_trans_id' => 'string',
        'eci' => 'string',
        'expiry_date' => 'string',
        'extra_costs_currency' => 'string',
        'extra_costs_value' => 'string',
        'fraud_check__item_nr__fraud_checkname' => 'string',
        'fraud_manual_review' => 'string',
        'fraud_result_type' => 'string',
        'funding_source' => 'string',
        'funds_availability' => 'string',
        'inferred_refusal_reason' => 'string',
        'is_card_commercial' => 'string',
        'issuer_country' => 'string',
        'liability_shift' => 'string',
        'mc_bank_net_reference_number' => 'string',
        'merchant_advice_code' => 'string',
        'merchant_reference' => 'string',
        'network_tx_reference' => 'string',
        'owner_name' => 'string',
        'payment_account_reference' => 'string',
        'payment_method' => 'string',
        'payment_method_variant' => 'string',
        'payout_eligible' => 'string',
        'realtime_account_updater_status' => 'string',
        'receipt_free_text' => 'string',
        'recurring_contract_types' => 'string',
        'recurring_first_psp_reference' => 'string',
        'recurring_recurring_detail_reference' => 'string',
        'recurring_shopper_reference' => 'string',
        'recurring_processing_model' => 'string',
        'referred' => 'string',
        'refusal_reason_raw' => 'string',
        'request_amount' => 'string',
        'request_currency_code' => 'string',
        'shopper_interaction' => 'string',
        'shopper_reference' => 'string',
        'terminal_id' => 'string',
        'three_d_authenticated' => 'string',
        'three_d_authenticated_response' => 'string',
        'three_d_offered' => 'string',
        'three_d_offered_response' => 'string',
        'three_ds_version' => 'string',
        'visa_transaction_id' => 'string',
        'xid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'acquirer_account_code' => null,
        'acquirer_code' => null,
        'acquirer_reference' => null,
        'alias' => null,
        'alias_type' => null,
        'auth_code' => null,
        'authorisation_mid' => null,
        'authorised_amount_currency' => null,
        'authorised_amount_value' => null,
        'avs_result' => null,
        'avs_result_raw' => null,
        'bic' => null,
        'co_branded_with' => null,
        'cvc_result' => null,
        'cvc_result_raw' => null,
        'ds_trans_id' => null,
        'eci' => null,
        'expiry_date' => null,
        'extra_costs_currency' => null,
        'extra_costs_value' => null,
        'fraud_check__item_nr__fraud_checkname' => null,
        'fraud_manual_review' => null,
        'fraud_result_type' => null,
        'funding_source' => null,
        'funds_availability' => null,
        'inferred_refusal_reason' => null,
        'is_card_commercial' => null,
        'issuer_country' => null,
        'liability_shift' => null,
        'mc_bank_net_reference_number' => null,
        'merchant_advice_code' => null,
        'merchant_reference' => null,
        'network_tx_reference' => null,
        'owner_name' => null,
        'payment_account_reference' => null,
        'payment_method' => null,
        'payment_method_variant' => null,
        'payout_eligible' => null,
        'realtime_account_updater_status' => null,
        'receipt_free_text' => null,
        'recurring_contract_types' => null,
        'recurring_first_psp_reference' => null,
        'recurring_recurring_detail_reference' => null,
        'recurring_shopper_reference' => null,
        'recurring_processing_model' => null,
        'referred' => null,
        'refusal_reason_raw' => null,
        'request_amount' => null,
        'request_currency_code' => null,
        'shopper_interaction' => null,
        'shopper_reference' => null,
        'terminal_id' => null,
        'three_d_authenticated' => null,
        'three_d_authenticated_response' => null,
        'three_d_offered' => null,
        'three_d_offered_response' => null,
        'three_ds_version' => null,
        'visa_transaction_id' => null,
        'xid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'acquirer_account_code' => false,
        'acquirer_code' => false,
        'acquirer_reference' => false,
        'alias' => false,
        'alias_type' => false,
        'auth_code' => false,
        'authorisation_mid' => false,
        'authorised_amount_currency' => false,
        'authorised_amount_value' => false,
        'avs_result' => false,
        'avs_result_raw' => false,
        'bic' => false,
        'co_branded_with' => false,
        'cvc_result' => false,
        'cvc_result_raw' => false,
        'ds_trans_id' => false,
        'eci' => false,
        'expiry_date' => false,
        'extra_costs_currency' => false,
        'extra_costs_value' => false,
        'fraud_check__item_nr__fraud_checkname' => false,
        'fraud_manual_review' => false,
        'fraud_result_type' => false,
        'funding_source' => false,
        'funds_availability' => false,
        'inferred_refusal_reason' => false,
        'is_card_commercial' => false,
        'issuer_country' => false,
        'liability_shift' => false,
        'mc_bank_net_reference_number' => false,
        'merchant_advice_code' => false,
        'merchant_reference' => false,
        'network_tx_reference' => false,
        'owner_name' => false,
        'payment_account_reference' => false,
        'payment_method' => false,
        'payment_method_variant' => false,
        'payout_eligible' => false,
        'realtime_account_updater_status' => false,
        'receipt_free_text' => false,
        'recurring_contract_types' => false,
        'recurring_first_psp_reference' => false,
        'recurring_recurring_detail_reference' => false,
        'recurring_shopper_reference' => false,
        'recurring_processing_model' => false,
        'referred' => false,
        'refusal_reason_raw' => false,
        'request_amount' => false,
        'request_currency_code' => false,
        'shopper_interaction' => false,
        'shopper_reference' => false,
        'terminal_id' => false,
        'three_d_authenticated' => false,
        'three_d_authenticated_response' => false,
        'three_d_offered' => false,
        'three_d_offered_response' => false,
        'three_ds_version' => false,
        'visa_transaction_id' => false,
        'xid' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'acquirer_account_code' => 'acquirerAccountCode',
        'acquirer_code' => 'acquirerCode',
        'acquirer_reference' => 'acquirerReference',
        'alias' => 'alias',
        'alias_type' => 'aliasType',
        'auth_code' => 'authCode',
        'authorisation_mid' => 'authorisationMid',
        'authorised_amount_currency' => 'authorisedAmountCurrency',
        'authorised_amount_value' => 'authorisedAmountValue',
        'avs_result' => 'avsResult',
        'avs_result_raw' => 'avsResultRaw',
        'bic' => 'bic',
        'co_branded_with' => 'coBrandedWith',
        'cvc_result' => 'cvcResult',
        'cvc_result_raw' => 'cvcResultRaw',
        'ds_trans_id' => 'dsTransID',
        'eci' => 'eci',
        'expiry_date' => 'expiryDate',
        'extra_costs_currency' => 'extraCostsCurrency',
        'extra_costs_value' => 'extraCostsValue',
        'fraud_check__item_nr__fraud_checkname' => 'fraudCheck-[itemNr]-[FraudCheckname]',
        'fraud_manual_review' => 'fraudManualReview',
        'fraud_result_type' => 'fraudResultType',
        'funding_source' => 'fundingSource',
        'funds_availability' => 'fundsAvailability',
        'inferred_refusal_reason' => 'inferredRefusalReason',
        'is_card_commercial' => 'isCardCommercial',
        'issuer_country' => 'issuerCountry',
        'liability_shift' => 'liabilityShift',
        'mc_bank_net_reference_number' => 'mcBankNetReferenceNumber',
        'merchant_advice_code' => 'merchantAdviceCode',
        'merchant_reference' => 'merchantReference',
        'network_tx_reference' => 'networkTxReference',
        'owner_name' => 'ownerName',
        'payment_account_reference' => 'paymentAccountReference',
        'payment_method' => 'paymentMethod',
        'payment_method_variant' => 'paymentMethodVariant',
        'payout_eligible' => 'payoutEligible',
        'realtime_account_updater_status' => 'realtimeAccountUpdaterStatus',
        'receipt_free_text' => 'receiptFreeText',
        'recurring_contract_types' => 'recurring.contractTypes',
        'recurring_first_psp_reference' => 'recurring.firstPspReference',
        'recurring_recurring_detail_reference' => 'recurring.recurringDetailReference',
        'recurring_shopper_reference' => 'recurring.shopperReference',
        'recurring_processing_model' => 'recurringProcessingModel',
        'referred' => 'referred',
        'refusal_reason_raw' => 'refusalReasonRaw',
        'request_amount' => 'requestAmount',
        'request_currency_code' => 'requestCurrencyCode',
        'shopper_interaction' => 'shopperInteraction',
        'shopper_reference' => 'shopperReference',
        'terminal_id' => 'terminalId',
        'three_d_authenticated' => 'threeDAuthenticated',
        'three_d_authenticated_response' => 'threeDAuthenticatedResponse',
        'three_d_offered' => 'threeDOffered',
        'three_d_offered_response' => 'threeDOfferedResponse',
        'three_ds_version' => 'threeDSVersion',
        'visa_transaction_id' => 'visaTransactionId',
        'xid' => 'xid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'acquirer_account_code' => 'setAcquirerAccountCode',
        'acquirer_code' => 'setAcquirerCode',
        'acquirer_reference' => 'setAcquirerReference',
        'alias' => 'setAlias',
        'alias_type' => 'setAliasType',
        'auth_code' => 'setAuthCode',
        'authorisation_mid' => 'setAuthorisationMid',
        'authorised_amount_currency' => 'setAuthorisedAmountCurrency',
        'authorised_amount_value' => 'setAuthorisedAmountValue',
        'avs_result' => 'setAvsResult',
        'avs_result_raw' => 'setAvsResultRaw',
        'bic' => 'setBic',
        'co_branded_with' => 'setCoBrandedWith',
        'cvc_result' => 'setCvcResult',
        'cvc_result_raw' => 'setCvcResultRaw',
        'ds_trans_id' => 'setDsTransId',
        'eci' => 'setEci',
        'expiry_date' => 'setExpiryDate',
        'extra_costs_currency' => 'setExtraCostsCurrency',
        'extra_costs_value' => 'setExtraCostsValue',
        'fraud_check__item_nr__fraud_checkname' => 'setFraudCheckItemNrFraudCheckname',
        'fraud_manual_review' => 'setFraudManualReview',
        'fraud_result_type' => 'setFraudResultType',
        'funding_source' => 'setFundingSource',
        'funds_availability' => 'setFundsAvailability',
        'inferred_refusal_reason' => 'setInferredRefusalReason',
        'is_card_commercial' => 'setIsCardCommercial',
        'issuer_country' => 'setIssuerCountry',
        'liability_shift' => 'setLiabilityShift',
        'mc_bank_net_reference_number' => 'setMcBankNetReferenceNumber',
        'merchant_advice_code' => 'setMerchantAdviceCode',
        'merchant_reference' => 'setMerchantReference',
        'network_tx_reference' => 'setNetworkTxReference',
        'owner_name' => 'setOwnerName',
        'payment_account_reference' => 'setPaymentAccountReference',
        'payment_method' => 'setPaymentMethod',
        'payment_method_variant' => 'setPaymentMethodVariant',
        'payout_eligible' => 'setPayoutEligible',
        'realtime_account_updater_status' => 'setRealtimeAccountUpdaterStatus',
        'receipt_free_text' => 'setReceiptFreeText',
        'recurring_contract_types' => 'setRecurringContractTypes',
        'recurring_first_psp_reference' => 'setRecurringFirstPspReference',
        'recurring_recurring_detail_reference' => 'setRecurringRecurringDetailReference',
        'recurring_shopper_reference' => 'setRecurringShopperReference',
        'recurring_processing_model' => 'setRecurringProcessingModel',
        'referred' => 'setReferred',
        'refusal_reason_raw' => 'setRefusalReasonRaw',
        'request_amount' => 'setRequestAmount',
        'request_currency_code' => 'setRequestCurrencyCode',
        'shopper_interaction' => 'setShopperInteraction',
        'shopper_reference' => 'setShopperReference',
        'terminal_id' => 'setTerminalId',
        'three_d_authenticated' => 'setThreeDAuthenticated',
        'three_d_authenticated_response' => 'setThreeDAuthenticatedResponse',
        'three_d_offered' => 'setThreeDOffered',
        'three_d_offered_response' => 'setThreeDOfferedResponse',
        'three_ds_version' => 'setThreeDsVersion',
        'visa_transaction_id' => 'setVisaTransactionId',
        'xid' => 'setXid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'acquirer_account_code' => 'getAcquirerAccountCode',
        'acquirer_code' => 'getAcquirerCode',
        'acquirer_reference' => 'getAcquirerReference',
        'alias' => 'getAlias',
        'alias_type' => 'getAliasType',
        'auth_code' => 'getAuthCode',
        'authorisation_mid' => 'getAuthorisationMid',
        'authorised_amount_currency' => 'getAuthorisedAmountCurrency',
        'authorised_amount_value' => 'getAuthorisedAmountValue',
        'avs_result' => 'getAvsResult',
        'avs_result_raw' => 'getAvsResultRaw',
        'bic' => 'getBic',
        'co_branded_with' => 'getCoBrandedWith',
        'cvc_result' => 'getCvcResult',
        'cvc_result_raw' => 'getCvcResultRaw',
        'ds_trans_id' => 'getDsTransId',
        'eci' => 'getEci',
        'expiry_date' => 'getExpiryDate',
        'extra_costs_currency' => 'getExtraCostsCurrency',
        'extra_costs_value' => 'getExtraCostsValue',
        'fraud_check__item_nr__fraud_checkname' => 'getFraudCheckItemNrFraudCheckname',
        'fraud_manual_review' => 'getFraudManualReview',
        'fraud_result_type' => 'getFraudResultType',
        'funding_source' => 'getFundingSource',
        'funds_availability' => 'getFundsAvailability',
        'inferred_refusal_reason' => 'getInferredRefusalReason',
        'is_card_commercial' => 'getIsCardCommercial',
        'issuer_country' => 'getIssuerCountry',
        'liability_shift' => 'getLiabilityShift',
        'mc_bank_net_reference_number' => 'getMcBankNetReferenceNumber',
        'merchant_advice_code' => 'getMerchantAdviceCode',
        'merchant_reference' => 'getMerchantReference',
        'network_tx_reference' => 'getNetworkTxReference',
        'owner_name' => 'getOwnerName',
        'payment_account_reference' => 'getPaymentAccountReference',
        'payment_method' => 'getPaymentMethod',
        'payment_method_variant' => 'getPaymentMethodVariant',
        'payout_eligible' => 'getPayoutEligible',
        'realtime_account_updater_status' => 'getRealtimeAccountUpdaterStatus',
        'receipt_free_text' => 'getReceiptFreeText',
        'recurring_contract_types' => 'getRecurringContractTypes',
        'recurring_first_psp_reference' => 'getRecurringFirstPspReference',
        'recurring_recurring_detail_reference' => 'getRecurringRecurringDetailReference',
        'recurring_shopper_reference' => 'getRecurringShopperReference',
        'recurring_processing_model' => 'getRecurringProcessingModel',
        'referred' => 'getReferred',
        'refusal_reason_raw' => 'getRefusalReasonRaw',
        'request_amount' => 'getRequestAmount',
        'request_currency_code' => 'getRequestCurrencyCode',
        'shopper_interaction' => 'getShopperInteraction',
        'shopper_reference' => 'getShopperReference',
        'terminal_id' => 'getTerminalId',
        'three_d_authenticated' => 'getThreeDAuthenticated',
        'three_d_authenticated_response' => 'getThreeDAuthenticatedResponse',
        'three_d_offered' => 'getThreeDOffered',
        'three_d_offered_response' => 'getThreeDOfferedResponse',
        'three_ds_version' => 'getThreeDsVersion',
        'visa_transaction_id' => 'getVisaTransactionId',
        'xid' => 'getXid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FRAUD_RESULT_TYPE_GREEN = 'GREEN';
    public const FRAUD_RESULT_TYPE_FRAUD = 'FRAUD';
    public const RECURRING_PROCESSING_MODEL_CARD_ON_FILE = 'CardOnFile';
    public const RECURRING_PROCESSING_MODEL_SUBSCRIPTION = 'Subscription';
    public const RECURRING_PROCESSING_MODEL_UNSCHEDULED_CARD_ON_FILE = 'UnscheduledCardOnFile';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFraudResultTypeAllowableValues()
    {
        return [
            self::FRAUD_RESULT_TYPE_GREEN,
            self::FRAUD_RESULT_TYPE_FRAUD,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRecurringProcessingModelAllowableValues()
    {
        return [
            self::RECURRING_PROCESSING_MODEL_CARD_ON_FILE,
            self::RECURRING_PROCESSING_MODEL_SUBSCRIPTION,
            self::RECURRING_PROCESSING_MODEL_UNSCHEDULED_CARD_ON_FILE,
        ];
    }
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('acquirer_account_code', $data ?? [], null);
        $this->setIfExists('acquirer_code', $data ?? [], null);
        $this->setIfExists('acquirer_reference', $data ?? [], null);
        $this->setIfExists('alias', $data ?? [], null);
        $this->setIfExists('alias_type', $data ?? [], null);
        $this->setIfExists('auth_code', $data ?? [], null);
        $this->setIfExists('authorisation_mid', $data ?? [], null);
        $this->setIfExists('authorised_amount_currency', $data ?? [], null);
        $this->setIfExists('authorised_amount_value', $data ?? [], null);
        $this->setIfExists('avs_result', $data ?? [], null);
        $this->setIfExists('avs_result_raw', $data ?? [], null);
        $this->setIfExists('bic', $data ?? [], null);
        $this->setIfExists('co_branded_with', $data ?? [], null);
        $this->setIfExists('cvc_result', $data ?? [], null);
        $this->setIfExists('cvc_result_raw', $data ?? [], null);
        $this->setIfExists('ds_trans_id', $data ?? [], null);
        $this->setIfExists('eci', $data ?? [], null);
        $this->setIfExists('expiry_date', $data ?? [], null);
        $this->setIfExists('extra_costs_currency', $data ?? [], null);
        $this->setIfExists('extra_costs_value', $data ?? [], null);
        $this->setIfExists('fraud_check__item_nr__fraud_checkname', $data ?? [], null);
        $this->setIfExists('fraud_manual_review', $data ?? [], null);
        $this->setIfExists('fraud_result_type', $data ?? [], null);
        $this->setIfExists('funding_source', $data ?? [], null);
        $this->setIfExists('funds_availability', $data ?? [], null);
        $this->setIfExists('inferred_refusal_reason', $data ?? [], null);
        $this->setIfExists('is_card_commercial', $data ?? [], null);
        $this->setIfExists('issuer_country', $data ?? [], null);
        $this->setIfExists('liability_shift', $data ?? [], null);
        $this->setIfExists('mc_bank_net_reference_number', $data ?? [], null);
        $this->setIfExists('merchant_advice_code', $data ?? [], null);
        $this->setIfExists('merchant_reference', $data ?? [], null);
        $this->setIfExists('network_tx_reference', $data ?? [], null);
        $this->setIfExists('owner_name', $data ?? [], null);
        $this->setIfExists('payment_account_reference', $data ?? [], null);
        $this->setIfExists('payment_method', $data ?? [], null);
        $this->setIfExists('payment_method_variant', $data ?? [], null);
        $this->setIfExists('payout_eligible', $data ?? [], null);
        $this->setIfExists('realtime_account_updater_status', $data ?? [], null);
        $this->setIfExists('receipt_free_text', $data ?? [], null);
        $this->setIfExists('recurring_contract_types', $data ?? [], null);
        $this->setIfExists('recurring_first_psp_reference', $data ?? [], null);
        $this->setIfExists('recurring_recurring_detail_reference', $data ?? [], null);
        $this->setIfExists('recurring_shopper_reference', $data ?? [], null);
        $this->setIfExists('recurring_processing_model', $data ?? [], null);
        $this->setIfExists('referred', $data ?? [], null);
        $this->setIfExists('refusal_reason_raw', $data ?? [], null);
        $this->setIfExists('request_amount', $data ?? [], null);
        $this->setIfExists('request_currency_code', $data ?? [], null);
        $this->setIfExists('shopper_interaction', $data ?? [], null);
        $this->setIfExists('shopper_reference', $data ?? [], null);
        $this->setIfExists('terminal_id', $data ?? [], null);
        $this->setIfExists('three_d_authenticated', $data ?? [], null);
        $this->setIfExists('three_d_authenticated_response', $data ?? [], null);
        $this->setIfExists('three_d_offered', $data ?? [], null);
        $this->setIfExists('three_d_offered_response', $data ?? [], null);
        $this->setIfExists('three_ds_version', $data ?? [], null);
        $this->setIfExists('visa_transaction_id', $data ?? [], null);
        $this->setIfExists('xid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFraudResultTypeAllowableValues();
        if (!is_null($this->container['fraud_result_type']) && !in_array($this->container['fraud_result_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fraud_result_type', must be one of '%s'",
                $this->container['fraud_result_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRecurringProcessingModelAllowableValues();
        if (!is_null($this->container['recurring_processing_model']) && !in_array($this->container['recurring_processing_model'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'recurring_processing_model', must be one of '%s'",
                $this->container['recurring_processing_model'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets acquirer_account_code
     *
     * @return string|null
     */
    public function getAcquirerAccountCode()
    {
        return $this->container['acquirer_account_code'];
    }

    /**
     * Sets acquirer_account_code
     *
     * @param string|null $acquirer_account_code The name of the Adyen acquirer account.  Example: PayPalSandbox_TestAcquirer  > Only relevant for PayPal transactions.
     *
     * @return self
     */
    public function setAcquirerAccountCode($acquirer_account_code)
    {
        if (is_null($acquirer_account_code)) {
            throw new \InvalidArgumentException('non-nullable acquirer_account_code cannot be null');
        }
        $this->container['acquirer_account_code'] = $acquirer_account_code;

        return $this;
    }

    /**
     * Gets acquirer_code
     *
     * @return string|null
     */
    public function getAcquirerCode()
    {
        return $this->container['acquirer_code'];
    }

    /**
     * Sets acquirer_code
     *
     * @param string|null $acquirer_code The name of the acquirer processing the payment request.  Example: TestPmmAcquirer
     *
     * @return self
     */
    public function setAcquirerCode($acquirer_code)
    {
        if (is_null($acquirer_code)) {
            throw new \InvalidArgumentException('non-nullable acquirer_code cannot be null');
        }
        $this->container['acquirer_code'] = $acquirer_code;

        return $this;
    }

    /**
     * Gets acquirer_reference
     *
     * @return string|null
     */
    public function getAcquirerReference()
    {
        return $this->container['acquirer_reference'];
    }

    /**
     * Sets acquirer_reference
     *
     * @param string|null $acquirer_reference The reference number that can be used for reconciliation in case a non-Adyen acquirer is used for settlement.  Example: 7C9N3FNBKT9
     *
     * @return self
     */
    public function setAcquirerReference($acquirer_reference)
    {
        if (is_null($acquirer_reference)) {
            throw new \InvalidArgumentException('non-nullable acquirer_reference cannot be null');
        }
        $this->container['acquirer_reference'] = $acquirer_reference;

        return $this;
    }

    /**
     * Gets alias
     *
     * @return string|null
     */
    public function getAlias()
    {
        return $this->container['alias'];
    }

    /**
     * Sets alias
     *
     * @param string|null $alias The Adyen alias of the card.  Example: H167852639363479
     *
     * @return self
     */
    public function setAlias($alias)
    {
        if (is_null($alias)) {
            throw new \InvalidArgumentException('non-nullable alias cannot be null');
        }
        $this->container['alias'] = $alias;

        return $this;
    }

    /**
     * Gets alias_type
     *
     * @return string|null
     */
    public function getAliasType()
    {
        return $this->container['alias_type'];
    }

    /**
     * Sets alias_type
     *
     * @param string|null $alias_type The type of the card alias.  Example: Default
     *
     * @return self
     */
    public function setAliasType($alias_type)
    {
        if (is_null($alias_type)) {
            throw new \InvalidArgumentException('non-nullable alias_type cannot be null');
        }
        $this->container['alias_type'] = $alias_type;

        return $this;
    }

    /**
     * Gets auth_code
     *
     * @return string|null
     */
    public function getAuthCode()
    {
        return $this->container['auth_code'];
    }

    /**
     * Sets auth_code
     *
     * @param string|null $auth_code Authorisation code: * When the payment is authorised successfully, this field holds the authorisation code for the payment. * When the payment is not authorised, this field is empty.  Example: 58747
     *
     * @return self
     */
    public function setAuthCode($auth_code)
    {
        if (is_null($auth_code)) {
            throw new \InvalidArgumentException('non-nullable auth_code cannot be null');
        }
        $this->container['auth_code'] = $auth_code;

        return $this;
    }

    /**
     * Gets authorisation_mid
     *
     * @return string|null
     */
    public function getAuthorisationMid()
    {
        return $this->container['authorisation_mid'];
    }

    /**
     * Sets authorisation_mid
     *
     * @param string|null $authorisation_mid Merchant ID known by the acquirer.
     *
     * @return self
     */
    public function setAuthorisationMid($authorisation_mid)
    {
        if (is_null($authorisation_mid)) {
            throw new \InvalidArgumentException('non-nullable authorisation_mid cannot be null');
        }
        $this->container['authorisation_mid'] = $authorisation_mid;

        return $this;
    }

    /**
     * Gets authorised_amount_currency
     *
     * @return string|null
     */
    public function getAuthorisedAmountCurrency()
    {
        return $this->container['authorised_amount_currency'];
    }

    /**
     * Sets authorised_amount_currency
     *
     * @param string|null $authorised_amount_currency The currency of the authorised amount, as a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
     *
     * @return self
     */
    public function setAuthorisedAmountCurrency($authorised_amount_currency)
    {
        if (is_null($authorised_amount_currency)) {
            throw new \InvalidArgumentException('non-nullable authorised_amount_currency cannot be null');
        }
        $this->container['authorised_amount_currency'] = $authorised_amount_currency;

        return $this;
    }

    /**
     * Gets authorised_amount_value
     *
     * @return string|null
     */
    public function getAuthorisedAmountValue()
    {
        return $this->container['authorised_amount_value'];
    }

    /**
     * Sets authorised_amount_value
     *
     * @param string|null $authorised_amount_value Value of the amount authorised.  This amount is represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).
     *
     * @return self
     */
    public function setAuthorisedAmountValue($authorised_amount_value)
    {
        if (is_null($authorised_amount_value)) {
            throw new \InvalidArgumentException('non-nullable authorised_amount_value cannot be null');
        }
        $this->container['authorised_amount_value'] = $authorised_amount_value;

        return $this;
    }

    /**
     * Gets avs_result
     *
     * @return string|null
     */
    public function getAvsResult()
    {
        return $this->container['avs_result'];
    }

    /**
     * Sets avs_result
     *
     * @param string|null $avs_result The AVS result code of the payment, which provides information about the outcome of the AVS check.  For possible values, see [AVS](https://docs.adyen.com/risk-management/configure-standard-risk-rules/consistency-rules#billing-address-does-not-match-cardholder-address-avs).
     *
     * @return self
     */
    public function setAvsResult($avs_result)
    {
        if (is_null($avs_result)) {
            throw new \InvalidArgumentException('non-nullable avs_result cannot be null');
        }
        $this->container['avs_result'] = $avs_result;

        return $this;
    }

    /**
     * Gets avs_result_raw
     *
     * @return string|null
     */
    public function getAvsResultRaw()
    {
        return $this->container['avs_result_raw'];
    }

    /**
     * Sets avs_result_raw
     *
     * @param string|null $avs_result_raw Raw AVS result received from the acquirer, where available.  Example: D
     *
     * @return self
     */
    public function setAvsResultRaw($avs_result_raw)
    {
        if (is_null($avs_result_raw)) {
            throw new \InvalidArgumentException('non-nullable avs_result_raw cannot be null');
        }
        $this->container['avs_result_raw'] = $avs_result_raw;

        return $this;
    }

    /**
     * Gets bic
     *
     * @return string|null
     */
    public function getBic()
    {
        return $this->container['bic'];
    }

    /**
     * Sets bic
     *
     * @param string|null $bic BIC of a bank account.  Example: TESTNL01  > Only relevant for SEPA Direct Debit transactions.
     *
     * @return self
     */
    public function setBic($bic)
    {
        if (is_null($bic)) {
            throw new \InvalidArgumentException('non-nullable bic cannot be null');
        }
        $this->container['bic'] = $bic;

        return $this;
    }

    /**
     * Gets co_branded_with
     *
     * @return string|null
     */
    public function getCoBrandedWith()
    {
        return $this->container['co_branded_with'];
    }

    /**
     * Sets co_branded_with
     *
     * @param string|null $co_branded_with Includes the co-branded card information.
     *
     * @return self
     */
    public function setCoBrandedWith($co_branded_with)
    {
        if (is_null($co_branded_with)) {
            throw new \InvalidArgumentException('non-nullable co_branded_with cannot be null');
        }
        $this->container['co_branded_with'] = $co_branded_with;

        return $this;
    }

    /**
     * Gets cvc_result
     *
     * @return string|null
     */
    public function getCvcResult()
    {
        return $this->container['cvc_result'];
    }

    /**
     * Sets cvc_result
     *
     * @param string|null $cvc_result The result of CVC verification.
     *
     * @return self
     */
    public function setCvcResult($cvc_result)
    {
        if (is_null($cvc_result)) {
            throw new \InvalidArgumentException('non-nullable cvc_result cannot be null');
        }
        $this->container['cvc_result'] = $cvc_result;

        return $this;
    }

    /**
     * Gets cvc_result_raw
     *
     * @return string|null
     */
    public function getCvcResultRaw()
    {
        return $this->container['cvc_result_raw'];
    }

    /**
     * Sets cvc_result_raw
     *
     * @param string|null $cvc_result_raw The raw result of CVC verification.
     *
     * @return self
     */
    public function setCvcResultRaw($cvc_result_raw)
    {
        if (is_null($cvc_result_raw)) {
            throw new \InvalidArgumentException('non-nullable cvc_result_raw cannot be null');
        }
        $this->container['cvc_result_raw'] = $cvc_result_raw;

        return $this;
    }

    /**
     * Gets ds_trans_id
     *
     * @return string|null
     */
    public function getDsTransId()
    {
        return $this->container['ds_trans_id'];
    }

    /**
     * Sets ds_trans_id
     *
     * @param string|null $ds_trans_id Supported for 3D Secure 2. The unique transaction identifier assigned by the DS to identify a single transaction.
     *
     * @return self
     */
    public function setDsTransId($ds_trans_id)
    {
        if (is_null($ds_trans_id)) {
            throw new \InvalidArgumentException('non-nullable ds_trans_id cannot be null');
        }
        $this->container['ds_trans_id'] = $ds_trans_id;

        return $this;
    }

    /**
     * Gets eci
     *
     * @return string|null
     */
    public function getEci()
    {
        return $this->container['eci'];
    }

    /**
     * Sets eci
     *
     * @param string|null $eci The Electronic Commerce Indicator returned from the schemes for the 3DS payment session.  Example: 02
     *
     * @return self
     */
    public function setEci($eci)
    {
        if (is_null($eci)) {
            throw new \InvalidArgumentException('non-nullable eci cannot be null');
        }
        $this->container['eci'] = $eci;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return string|null
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param string|null $expiry_date The expiry date on the card.  Example: 6/2016  > Returned only in case of a card payment.
     *
     * @return self
     */
    public function setExpiryDate($expiry_date)
    {
        if (is_null($expiry_date)) {
            throw new \InvalidArgumentException('non-nullable expiry_date cannot be null');
        }
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets extra_costs_currency
     *
     * @return string|null
     */
    public function getExtraCostsCurrency()
    {
        return $this->container['extra_costs_currency'];
    }

    /**
     * Sets extra_costs_currency
     *
     * @param string|null $extra_costs_currency The currency of the extra amount charged due to additional amounts set in the skin used in the HPP payment request.  Example: EUR
     *
     * @return self
     */
    public function setExtraCostsCurrency($extra_costs_currency)
    {
        if (is_null($extra_costs_currency)) {
            throw new \InvalidArgumentException('non-nullable extra_costs_currency cannot be null');
        }
        $this->container['extra_costs_currency'] = $extra_costs_currency;

        return $this;
    }

    /**
     * Gets extra_costs_value
     *
     * @return string|null
     */
    public function getExtraCostsValue()
    {
        return $this->container['extra_costs_value'];
    }

    /**
     * Sets extra_costs_value
     *
     * @param string|null $extra_costs_value The value of the extra amount charged due to additional amounts set in the skin used in the HPP payment request. The amount is in minor units.
     *
     * @return self
     */
    public function setExtraCostsValue($extra_costs_value)
    {
        if (is_null($extra_costs_value)) {
            throw new \InvalidArgumentException('non-nullable extra_costs_value cannot be null');
        }
        $this->container['extra_costs_value'] = $extra_costs_value;

        return $this;
    }

    /**
     * Gets fraud_check__item_nr__fraud_checkname
     *
     * @return string|null
     */
    public function getFraudCheckItemNrFraudCheckname()
    {
        return $this->container['fraud_check__item_nr__fraud_checkname'];
    }

    /**
     * Sets fraud_check__item_nr__fraud_checkname
     *
     * @param string|null $fraud_check__item_nr__fraud_checkname The fraud score due to a particular fraud check. The fraud check name is found in the key of the key-value pair.
     *
     * @return self
     */
    public function setFraudCheckItemNrFraudCheckname($fraud_check__item_nr__fraud_checkname)
    {
        if (is_null($fraud_check__item_nr__fraud_checkname)) {
            throw new \InvalidArgumentException('non-nullable fraud_check__item_nr__fraud_checkname cannot be null');
        }
        $this->container['fraud_check__item_nr__fraud_checkname'] = $fraud_check__item_nr__fraud_checkname;

        return $this;
    }

    /**
     * Gets fraud_manual_review
     *
     * @return string|null
     */
    public function getFraudManualReview()
    {
        return $this->container['fraud_manual_review'];
    }

    /**
     * Sets fraud_manual_review
     *
     * @param string|null $fraud_manual_review Indicates if the payment is sent to manual review.
     *
     * @return self
     */
    public function setFraudManualReview($fraud_manual_review)
    {
        if (is_null($fraud_manual_review)) {
            throw new \InvalidArgumentException('non-nullable fraud_manual_review cannot be null');
        }
        $this->container['fraud_manual_review'] = $fraud_manual_review;

        return $this;
    }

    /**
     * Gets fraud_result_type
     *
     * @return string|null
     */
    public function getFraudResultType()
    {
        return $this->container['fraud_result_type'];
    }

    /**
     * Sets fraud_result_type
     *
     * @param string|null $fraud_result_type The fraud result properties of the payment.
     *
     * @return self
     */
    public function setFraudResultType($fraud_result_type)
    {
        if (is_null($fraud_result_type)) {
            throw new \InvalidArgumentException('non-nullable fraud_result_type cannot be null');
        }
        $allowedValues = $this->getFraudResultTypeAllowableValues();
        if (!in_array($fraud_result_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fraud_result_type', must be one of '%s'",
                    $fraud_result_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fraud_result_type'] = $fraud_result_type;

        return $this;
    }

    /**
     * Gets funding_source
     *
     * @return string|null
     */
    public function getFundingSource()
    {
        return $this->container['funding_source'];
    }

    /**
     * Sets funding_source
     *
     * @param string|null $funding_source Information regarding the funding type of the card. The possible return values are: * CHARGE * CREDIT * DEBIT * PREPAID * PREPAID_RELOADABLE  * PREPAID_NONRELOADABLE * DEFFERED_DEBIT  > This functionality requires additional configuration on Adyen's end. To enable it, contact the Support Team.  For receiving this field in the notification, enable **Include Funding Source** in **Notifications** > **Additional settings**.
     *
     * @return self
     */
    public function setFundingSource($funding_source)
    {
        if (is_null($funding_source)) {
            throw new \InvalidArgumentException('non-nullable funding_source cannot be null');
        }
        $this->container['funding_source'] = $funding_source;

        return $this;
    }

    /**
     * Gets funds_availability
     *
     * @return string|null
     */
    public function getFundsAvailability()
    {
        return $this->container['funds_availability'];
    }

    /**
     * Sets funds_availability
     *
     * @param string|null $funds_availability Indicates availability of funds.  Visa: * \"I\" (fast funds are supported) * \"N\" (otherwise)  Mastercard: * \"I\" (product type is Prepaid or Debit, or issuing country is in CEE/HGEM list) * \"N\" (otherwise)  > Returned when you verify a card BIN or estimate costs, and only if payoutEligible is \"Y\" or \"D\".
     *
     * @return self
     */
    public function setFundsAvailability($funds_availability)
    {
        if (is_null($funds_availability)) {
            throw new \InvalidArgumentException('non-nullable funds_availability cannot be null');
        }
        $this->container['funds_availability'] = $funds_availability;

        return $this;
    }

    /**
     * Gets inferred_refusal_reason
     *
     * @return string|null
     */
    public function getInferredRefusalReason()
    {
        return $this->container['inferred_refusal_reason'];
    }

    /**
     * Sets inferred_refusal_reason
     *
     * @param string|null $inferred_refusal_reason Provides the more granular indication of why a transaction was refused. When a transaction fails with either \"Refused\", \"Restricted Card\", \"Transaction Not Permitted\", \"Not supported\" or \"DeclinedNon Generic\" refusalReason from the issuer, Adyen cross references its PSP-wide data for extra insight into the refusal reason. If an inferred refusal reason is available, the `inferredRefusalReason`, field is populated and the `refusalReason`, is set to \"Not Supported\".  Possible values:  * 3D Secure Mandated * Closed Account * ContAuth Not Supported * CVC Mandated * Ecommerce Not Allowed * Crossborder Not Supported * Card Updated  * Low Authrate Bin * Non-reloadable prepaid card
     *
     * @return self
     */
    public function setInferredRefusalReason($inferred_refusal_reason)
    {
        if (is_null($inferred_refusal_reason)) {
            throw new \InvalidArgumentException('non-nullable inferred_refusal_reason cannot be null');
        }
        $this->container['inferred_refusal_reason'] = $inferred_refusal_reason;

        return $this;
    }

    /**
     * Gets is_card_commercial
     *
     * @return string|null
     */
    public function getIsCardCommercial()
    {
        return $this->container['is_card_commercial'];
    }

    /**
     * Sets is_card_commercial
     *
     * @param string|null $is_card_commercial Indicates if the card is used for business purposes only.
     *
     * @return self
     */
    public function setIsCardCommercial($is_card_commercial)
    {
        if (is_null($is_card_commercial)) {
            throw new \InvalidArgumentException('non-nullable is_card_commercial cannot be null');
        }
        $this->container['is_card_commercial'] = $is_card_commercial;

        return $this;
    }

    /**
     * Gets issuer_country
     *
     * @return string|null
     */
    public function getIssuerCountry()
    {
        return $this->container['issuer_country'];
    }

    /**
     * Sets issuer_country
     *
     * @param string|null $issuer_country The issuing country of the card based on the BIN list that Adyen maintains.  Example: JP
     *
     * @return self
     */
    public function setIssuerCountry($issuer_country)
    {
        if (is_null($issuer_country)) {
            throw new \InvalidArgumentException('non-nullable issuer_country cannot be null');
        }
        $this->container['issuer_country'] = $issuer_country;

        return $this;
    }

    /**
     * Gets liability_shift
     *
     * @return string|null
     */
    public function getLiabilityShift()
    {
        return $this->container['liability_shift'];
    }

    /**
     * Sets liability_shift
     *
     * @param string|null $liability_shift A Boolean value indicating whether a liability shift was offered for this payment.
     *
     * @return self
     */
    public function setLiabilityShift($liability_shift)
    {
        if (is_null($liability_shift)) {
            throw new \InvalidArgumentException('non-nullable liability_shift cannot be null');
        }
        $this->container['liability_shift'] = $liability_shift;

        return $this;
    }

    /**
     * Gets mc_bank_net_reference_number
     *
     * @return string|null
     */
    public function getMcBankNetReferenceNumber()
    {
        return $this->container['mc_bank_net_reference_number'];
    }

    /**
     * Sets mc_bank_net_reference_number
     *
     * @param string|null $mc_bank_net_reference_number The `mcBankNetReferenceNumber`, is a minimum of six characters and a maximum of nine characters long.  > Contact Support Team to enable this field.
     *
     * @return self
     */
    public function setMcBankNetReferenceNumber($mc_bank_net_reference_number)
    {
        if (is_null($mc_bank_net_reference_number)) {
            throw new \InvalidArgumentException('non-nullable mc_bank_net_reference_number cannot be null');
        }
        $this->container['mc_bank_net_reference_number'] = $mc_bank_net_reference_number;

        return $this;
    }

    /**
     * Gets merchant_advice_code
     *
     * @return string|null
     */
    public function getMerchantAdviceCode()
    {
        return $this->container['merchant_advice_code'];
    }

    /**
     * Sets merchant_advice_code
     *
     * @param string|null $merchant_advice_code The Merchant Advice Code (MAC) can be returned by Mastercard issuers for refused payments. If present, the MAC contains information about why the payment failed, and whether it can be retried.  For more information see [Mastercard Merchant Advice Codes](https://docs.adyen.com/development-resources/raw-acquirer-responses#mastercard-merchant-advice-codes).
     *
     * @return self
     */
    public function setMerchantAdviceCode($merchant_advice_code)
    {
        if (is_null($merchant_advice_code)) {
            throw new \InvalidArgumentException('non-nullable merchant_advice_code cannot be null');
        }
        $this->container['merchant_advice_code'] = $merchant_advice_code;

        return $this;
    }

    /**
     * Gets merchant_reference
     *
     * @return string|null
     */
    public function getMerchantReference()
    {
        return $this->container['merchant_reference'];
    }

    /**
     * Sets merchant_reference
     *
     * @param string|null $merchant_reference The reference provided for the transaction.
     *
     * @return self
     */
    public function setMerchantReference($merchant_reference)
    {
        if (is_null($merchant_reference)) {
            throw new \InvalidArgumentException('non-nullable merchant_reference cannot be null');
        }
        $this->container['merchant_reference'] = $merchant_reference;

        return $this;
    }

    /**
     * Gets network_tx_reference
     *
     * @return string|null
     */
    public function getNetworkTxReference()
    {
        return $this->container['network_tx_reference'];
    }

    /**
     * Sets network_tx_reference
     *
     * @param string|null $network_tx_reference Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.  This contains either the Mastercard Trace ID or the Visa Transaction ID.
     *
     * @return self
     */
    public function setNetworkTxReference($network_tx_reference)
    {
        if (is_null($network_tx_reference)) {
            throw new \InvalidArgumentException('non-nullable network_tx_reference cannot be null');
        }
        $this->container['network_tx_reference'] = $network_tx_reference;

        return $this;
    }

    /**
     * Gets owner_name
     *
     * @return string|null
     */
    public function getOwnerName()
    {
        return $this->container['owner_name'];
    }

    /**
     * Sets owner_name
     *
     * @param string|null $owner_name The owner name of a bank account.  Only relevant for SEPA Direct Debit transactions.
     *
     * @return self
     */
    public function setOwnerName($owner_name)
    {
        if (is_null($owner_name)) {
            throw new \InvalidArgumentException('non-nullable owner_name cannot be null');
        }
        $this->container['owner_name'] = $owner_name;

        return $this;
    }

    /**
     * Gets payment_account_reference
     *
     * @return string|null
     */
    public function getPaymentAccountReference()
    {
        return $this->container['payment_account_reference'];
    }

    /**
     * Sets payment_account_reference
     *
     * @param string|null $payment_account_reference The Payment Account Reference (PAR) value links a network token with the underlying primary account number (PAN). The PAR value consists of 29 uppercase alphanumeric characters.
     *
     * @return self
     */
    public function setPaymentAccountReference($payment_account_reference)
    {
        if (is_null($payment_account_reference)) {
            throw new \InvalidArgumentException('non-nullable payment_account_reference cannot be null');
        }
        $this->container['payment_account_reference'] = $payment_account_reference;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string|null
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string|null $payment_method The payment method used in the transaction.
     *
     * @return self
     */
    public function setPaymentMethod($payment_method)
    {
        if (is_null($payment_method)) {
            throw new \InvalidArgumentException('non-nullable payment_method cannot be null');
        }
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets payment_method_variant
     *
     * @return string|null
     */
    public function getPaymentMethodVariant()
    {
        return $this->container['payment_method_variant'];
    }

    /**
     * Sets payment_method_variant
     *
     * @param string|null $payment_method_variant The Adyen sub-variant of the payment method used for the payment request.  For more information, refer to [PaymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant).  Example: mcpro
     *
     * @return self
     */
    public function setPaymentMethodVariant($payment_method_variant)
    {
        if (is_null($payment_method_variant)) {
            throw new \InvalidArgumentException('non-nullable payment_method_variant cannot be null');
        }
        $this->container['payment_method_variant'] = $payment_method_variant;

        return $this;
    }

    /**
     * Gets payout_eligible
     *
     * @return string|null
     */
    public function getPayoutEligible()
    {
        return $this->container['payout_eligible'];
    }

    /**
     * Sets payout_eligible
     *
     * @param string|null $payout_eligible Indicates whether a payout is eligible or not for this card.  Visa: * \"Y\" * \"N\"  Mastercard: * \"Y\" (domestic and cross-border)  * \"D\" (only domestic) * \"N\" (no MoneySend) * \"U\" (unknown)
     *
     * @return self
     */
    public function setPayoutEligible($payout_eligible)
    {
        if (is_null($payout_eligible)) {
            throw new \InvalidArgumentException('non-nullable payout_eligible cannot be null');
        }
        $this->container['payout_eligible'] = $payout_eligible;

        return $this;
    }

    /**
     * Gets realtime_account_updater_status
     *
     * @return string|null
     */
    public function getRealtimeAccountUpdaterStatus()
    {
        return $this->container['realtime_account_updater_status'];
    }

    /**
     * Sets realtime_account_updater_status
     *
     * @param string|null $realtime_account_updater_status The response code from the Real Time Account Updater service.  Possible return values are: * CardChanged * CardExpiryChanged * CloseAccount  * ContactCardAccountHolder
     *
     * @return self
     */
    public function setRealtimeAccountUpdaterStatus($realtime_account_updater_status)
    {
        if (is_null($realtime_account_updater_status)) {
            throw new \InvalidArgumentException('non-nullable realtime_account_updater_status cannot be null');
        }
        $this->container['realtime_account_updater_status'] = $realtime_account_updater_status;

        return $this;
    }

    /**
     * Gets receipt_free_text
     *
     * @return string|null
     */
    public function getReceiptFreeText()
    {
        return $this->container['receipt_free_text'];
    }

    /**
     * Sets receipt_free_text
     *
     * @param string|null $receipt_free_text Message to be displayed on the terminal.
     *
     * @return self
     */
    public function setReceiptFreeText($receipt_free_text)
    {
        if (is_null($receipt_free_text)) {
            throw new \InvalidArgumentException('non-nullable receipt_free_text cannot be null');
        }
        $this->container['receipt_free_text'] = $receipt_free_text;

        return $this;
    }

    /**
     * Gets recurring_contract_types
     *
     * @return string|null
     */
    public function getRecurringContractTypes()
    {
        return $this->container['recurring_contract_types'];
    }

    /**
     * Sets recurring_contract_types
     *
     * @param string|null $recurring_contract_types The recurring contract types applicable to the transaction.
     *
     * @return self
     */
    public function setRecurringContractTypes($recurring_contract_types)
    {
        if (is_null($recurring_contract_types)) {
            throw new \InvalidArgumentException('non-nullable recurring_contract_types cannot be null');
        }
        $this->container['recurring_contract_types'] = $recurring_contract_types;

        return $this;
    }

    /**
     * Gets recurring_first_psp_reference
     *
     * @return string|null
     */
    public function getRecurringFirstPspReference()
    {
        return $this->container['recurring_first_psp_reference'];
    }

    /**
     * Sets recurring_first_psp_reference
     *
     * @param string|null $recurring_first_psp_reference The `pspReference`, of the first recurring payment that created the recurring detail.  This functionality requires additional configuration on Adyen's end. To enable it, contact the Support Team.
     *
     * @return self
     */
    public function setRecurringFirstPspReference($recurring_first_psp_reference)
    {
        if (is_null($recurring_first_psp_reference)) {
            throw new \InvalidArgumentException('non-nullable recurring_first_psp_reference cannot be null');
        }
        $this->container['recurring_first_psp_reference'] = $recurring_first_psp_reference;

        return $this;
    }

    /**
     * Gets recurring_recurring_detail_reference
     *
     * @return string|null
     */
    public function getRecurringRecurringDetailReference()
    {
        return $this->container['recurring_recurring_detail_reference'];
    }

    /**
     * Sets recurring_recurring_detail_reference
     *
     * @param string|null $recurring_recurring_detail_reference The reference that uniquely identifies the recurring transaction.
     *
     * @return self
     */
    public function setRecurringRecurringDetailReference($recurring_recurring_detail_reference)
    {
        if (is_null($recurring_recurring_detail_reference)) {
            throw new \InvalidArgumentException('non-nullable recurring_recurring_detail_reference cannot be null');
        }
        $this->container['recurring_recurring_detail_reference'] = $recurring_recurring_detail_reference;

        return $this;
    }

    /**
     * Gets recurring_shopper_reference
     *
     * @return string|null
     */
    public function getRecurringShopperReference()
    {
        return $this->container['recurring_shopper_reference'];
    }

    /**
     * Sets recurring_shopper_reference
     *
     * @param string|null $recurring_shopper_reference The provided reference of the shopper for a recurring transaction.
     *
     * @return self
     */
    public function setRecurringShopperReference($recurring_shopper_reference)
    {
        if (is_null($recurring_shopper_reference)) {
            throw new \InvalidArgumentException('non-nullable recurring_shopper_reference cannot be null');
        }
        $this->container['recurring_shopper_reference'] = $recurring_shopper_reference;

        return $this;
    }

    /**
     * Gets recurring_processing_model
     *
     * @return string|null
     */
    public function getRecurringProcessingModel()
    {
        return $this->container['recurring_processing_model'];
    }

    /**
     * Sets recurring_processing_model
     *
     * @param string|null $recurring_processing_model The processing model used for the recurring transaction.
     *
     * @return self
     */
    public function setRecurringProcessingModel($recurring_processing_model)
    {
        if (is_null($recurring_processing_model)) {
            throw new \InvalidArgumentException('non-nullable recurring_processing_model cannot be null');
        }
        $allowedValues = $this->getRecurringProcessingModelAllowableValues();
        if (!in_array($recurring_processing_model, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'recurring_processing_model', must be one of '%s'",
                    $recurring_processing_model,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['recurring_processing_model'] = $recurring_processing_model;

        return $this;
    }

    /**
     * Gets referred
     *
     * @return string|null
     */
    public function getReferred()
    {
        return $this->container['referred'];
    }

    /**
     * Sets referred
     *
     * @param string|null $referred If the payment is referred, this field is set to true.  This field is unavailable if the payment is referred and is usually not returned with ecommerce transactions.  Example: true
     *
     * @return self
     */
    public function setReferred($referred)
    {
        if (is_null($referred)) {
            throw new \InvalidArgumentException('non-nullable referred cannot be null');
        }
        $this->container['referred'] = $referred;

        return $this;
    }

    /**
     * Gets refusal_reason_raw
     *
     * @return string|null
     */
    public function getRefusalReasonRaw()
    {
        return $this->container['refusal_reason_raw'];
    }

    /**
     * Sets refusal_reason_raw
     *
     * @param string|null $refusal_reason_raw Raw refusal reason received from the acquirer, where available.  Example: AUTHORISED
     *
     * @return self
     */
    public function setRefusalReasonRaw($refusal_reason_raw)
    {
        if (is_null($refusal_reason_raw)) {
            throw new \InvalidArgumentException('non-nullable refusal_reason_raw cannot be null');
        }
        $this->container['refusal_reason_raw'] = $refusal_reason_raw;

        return $this;
    }

    /**
     * Gets request_amount
     *
     * @return string|null
     */
    public function getRequestAmount()
    {
        return $this->container['request_amount'];
    }

    /**
     * Sets request_amount
     *
     * @param string|null $request_amount The amount of the payment request.
     *
     * @return self
     */
    public function setRequestAmount($request_amount)
    {
        if (is_null($request_amount)) {
            throw new \InvalidArgumentException('non-nullable request_amount cannot be null');
        }
        $this->container['request_amount'] = $request_amount;

        return $this;
    }

    /**
     * Gets request_currency_code
     *
     * @return string|null
     */
    public function getRequestCurrencyCode()
    {
        return $this->container['request_currency_code'];
    }

    /**
     * Sets request_currency_code
     *
     * @param string|null $request_currency_code The currency of the payment request.
     *
     * @return self
     */
    public function setRequestCurrencyCode($request_currency_code)
    {
        if (is_null($request_currency_code)) {
            throw new \InvalidArgumentException('non-nullable request_currency_code cannot be null');
        }
        $this->container['request_currency_code'] = $request_currency_code;

        return $this;
    }

    /**
     * Gets shopper_interaction
     *
     * @return string|null
     */
    public function getShopperInteraction()
    {
        return $this->container['shopper_interaction'];
    }

    /**
     * Sets shopper_interaction
     *
     * @param string|null $shopper_interaction The shopper interaction type of the payment request.  Example: Ecommerce
     *
     * @return self
     */
    public function setShopperInteraction($shopper_interaction)
    {
        if (is_null($shopper_interaction)) {
            throw new \InvalidArgumentException('non-nullable shopper_interaction cannot be null');
        }
        $this->container['shopper_interaction'] = $shopper_interaction;

        return $this;
    }

    /**
     * Gets shopper_reference
     *
     * @return string|null
     */
    public function getShopperReference()
    {
        return $this->container['shopper_reference'];
    }

    /**
     * Sets shopper_reference
     *
     * @param string|null $shopper_reference The shopperReference passed in the payment request.  Example: AdyenTestShopperXX
     *
     * @return self
     */
    public function setShopperReference($shopper_reference)
    {
        if (is_null($shopper_reference)) {
            throw new \InvalidArgumentException('non-nullable shopper_reference cannot be null');
        }
        $this->container['shopper_reference'] = $shopper_reference;

        return $this;
    }

    /**
     * Gets terminal_id
     *
     * @return string|null
     */
    public function getTerminalId()
    {
        return $this->container['terminal_id'];
    }

    /**
     * Sets terminal_id
     *
     * @param string|null $terminal_id The terminal ID used in a point-of-sale payment.  Example: 06022622
     *
     * @return self
     */
    public function setTerminalId($terminal_id)
    {
        if (is_null($terminal_id)) {
            throw new \InvalidArgumentException('non-nullable terminal_id cannot be null');
        }
        $this->container['terminal_id'] = $terminal_id;

        return $this;
    }

    /**
     * Gets three_d_authenticated
     *
     * @return string|null
     */
    public function getThreeDAuthenticated()
    {
        return $this->container['three_d_authenticated'];
    }

    /**
     * Sets three_d_authenticated
     *
     * @param string|null $three_d_authenticated A Boolean value indicating whether 3DS authentication was completed on this payment.  Example: true
     *
     * @return self
     */
    public function setThreeDAuthenticated($three_d_authenticated)
    {
        if (is_null($three_d_authenticated)) {
            throw new \InvalidArgumentException('non-nullable three_d_authenticated cannot be null');
        }
        $this->container['three_d_authenticated'] = $three_d_authenticated;

        return $this;
    }

    /**
     * Gets three_d_authenticated_response
     *
     * @return string|null
     */
    public function getThreeDAuthenticatedResponse()
    {
        return $this->container['three_d_authenticated_response'];
    }

    /**
     * Sets three_d_authenticated_response
     *
     * @param string|null $three_d_authenticated_response The raw 3DS authentication result from the card issuer.  Example: N
     *
     * @return self
     */
    public function setThreeDAuthenticatedResponse($three_d_authenticated_response)
    {
        if (is_null($three_d_authenticated_response)) {
            throw new \InvalidArgumentException('non-nullable three_d_authenticated_response cannot be null');
        }
        $this->container['three_d_authenticated_response'] = $three_d_authenticated_response;

        return $this;
    }

    /**
     * Gets three_d_offered
     *
     * @return string|null
     */
    public function getThreeDOffered()
    {
        return $this->container['three_d_offered'];
    }

    /**
     * Sets three_d_offered
     *
     * @param string|null $three_d_offered A Boolean value indicating whether 3DS was offered for this payment.  Example: true
     *
     * @return self
     */
    public function setThreeDOffered($three_d_offered)
    {
        if (is_null($three_d_offered)) {
            throw new \InvalidArgumentException('non-nullable three_d_offered cannot be null');
        }
        $this->container['three_d_offered'] = $three_d_offered;

        return $this;
    }

    /**
     * Gets three_d_offered_response
     *
     * @return string|null
     */
    public function getThreeDOfferedResponse()
    {
        return $this->container['three_d_offered_response'];
    }

    /**
     * Sets three_d_offered_response
     *
     * @param string|null $three_d_offered_response The raw enrollment result from the 3DS directory services of the card schemes.  Example: Y
     *
     * @return self
     */
    public function setThreeDOfferedResponse($three_d_offered_response)
    {
        if (is_null($three_d_offered_response)) {
            throw new \InvalidArgumentException('non-nullable three_d_offered_response cannot be null');
        }
        $this->container['three_d_offered_response'] = $three_d_offered_response;

        return $this;
    }

    /**
     * Gets three_ds_version
     *
     * @return string|null
     */
    public function getThreeDsVersion()
    {
        return $this->container['three_ds_version'];
    }

    /**
     * Sets three_ds_version
     *
     * @param string|null $three_ds_version The 3D Secure 2 version.
     *
     * @return self
     */
    public function setThreeDsVersion($three_ds_version)
    {
        if (is_null($three_ds_version)) {
            throw new \InvalidArgumentException('non-nullable three_ds_version cannot be null');
        }
        $this->container['three_ds_version'] = $three_ds_version;

        return $this;
    }

    /**
     * Gets visa_transaction_id
     *
     * @return string|null
     */
    public function getVisaTransactionId()
    {
        return $this->container['visa_transaction_id'];
    }

    /**
     * Sets visa_transaction_id
     *
     * @param string|null $visa_transaction_id The `visaTransactionId`, has a fixed length of 15 numeric characters.  > Contact Support Team to enable this field.
     *
     * @return self
     */
    public function setVisaTransactionId($visa_transaction_id)
    {
        if (is_null($visa_transaction_id)) {
            throw new \InvalidArgumentException('non-nullable visa_transaction_id cannot be null');
        }
        $this->container['visa_transaction_id'] = $visa_transaction_id;

        return $this;
    }

    /**
     * Gets xid
     *
     * @return string|null
     */
    public function getXid()
    {
        return $this->container['xid'];
    }

    /**
     * Sets xid
     *
     * @param string|null $xid The 3DS transaction ID of the 3DS session sent in notifications. The value is Base64-encoded and is returned for transactions with directoryResponse 'N' or 'Y'. If you want to submit the xid in your 3D Secure 1 request, use the `mpiData.xid`, field.  Example: ODgxNDc2MDg2MDExODk5MAAAAAA=
     *
     * @return self
     */
    public function setXid($xid)
    {
        if (is_null($xid)) {
            throw new \InvalidArgumentException('non-nullable xid cannot be null');
        }
        $this->container['xid'] = $xid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
