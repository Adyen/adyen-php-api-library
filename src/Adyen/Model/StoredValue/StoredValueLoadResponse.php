<?php

/**
 * Adyen Stored Value API
 *
 * The version of the OpenAPI document: 46
 * Contact: developer-experience@adyen.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Adyen\Model\StoredValue;

use \ArrayAccess;
use Adyen\Model\StoredValue\ObjectSerializer;

/**
 * StoredValueLoadResponse Class Doc Comment
 *
 * @category Class
 * @package  Adyen
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StoredValueLoadResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StoredValueLoadResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'auth_code' => 'string',
        'current_balance' => '\Adyen\Model\StoredValue\Amount',
        'psp_reference' => 'string',
        'refusal_reason' => 'string',
        'result_code' => 'string',
        'third_party_refusal_reason' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'auth_code' => null,
        'current_balance' => null,
        'psp_reference' => null,
        'refusal_reason' => null,
        'result_code' => null,
        'third_party_refusal_reason' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'auth_code' => false,
        'current_balance' => false,
        'psp_reference' => false,
        'refusal_reason' => false,
        'result_code' => false,
        'third_party_refusal_reason' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auth_code' => 'authCode',
        'current_balance' => 'currentBalance',
        'psp_reference' => 'pspReference',
        'refusal_reason' => 'refusalReason',
        'result_code' => 'resultCode',
        'third_party_refusal_reason' => 'thirdPartyRefusalReason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auth_code' => 'setAuthCode',
        'current_balance' => 'setCurrentBalance',
        'psp_reference' => 'setPspReference',
        'refusal_reason' => 'setRefusalReason',
        'result_code' => 'setResultCode',
        'third_party_refusal_reason' => 'setThirdPartyRefusalReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auth_code' => 'getAuthCode',
        'current_balance' => 'getCurrentBalance',
        'psp_reference' => 'getPspReference',
        'refusal_reason' => 'getRefusalReason',
        'result_code' => 'getResultCode',
        'third_party_refusal_reason' => 'getThirdPartyRefusalReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const RESULT_CODE_SUCCESS = 'Success';
    public const RESULT_CODE_REFUSED = 'Refused';
    public const RESULT_CODE_ERROR = 'Error';
    public const RESULT_CODE_NOT_ENOUGH_BALANCE = 'NotEnoughBalance';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResultCodeAllowableValues()
    {
        return [
            self::RESULT_CODE_SUCCESS,
            self::RESULT_CODE_REFUSED,
            self::RESULT_CODE_ERROR,
            self::RESULT_CODE_NOT_ENOUGH_BALANCE,
        ];
    }
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('auth_code', $data ?? [], null);
        $this->setIfExists('current_balance', $data ?? [], null);
        $this->setIfExists('psp_reference', $data ?? [], null);
        $this->setIfExists('refusal_reason', $data ?? [], null);
        $this->setIfExists('result_code', $data ?? [], null);
        $this->setIfExists('third_party_refusal_reason', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getResultCodeAllowableValues();
        if (!is_null($this->container['result_code']) && !in_array($this->container['result_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'result_code', must be one of '%s'",
                $this->container['result_code'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auth_code
     *
     * @return string|null
     */
    public function getAuthCode()
    {
        return $this->container['auth_code'];
    }

    /**
     * Sets auth_code
     *
     * @param string|null $auth_code Authorisation code: * When the payment is authorised, this field holds the authorisation code for the payment. * When the payment is not authorised, this field is empty.
     *
     * @return self
     */
    public function setAuthCode($auth_code)
    {
        if (is_null($auth_code)) {
            throw new \InvalidArgumentException('non-nullable auth_code cannot be null');
        }
        $this->container['auth_code'] = $auth_code;

        return $this;
    }

    /**
     * Gets current_balance
     *
     * @return \Adyen\Model\StoredValue\Amount|null
     */
    public function getCurrentBalance()
    {
        return $this->container['current_balance'];
    }

    /**
     * Sets current_balance
     *
     * @param \Adyen\Model\StoredValue\Amount|null $current_balance current_balance
     *
     * @return self
     */
    public function setCurrentBalance($current_balance)
    {
        if (is_null($current_balance)) {
            throw new \InvalidArgumentException('non-nullable current_balance cannot be null');
        }
        $this->container['current_balance'] = $current_balance;

        return $this;
    }

    /**
     * Gets psp_reference
     *
     * @return string|null
     */
    public function getPspReference()
    {
        return $this->container['psp_reference'];
    }

    /**
     * Sets psp_reference
     *
     * @param string|null $psp_reference Adyen's 16-character string reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.
     *
     * @return self
     */
    public function setPspReference($psp_reference)
    {
        if (is_null($psp_reference)) {
            throw new \InvalidArgumentException('non-nullable psp_reference cannot be null');
        }
        $this->container['psp_reference'] = $psp_reference;

        return $this;
    }

    /**
     * Gets refusal_reason
     *
     * @return string|null
     */
    public function getRefusalReason()
    {
        return $this->container['refusal_reason'];
    }

    /**
     * Sets refusal_reason
     *
     * @param string|null $refusal_reason If the transaction is refused or an error occurs, this field holds Adyen's mapped reason for the refusal or a description of the error.  When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.
     *
     * @return self
     */
    public function setRefusalReason($refusal_reason)
    {
        if (is_null($refusal_reason)) {
            throw new \InvalidArgumentException('non-nullable refusal_reason cannot be null');
        }
        $this->container['refusal_reason'] = $refusal_reason;

        return $this;
    }

    /**
     * Gets result_code
     *
     * @return string|null
     */
    public function getResultCode()
    {
        return $this->container['result_code'];
    }

    /**
     * Sets result_code
     *
     * @param string|null $result_code The result of the payment. Possible values:  * **Success** – The operation has been completed successfully.  * **Refused** – The operation was refused. The reason is given in the `refusalReason` field.  * **Error** – There was an error when the operation was processed. The reason is given in the `refusalReason` field.  * **NotEnoughBalance** – The amount on the payment method is lower than the amount given in the request. Only applicable to balance checks.
     *
     * @return self
     */
    public function setResultCode($result_code)
    {
        if (is_null($result_code)) {
            throw new \InvalidArgumentException('non-nullable result_code cannot be null');
        }
        $allowedValues = $this->getResultCodeAllowableValues();
        if (!in_array($result_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'result_code', must be one of '%s'",
                    $result_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['result_code'] = $result_code;

        return $this;
    }

    /**
     * Gets third_party_refusal_reason
     *
     * @return string|null
     */
    public function getThirdPartyRefusalReason()
    {
        return $this->container['third_party_refusal_reason'];
    }

    /**
     * Sets third_party_refusal_reason
     *
     * @param string|null $third_party_refusal_reason Raw refusal reason received from the third party, where available
     *
     * @return self
     */
    public function setThirdPartyRefusalReason($third_party_refusal_reason)
    {
        if (is_null($third_party_refusal_reason)) {
            throw new \InvalidArgumentException('non-nullable third_party_refusal_reason cannot be null');
        }
        $this->container['third_party_refusal_reason'] = $third_party_refusal_reason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
