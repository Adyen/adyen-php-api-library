<?php

/**
 * POS Terminal Management API
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Adyen\Model\POSTerminalManagement;

use \ArrayAccess;
use Adyen\Model\POSTerminalManagement\ObjectSerializer;

/**
 * GetTerminalDetailsResponse Class Doc Comment
 *
 * @category Class
 * @package  Adyen
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetTerminalDetailsResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetTerminalDetailsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bluetooth_ip' => 'string',
        'bluetooth_mac' => 'string',
        'company_account' => 'string',
        'country' => 'string',
        'device_model' => 'string',
        'dhcp_enabled' => 'bool',
        'display_label' => 'string',
        'ethernet_ip' => 'string',
        'ethernet_mac' => 'string',
        'firmware_version' => 'string',
        'iccid' => 'string',
        'last_activity_date_time' => '\DateTime',
        'last_transaction_date_time' => '\DateTime',
        'link_negotiation' => 'string',
        'merchant_account' => 'string',
        'merchant_inventory' => 'bool',
        'permanent_terminal_id' => 'string',
        'serial_number' => 'string',
        'sim_status' => 'string',
        'store' => 'string',
        'store_details' => '\Adyen\Model\POSTerminalManagement\Store',
        'terminal' => 'string',
        'terminal_status' => 'string',
        'wifi_ip' => 'string',
        'wifi_mac' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bluetooth_ip' => null,
        'bluetooth_mac' => null,
        'company_account' => null,
        'country' => null,
        'device_model' => null,
        'dhcp_enabled' => null,
        'display_label' => null,
        'ethernet_ip' => null,
        'ethernet_mac' => null,
        'firmware_version' => null,
        'iccid' => null,
        'last_activity_date_time' => 'date-time',
        'last_transaction_date_time' => 'date-time',
        'link_negotiation' => null,
        'merchant_account' => null,
        'merchant_inventory' => null,
        'permanent_terminal_id' => null,
        'serial_number' => null,
        'sim_status' => null,
        'store' => null,
        'store_details' => null,
        'terminal' => null,
        'terminal_status' => null,
        'wifi_ip' => null,
        'wifi_mac' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'bluetooth_ip' => false,
        'bluetooth_mac' => false,
        'company_account' => false,
        'country' => false,
        'device_model' => false,
        'dhcp_enabled' => false,
        'display_label' => false,
        'ethernet_ip' => false,
        'ethernet_mac' => false,
        'firmware_version' => false,
        'iccid' => false,
        'last_activity_date_time' => false,
        'last_transaction_date_time' => false,
        'link_negotiation' => false,
        'merchant_account' => false,
        'merchant_inventory' => false,
        'permanent_terminal_id' => false,
        'serial_number' => false,
        'sim_status' => false,
        'store' => false,
        'store_details' => false,
        'terminal' => false,
        'terminal_status' => false,
        'wifi_ip' => false,
        'wifi_mac' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bluetooth_ip' => 'bluetoothIp',
        'bluetooth_mac' => 'bluetoothMac',
        'company_account' => 'companyAccount',
        'country' => 'country',
        'device_model' => 'deviceModel',
        'dhcp_enabled' => 'dhcpEnabled',
        'display_label' => 'displayLabel',
        'ethernet_ip' => 'ethernetIp',
        'ethernet_mac' => 'ethernetMac',
        'firmware_version' => 'firmwareVersion',
        'iccid' => 'iccid',
        'last_activity_date_time' => 'lastActivityDateTime',
        'last_transaction_date_time' => 'lastTransactionDateTime',
        'link_negotiation' => 'linkNegotiation',
        'merchant_account' => 'merchantAccount',
        'merchant_inventory' => 'merchantInventory',
        'permanent_terminal_id' => 'permanentTerminalId',
        'serial_number' => 'serialNumber',
        'sim_status' => 'simStatus',
        'store' => 'store',
        'store_details' => 'storeDetails',
        'terminal' => 'terminal',
        'terminal_status' => 'terminalStatus',
        'wifi_ip' => 'wifiIp',
        'wifi_mac' => 'wifiMac'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bluetooth_ip' => 'setBluetoothIp',
        'bluetooth_mac' => 'setBluetoothMac',
        'company_account' => 'setCompanyAccount',
        'country' => 'setCountry',
        'device_model' => 'setDeviceModel',
        'dhcp_enabled' => 'setDhcpEnabled',
        'display_label' => 'setDisplayLabel',
        'ethernet_ip' => 'setEthernetIp',
        'ethernet_mac' => 'setEthernetMac',
        'firmware_version' => 'setFirmwareVersion',
        'iccid' => 'setIccid',
        'last_activity_date_time' => 'setLastActivityDateTime',
        'last_transaction_date_time' => 'setLastTransactionDateTime',
        'link_negotiation' => 'setLinkNegotiation',
        'merchant_account' => 'setMerchantAccount',
        'merchant_inventory' => 'setMerchantInventory',
        'permanent_terminal_id' => 'setPermanentTerminalId',
        'serial_number' => 'setSerialNumber',
        'sim_status' => 'setSimStatus',
        'store' => 'setStore',
        'store_details' => 'setStoreDetails',
        'terminal' => 'setTerminal',
        'terminal_status' => 'setTerminalStatus',
        'wifi_ip' => 'setWifiIp',
        'wifi_mac' => 'setWifiMac'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bluetooth_ip' => 'getBluetoothIp',
        'bluetooth_mac' => 'getBluetoothMac',
        'company_account' => 'getCompanyAccount',
        'country' => 'getCountry',
        'device_model' => 'getDeviceModel',
        'dhcp_enabled' => 'getDhcpEnabled',
        'display_label' => 'getDisplayLabel',
        'ethernet_ip' => 'getEthernetIp',
        'ethernet_mac' => 'getEthernetMac',
        'firmware_version' => 'getFirmwareVersion',
        'iccid' => 'getIccid',
        'last_activity_date_time' => 'getLastActivityDateTime',
        'last_transaction_date_time' => 'getLastTransactionDateTime',
        'link_negotiation' => 'getLinkNegotiation',
        'merchant_account' => 'getMerchantAccount',
        'merchant_inventory' => 'getMerchantInventory',
        'permanent_terminal_id' => 'getPermanentTerminalId',
        'serial_number' => 'getSerialNumber',
        'sim_status' => 'getSimStatus',
        'store' => 'getStore',
        'store_details' => 'getStoreDetails',
        'terminal' => 'getTerminal',
        'terminal_status' => 'getTerminalStatus',
        'wifi_ip' => 'getWifiIp',
        'wifi_mac' => 'getWifiMac'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TERMINAL_STATUS_ONLINE_LAST1_DAY = 'OnlineLast1Day';
    public const TERMINAL_STATUS_ONLINE_LAST2_DAYS = 'OnlineLast2Days';
    public const TERMINAL_STATUS_ONLINE_LAST3_DAYS = 'OnlineLast3Days';
    public const TERMINAL_STATUS_ONLINE_LAST4_DAYS = 'OnlineLast4Days';
    public const TERMINAL_STATUS_ONLINE_LAST5_DAYS = 'OnlineLast5Days';
    public const TERMINAL_STATUS_ONLINE_LAST6_DAYS = 'OnlineLast6Days';
    public const TERMINAL_STATUS_ONLINE_LAST7_DAYS = 'OnlineLast7Days';
    public const TERMINAL_STATUS_ONLINE_TODAY = 'OnlineToday';
    public const TERMINAL_STATUS_RE_ASSIGN_TO_INVENTORY_PENDING = 'ReAssignToInventoryPending';
    public const TERMINAL_STATUS_RE_ASSIGN_TO_MERCHANT_INVENTORY_PENDING = 'ReAssignToMerchantInventoryPending';
    public const TERMINAL_STATUS_RE_ASSIGN_TO_STORE_PENDING = 'ReAssignToStorePending';
    public const TERMINAL_STATUS_SWITCHED_OFF = 'SwitchedOff';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTerminalStatusAllowableValues()
    {
        return [
            self::TERMINAL_STATUS_ONLINE_LAST1_DAY,
            self::TERMINAL_STATUS_ONLINE_LAST2_DAYS,
            self::TERMINAL_STATUS_ONLINE_LAST3_DAYS,
            self::TERMINAL_STATUS_ONLINE_LAST4_DAYS,
            self::TERMINAL_STATUS_ONLINE_LAST5_DAYS,
            self::TERMINAL_STATUS_ONLINE_LAST6_DAYS,
            self::TERMINAL_STATUS_ONLINE_LAST7_DAYS,
            self::TERMINAL_STATUS_ONLINE_TODAY,
            self::TERMINAL_STATUS_RE_ASSIGN_TO_INVENTORY_PENDING,
            self::TERMINAL_STATUS_RE_ASSIGN_TO_MERCHANT_INVENTORY_PENDING,
            self::TERMINAL_STATUS_RE_ASSIGN_TO_STORE_PENDING,
            self::TERMINAL_STATUS_SWITCHED_OFF,
        ];
    }
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('bluetooth_ip', $data ?? [], null);
        $this->setIfExists('bluetooth_mac', $data ?? [], null);
        $this->setIfExists('company_account', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('device_model', $data ?? [], null);
        $this->setIfExists('dhcp_enabled', $data ?? [], null);
        $this->setIfExists('display_label', $data ?? [], null);
        $this->setIfExists('ethernet_ip', $data ?? [], null);
        $this->setIfExists('ethernet_mac', $data ?? [], null);
        $this->setIfExists('firmware_version', $data ?? [], null);
        $this->setIfExists('iccid', $data ?? [], null);
        $this->setIfExists('last_activity_date_time', $data ?? [], null);
        $this->setIfExists('last_transaction_date_time', $data ?? [], null);
        $this->setIfExists('link_negotiation', $data ?? [], null);
        $this->setIfExists('merchant_account', $data ?? [], null);
        $this->setIfExists('merchant_inventory', $data ?? [], null);
        $this->setIfExists('permanent_terminal_id', $data ?? [], null);
        $this->setIfExists('serial_number', $data ?? [], null);
        $this->setIfExists('sim_status', $data ?? [], null);
        $this->setIfExists('store', $data ?? [], null);
        $this->setIfExists('store_details', $data ?? [], null);
        $this->setIfExists('terminal', $data ?? [], null);
        $this->setIfExists('terminal_status', $data ?? [], null);
        $this->setIfExists('wifi_ip', $data ?? [], null);
        $this->setIfExists('wifi_mac', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['company_account'] === null) {
            $invalidProperties[] = "'company_account' can't be null";
        }
        if ($this->container['terminal'] === null) {
            $invalidProperties[] = "'terminal' can't be null";
        }
        $allowedValues = $this->getTerminalStatusAllowableValues();
        if (!is_null($this->container['terminal_status']) && !in_array($this->container['terminal_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'terminal_status', must be one of '%s'",
                $this->container['terminal_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bluetooth_ip
     *
     * @return string|null
     */
    public function getBluetoothIp()
    {
        return $this->container['bluetooth_ip'];
    }

    /**
     * Sets bluetooth_ip
     *
     * @param string|null $bluetooth_ip The Bluetooth IP address of the terminal.
     *
     * @return self
     */
    public function setBluetoothIp($bluetooth_ip)
    {
        if (is_null($bluetooth_ip)) {
            throw new \InvalidArgumentException('non-nullable bluetooth_ip cannot be null');
        }
        $this->container['bluetooth_ip'] = $bluetooth_ip;

        return $this;
    }

    /**
     * Gets bluetooth_mac
     *
     * @return string|null
     */
    public function getBluetoothMac()
    {
        return $this->container['bluetooth_mac'];
    }

    /**
     * Sets bluetooth_mac
     *
     * @param string|null $bluetooth_mac The Bluetooth MAC address of the terminal.
     *
     * @return self
     */
    public function setBluetoothMac($bluetooth_mac)
    {
        if (is_null($bluetooth_mac)) {
            throw new \InvalidArgumentException('non-nullable bluetooth_mac cannot be null');
        }
        $this->container['bluetooth_mac'] = $bluetooth_mac;

        return $this;
    }

    /**
     * Gets company_account
     *
     * @return string
     */
    public function getCompanyAccount()
    {
        return $this->container['company_account'];
    }

    /**
     * Sets company_account
     *
     * @param string $company_account The company account that the terminal is associated with. If this is the only account level shown in the response, the terminal is assigned to the inventory of the company account.
     *
     * @return self
     */
    public function setCompanyAccount($company_account)
    {
        if (is_null($company_account)) {
            throw new \InvalidArgumentException('non-nullable company_account cannot be null');
        }
        $this->container['company_account'] = $company_account;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country The country where the terminal is used.
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets device_model
     *
     * @return string|null
     */
    public function getDeviceModel()
    {
        return $this->container['device_model'];
    }

    /**
     * Sets device_model
     *
     * @param string|null $device_model The model name of the terminal.
     *
     * @return self
     */
    public function setDeviceModel($device_model)
    {
        if (is_null($device_model)) {
            throw new \InvalidArgumentException('non-nullable device_model cannot be null');
        }
        $this->container['device_model'] = $device_model;

        return $this;
    }

    /**
     * Gets dhcp_enabled
     *
     * @return bool|null
     */
    public function getDhcpEnabled()
    {
        return $this->container['dhcp_enabled'];
    }

    /**
     * Sets dhcp_enabled
     *
     * @param bool|null $dhcp_enabled Indicates whether assigning IP addresses through a DHCP server is enabled on the terminal.
     *
     * @return self
     */
    public function setDhcpEnabled($dhcp_enabled)
    {
        if (is_null($dhcp_enabled)) {
            throw new \InvalidArgumentException('non-nullable dhcp_enabled cannot be null');
        }
        $this->container['dhcp_enabled'] = $dhcp_enabled;

        return $this;
    }

    /**
     * Gets display_label
     *
     * @return string|null
     */
    public function getDisplayLabel()
    {
        return $this->container['display_label'];
    }

    /**
     * Sets display_label
     *
     * @param string|null $display_label The label shown on the status bar of the display. This label (if any) is specified in your Customer Area.
     *
     * @return self
     */
    public function setDisplayLabel($display_label)
    {
        if (is_null($display_label)) {
            throw new \InvalidArgumentException('non-nullable display_label cannot be null');
        }
        $this->container['display_label'] = $display_label;

        return $this;
    }

    /**
     * Gets ethernet_ip
     *
     * @return string|null
     */
    public function getEthernetIp()
    {
        return $this->container['ethernet_ip'];
    }

    /**
     * Sets ethernet_ip
     *
     * @param string|null $ethernet_ip The terminal's IP address in your Ethernet network.
     *
     * @return self
     */
    public function setEthernetIp($ethernet_ip)
    {
        if (is_null($ethernet_ip)) {
            throw new \InvalidArgumentException('non-nullable ethernet_ip cannot be null');
        }
        $this->container['ethernet_ip'] = $ethernet_ip;

        return $this;
    }

    /**
     * Gets ethernet_mac
     *
     * @return string|null
     */
    public function getEthernetMac()
    {
        return $this->container['ethernet_mac'];
    }

    /**
     * Sets ethernet_mac
     *
     * @param string|null $ethernet_mac The terminal's MAC address in your Ethernet network.
     *
     * @return self
     */
    public function setEthernetMac($ethernet_mac)
    {
        if (is_null($ethernet_mac)) {
            throw new \InvalidArgumentException('non-nullable ethernet_mac cannot be null');
        }
        $this->container['ethernet_mac'] = $ethernet_mac;

        return $this;
    }

    /**
     * Gets firmware_version
     *
     * @return string|null
     */
    public function getFirmwareVersion()
    {
        return $this->container['firmware_version'];
    }

    /**
     * Sets firmware_version
     *
     * @param string|null $firmware_version The software release currently in use on the terminal.
     *
     * @return self
     */
    public function setFirmwareVersion($firmware_version)
    {
        if (is_null($firmware_version)) {
            throw new \InvalidArgumentException('non-nullable firmware_version cannot be null');
        }
        $this->container['firmware_version'] = $firmware_version;

        return $this;
    }

    /**
     * Gets iccid
     *
     * @return string|null
     */
    public function getIccid()
    {
        return $this->container['iccid'];
    }

    /**
     * Sets iccid
     *
     * @param string|null $iccid The integrated circuit card identifier (ICCID) of the SIM card in the terminal.
     *
     * @return self
     */
    public function setIccid($iccid)
    {
        if (is_null($iccid)) {
            throw new \InvalidArgumentException('non-nullable iccid cannot be null');
        }
        $this->container['iccid'] = $iccid;

        return $this;
    }

    /**
     * Gets last_activity_date_time
     *
     * @return \DateTime|null
     */
    public function getLastActivityDateTime()
    {
        return $this->container['last_activity_date_time'];
    }

    /**
     * Sets last_activity_date_time
     *
     * @param \DateTime|null $last_activity_date_time Date and time of the last activity on the terminal. Not included when the last activity was more than 14 days ago.
     *
     * @return self
     */
    public function setLastActivityDateTime($last_activity_date_time)
    {
        if (is_null($last_activity_date_time)) {
            throw new \InvalidArgumentException('non-nullable last_activity_date_time cannot be null');
        }
        $this->container['last_activity_date_time'] = $last_activity_date_time;

        return $this;
    }

    /**
     * Gets last_transaction_date_time
     *
     * @return \DateTime|null
     */
    public function getLastTransactionDateTime()
    {
        return $this->container['last_transaction_date_time'];
    }

    /**
     * Sets last_transaction_date_time
     *
     * @param \DateTime|null $last_transaction_date_time Date and time of the last transaction on the terminal. Not included when the last transaction was more than 14 days ago.
     *
     * @return self
     */
    public function setLastTransactionDateTime($last_transaction_date_time)
    {
        if (is_null($last_transaction_date_time)) {
            throw new \InvalidArgumentException('non-nullable last_transaction_date_time cannot be null');
        }
        $this->container['last_transaction_date_time'] = $last_transaction_date_time;

        return $this;
    }

    /**
     * Gets link_negotiation
     *
     * @return string|null
     */
    public function getLinkNegotiation()
    {
        return $this->container['link_negotiation'];
    }

    /**
     * Sets link_negotiation
     *
     * @param string|null $link_negotiation The Ethernet link negotiation that the terminal uses:   - `auto`: Auto-negotiation  - `100full`: 100 Mbps full duplex
     *
     * @return self
     */
    public function setLinkNegotiation($link_negotiation)
    {
        if (is_null($link_negotiation)) {
            throw new \InvalidArgumentException('non-nullable link_negotiation cannot be null');
        }
        $this->container['link_negotiation'] = $link_negotiation;

        return $this;
    }

    /**
     * Gets merchant_account
     *
     * @return string|null
     */
    public function getMerchantAccount()
    {
        return $this->container['merchant_account'];
    }

    /**
     * Sets merchant_account
     *
     * @param string|null $merchant_account The merchant account that the terminal is associated with. If the response doesn't contain a `store` the terminal is assigned to this merchant account.
     *
     * @return self
     */
    public function setMerchantAccount($merchant_account)
    {
        if (is_null($merchant_account)) {
            throw new \InvalidArgumentException('non-nullable merchant_account cannot be null');
        }
        $this->container['merchant_account'] = $merchant_account;

        return $this;
    }

    /**
     * Gets merchant_inventory
     *
     * @return bool|null
     */
    public function getMerchantInventory()
    {
        return $this->container['merchant_inventory'];
    }

    /**
     * Sets merchant_inventory
     *
     * @param bool|null $merchant_inventory Boolean that indicates if the terminal is assigned to the merchant inventory. This is returned when the terminal is assigned to a merchant account.  - If **true**, this indicates that the terminal is in the merchant inventory. This also means that the terminal cannot be boarded.  - If **false**, this indicates that the terminal is assigned to the merchant account as an in-store terminal. This means that the terminal is ready to be boarded, or is already boarded.
     *
     * @return self
     */
    public function setMerchantInventory($merchant_inventory)
    {
        if (is_null($merchant_inventory)) {
            throw new \InvalidArgumentException('non-nullable merchant_inventory cannot be null');
        }
        $this->container['merchant_inventory'] = $merchant_inventory;

        return $this;
    }

    /**
     * Gets permanent_terminal_id
     *
     * @return string|null
     */
    public function getPermanentTerminalId()
    {
        return $this->container['permanent_terminal_id'];
    }

    /**
     * Sets permanent_terminal_id
     *
     * @param string|null $permanent_terminal_id The permanent terminal ID.
     *
     * @return self
     */
    public function setPermanentTerminalId($permanent_terminal_id)
    {
        if (is_null($permanent_terminal_id)) {
            throw new \InvalidArgumentException('non-nullable permanent_terminal_id cannot be null');
        }
        $this->container['permanent_terminal_id'] = $permanent_terminal_id;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string|null
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string|null $serial_number The serial number of the terminal.
     *
     * @return self
     */
    public function setSerialNumber($serial_number)
    {
        if (is_null($serial_number)) {
            throw new \InvalidArgumentException('non-nullable serial_number cannot be null');
        }
        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets sim_status
     *
     * @return string|null
     */
    public function getSimStatus()
    {
        return $this->container['sim_status'];
    }

    /**
     * Sets sim_status
     *
     * @param string|null $sim_status On a terminal that supports 3G or 4G connectivity, indicates the status of the SIM card in the terminal: ACTIVE or INVENTORY.
     *
     * @return self
     */
    public function setSimStatus($sim_status)
    {
        if (is_null($sim_status)) {
            throw new \InvalidArgumentException('non-nullable sim_status cannot be null');
        }
        $this->container['sim_status'] = $sim_status;

        return $this;
    }

    /**
     * Gets store
     *
     * @return string|null
     */
    public function getStore()
    {
        return $this->container['store'];
    }

    /**
     * Sets store
     *
     * @param string|null $store The store code of the store that the terminal is assigned to.
     *
     * @return self
     */
    public function setStore($store)
    {
        if (is_null($store)) {
            throw new \InvalidArgumentException('non-nullable store cannot be null');
        }
        $this->container['store'] = $store;

        return $this;
    }

    /**
     * Gets store_details
     *
     * @return \Adyen\Model\POSTerminalManagement\Store|null
     */
    public function getStoreDetails()
    {
        return $this->container['store_details'];
    }

    /**
     * Sets store_details
     *
     * @param \Adyen\Model\POSTerminalManagement\Store|null $store_details store_details
     *
     * @return self
     */
    public function setStoreDetails($store_details)
    {
        if (is_null($store_details)) {
            throw new \InvalidArgumentException('non-nullable store_details cannot be null');
        }
        $this->container['store_details'] = $store_details;

        return $this;
    }

    /**
     * Gets terminal
     *
     * @return string
     */
    public function getTerminal()
    {
        return $this->container['terminal'];
    }

    /**
     * Sets terminal
     *
     * @param string $terminal The unique terminal ID.
     *
     * @return self
     */
    public function setTerminal($terminal)
    {
        if (is_null($terminal)) {
            throw new \InvalidArgumentException('non-nullable terminal cannot be null');
        }
        $this->container['terminal'] = $terminal;

        return $this;
    }

    /**
     * Gets terminal_status
     *
     * @return string|null
     */
    public function getTerminalStatus()
    {
        return $this->container['terminal_status'];
    }

    /**
     * Sets terminal_status
     *
     * @param string|null $terminal_status The status of the terminal:   - `OnlineToday`, `OnlineLast1Day`, `OnlineLast2Days` etcetera to `OnlineLast7Days`: Indicates when in the past week the terminal was last online.   - `SwitchedOff`: Indicates it was more than a week ago that the terminal was last online.   - `ReAssignToInventoryPending`, `ReAssignToStorePending`, `ReAssignToMerchantInventoryPending`: Indicates the terminal is scheduled to be reassigned.
     *
     * @return self
     */
    public function setTerminalStatus($terminal_status)
    {
        if (is_null($terminal_status)) {
            throw new \InvalidArgumentException('non-nullable terminal_status cannot be null');
        }
        $allowedValues = $this->getTerminalStatusAllowableValues();
        if (!in_array($terminal_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'terminal_status', must be one of '%s'",
                    $terminal_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['terminal_status'] = $terminal_status;

        return $this;
    }

    /**
     * Gets wifi_ip
     *
     * @return string|null
     */
    public function getWifiIp()
    {
        return $this->container['wifi_ip'];
    }

    /**
     * Sets wifi_ip
     *
     * @param string|null $wifi_ip The terminal's IP address in your Wi-Fi network.
     *
     * @return self
     */
    public function setWifiIp($wifi_ip)
    {
        if (is_null($wifi_ip)) {
            throw new \InvalidArgumentException('non-nullable wifi_ip cannot be null');
        }
        $this->container['wifi_ip'] = $wifi_ip;

        return $this;
    }

    /**
     * Gets wifi_mac
     *
     * @return string|null
     */
    public function getWifiMac()
    {
        return $this->container['wifi_mac'];
    }

    /**
     * Sets wifi_mac
     *
     * @param string|null $wifi_mac The terminal's MAC address in your Wi-Fi network.
     *
     * @return self
     */
    public function setWifiMac($wifi_mac)
    {
        if (is_null($wifi_mac)) {
            throw new \InvalidArgumentException('non-nullable wifi_mac cannot be null');
        }
        $this->container['wifi_mac'] = $wifi_mac;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
