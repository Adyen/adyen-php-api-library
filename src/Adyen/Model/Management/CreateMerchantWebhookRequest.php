<?php

/**
 * Management API
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Adyen\Model\Management;

use \ArrayAccess;
use Adyen\Model\Management\ObjectSerializer;

/**
 * CreateMerchantWebhookRequest Class Doc Comment
 *
 * @category Class
 * @package  Adyen
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateMerchantWebhookRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateMerchantWebhookRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accepts_expired_certificate' => 'bool',
        'accepts_self_signed_certificate' => 'bool',
        'accepts_untrusted_root_certificate' => 'bool',
        'active' => 'bool',
        'additional_settings' => '\Adyen\Model\Management\AdditionalSettings',
        'communication_format' => 'string',
        'description' => 'string',
        'network_type' => 'string',
        'password' => 'string',
        'populate_soap_action_header' => 'bool',
        'ssl_version' => 'string',
        'type' => 'string',
        'url' => 'string',
        'username' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'accepts_expired_certificate' => null,
        'accepts_self_signed_certificate' => null,
        'accepts_untrusted_root_certificate' => null,
        'active' => null,
        'additional_settings' => null,
        'communication_format' => null,
        'description' => null,
        'network_type' => null,
        'password' => null,
        'populate_soap_action_header' => null,
        'ssl_version' => null,
        'type' => null,
        'url' => null,
        'username' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'accepts_expired_certificate' => false,
        'accepts_self_signed_certificate' => false,
        'accepts_untrusted_root_certificate' => false,
        'active' => false,
        'additional_settings' => false,
        'communication_format' => false,
        'description' => false,
        'network_type' => false,
        'password' => false,
        'populate_soap_action_header' => false,
        'ssl_version' => false,
        'type' => false,
        'url' => false,
        'username' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accepts_expired_certificate' => 'acceptsExpiredCertificate',
        'accepts_self_signed_certificate' => 'acceptsSelfSignedCertificate',
        'accepts_untrusted_root_certificate' => 'acceptsUntrustedRootCertificate',
        'active' => 'active',
        'additional_settings' => 'additionalSettings',
        'communication_format' => 'communicationFormat',
        'description' => 'description',
        'network_type' => 'networkType',
        'password' => 'password',
        'populate_soap_action_header' => 'populateSoapActionHeader',
        'ssl_version' => 'sslVersion',
        'type' => 'type',
        'url' => 'url',
        'username' => 'username'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accepts_expired_certificate' => 'setAcceptsExpiredCertificate',
        'accepts_self_signed_certificate' => 'setAcceptsSelfSignedCertificate',
        'accepts_untrusted_root_certificate' => 'setAcceptsUntrustedRootCertificate',
        'active' => 'setActive',
        'additional_settings' => 'setAdditionalSettings',
        'communication_format' => 'setCommunicationFormat',
        'description' => 'setDescription',
        'network_type' => 'setNetworkType',
        'password' => 'setPassword',
        'populate_soap_action_header' => 'setPopulateSoapActionHeader',
        'ssl_version' => 'setSslVersion',
        'type' => 'setType',
        'url' => 'setUrl',
        'username' => 'setUsername'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accepts_expired_certificate' => 'getAcceptsExpiredCertificate',
        'accepts_self_signed_certificate' => 'getAcceptsSelfSignedCertificate',
        'accepts_untrusted_root_certificate' => 'getAcceptsUntrustedRootCertificate',
        'active' => 'getActive',
        'additional_settings' => 'getAdditionalSettings',
        'communication_format' => 'getCommunicationFormat',
        'description' => 'getDescription',
        'network_type' => 'getNetworkType',
        'password' => 'getPassword',
        'populate_soap_action_header' => 'getPopulateSoapActionHeader',
        'ssl_version' => 'getSslVersion',
        'type' => 'getType',
        'url' => 'getUrl',
        'username' => 'getUsername'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const COMMUNICATION_FORMAT_HTTP = 'http';
    public const COMMUNICATION_FORMAT_JSON = 'json';
    public const COMMUNICATION_FORMAT_SOAP = 'soap';
    public const NETWORK_TYPE_LOCAL = 'LOCAL';
    public const NETWORK_TYPE__PUBLIC = 'PUBLIC';
    public const SSL_VERSION_HTTP = 'HTTP';
    public const SSL_VERSION_SSL = 'SSL';
    public const SSL_VERSION_SSLV3 = 'SSLv3';
    public const SSL_VERSION_TLS = 'TLS';
    public const SSL_VERSION_TLSV1 = 'TLSv1';
    public const SSL_VERSION_TLSV1_1 = 'TLSv1.1';
    public const SSL_VERSION_TLSV1_2 = 'TLSv1.2';
    public const SSL_VERSION_TLSV1_3 = 'TLSv1.3';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCommunicationFormatAllowableValues()
    {
        return [
            self::COMMUNICATION_FORMAT_HTTP,
            self::COMMUNICATION_FORMAT_JSON,
            self::COMMUNICATION_FORMAT_SOAP,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNetworkTypeAllowableValues()
    {
        return [
            self::NETWORK_TYPE_LOCAL,
            self::NETWORK_TYPE__PUBLIC,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslVersionAllowableValues()
    {
        return [
            self::SSL_VERSION_HTTP,
            self::SSL_VERSION_SSL,
            self::SSL_VERSION_SSLV3,
            self::SSL_VERSION_TLS,
            self::SSL_VERSION_TLSV1,
            self::SSL_VERSION_TLSV1_1,
            self::SSL_VERSION_TLSV1_2,
            self::SSL_VERSION_TLSV1_3,
        ];
    }
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('accepts_expired_certificate', $data ?? [], null);
        $this->setIfExists('accepts_self_signed_certificate', $data ?? [], null);
        $this->setIfExists('accepts_untrusted_root_certificate', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('additional_settings', $data ?? [], null);
        $this->setIfExists('communication_format', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('network_type', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('populate_soap_action_header', $data ?? [], null);
        $this->setIfExists('ssl_version', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if ($this->container['communication_format'] === null) {
            $invalidProperties[] = "'communication_format' can't be null";
        }
        $allowedValues = $this->getCommunicationFormatAllowableValues();
        if (!is_null($this->container['communication_format']) && !in_array($this->container['communication_format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'communication_format', must be one of '%s'",
                $this->container['communication_format'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNetworkTypeAllowableValues();
        if (!is_null($this->container['network_type']) && !in_array($this->container['network_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'network_type', must be one of '%s'",
                $this->container['network_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSslVersionAllowableValues();
        if (!is_null($this->container['ssl_version']) && !in_array($this->container['ssl_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssl_version', must be one of '%s'",
                $this->container['ssl_version'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accepts_expired_certificate
     *
     * @return bool|null
     */
    public function getAcceptsExpiredCertificate()
    {
        return $this->container['accepts_expired_certificate'];
    }

    /**
     * Sets accepts_expired_certificate
     *
     * @param bool|null $accepts_expired_certificate Indicates if expired SSL certificates are accepted. Default value: **false**.
     *
     * @return self
     */
    public function setAcceptsExpiredCertificate($accepts_expired_certificate)
    {
        if (is_null($accepts_expired_certificate)) {
            throw new \InvalidArgumentException('non-nullable accepts_expired_certificate cannot be null');
        }
        $this->container['accepts_expired_certificate'] = $accepts_expired_certificate;

        return $this;
    }

    /**
     * Gets accepts_self_signed_certificate
     *
     * @return bool|null
     */
    public function getAcceptsSelfSignedCertificate()
    {
        return $this->container['accepts_self_signed_certificate'];
    }

    /**
     * Sets accepts_self_signed_certificate
     *
     * @param bool|null $accepts_self_signed_certificate Indicates if self-signed SSL certificates are accepted. Default value: **false**.
     *
     * @return self
     */
    public function setAcceptsSelfSignedCertificate($accepts_self_signed_certificate)
    {
        if (is_null($accepts_self_signed_certificate)) {
            throw new \InvalidArgumentException('non-nullable accepts_self_signed_certificate cannot be null');
        }
        $this->container['accepts_self_signed_certificate'] = $accepts_self_signed_certificate;

        return $this;
    }

    /**
     * Gets accepts_untrusted_root_certificate
     *
     * @return bool|null
     */
    public function getAcceptsUntrustedRootCertificate()
    {
        return $this->container['accepts_untrusted_root_certificate'];
    }

    /**
     * Sets accepts_untrusted_root_certificate
     *
     * @param bool|null $accepts_untrusted_root_certificate Indicates if untrusted SSL certificates are accepted. Default value: **false**.
     *
     * @return self
     */
    public function setAcceptsUntrustedRootCertificate($accepts_untrusted_root_certificate)
    {
        if (is_null($accepts_untrusted_root_certificate)) {
            throw new \InvalidArgumentException('non-nullable accepts_untrusted_root_certificate cannot be null');
        }
        $this->container['accepts_untrusted_root_certificate'] = $accepts_untrusted_root_certificate;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active Indicates if the webhook configuration is active. The field must be **true** for us to send webhooks about events related an account.
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets additional_settings
     *
     * @return \Adyen\Model\Management\AdditionalSettings|null
     */
    public function getAdditionalSettings()
    {
        return $this->container['additional_settings'];
    }

    /**
     * Sets additional_settings
     *
     * @param \Adyen\Model\Management\AdditionalSettings|null $additional_settings additional_settings
     *
     * @return self
     */
    public function setAdditionalSettings($additional_settings)
    {
        if (is_null($additional_settings)) {
            throw new \InvalidArgumentException('non-nullable additional_settings cannot be null');
        }
        $this->container['additional_settings'] = $additional_settings;

        return $this;
    }

    /**
     * Gets communication_format
     *
     * @return string
     */
    public function getCommunicationFormat()
    {
        return $this->container['communication_format'];
    }

    /**
     * Sets communication_format
     *
     * @param string $communication_format Format or protocol for receiving webhooks. Possible values: * **soap** * **http** * **json**
     *
     * @return self
     */
    public function setCommunicationFormat($communication_format)
    {
        if (is_null($communication_format)) {
            throw new \InvalidArgumentException('non-nullable communication_format cannot be null');
        }
        $allowedValues = $this->getCommunicationFormatAllowableValues();
        if (!in_array($communication_format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'communication_format', must be one of '%s'",
                    $communication_format,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['communication_format'] = $communication_format;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Your description for this webhook configuration.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets network_type
     *
     * @return string|null
     */
    public function getNetworkType()
    {
        return $this->container['network_type'];
    }

    /**
     * Sets network_type
     *
     * @param string|null $network_type Network type for Terminal API notification webhooks. Possible values: * **public** * **local**  Default Value: **public**.
     *
     * @return self
     */
    public function setNetworkType($network_type)
    {
        if (is_null($network_type)) {
            throw new \InvalidArgumentException('non-nullable network_type cannot be null');
        }
        $allowedValues = $this->getNetworkTypeAllowableValues();
        if (!in_array($network_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'network_type', must be one of '%s'",
                    $network_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['network_type'] = $network_type;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password Password to access the webhook URL.
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets populate_soap_action_header
     *
     * @return bool|null
     */
    public function getPopulateSoapActionHeader()
    {
        return $this->container['populate_soap_action_header'];
    }

    /**
     * Sets populate_soap_action_header
     *
     * @param bool|null $populate_soap_action_header Indicates if the SOAP action header needs to be populated. Default value: **false**.  Only applies if `communicationFormat`: **soap**.
     *
     * @return self
     */
    public function setPopulateSoapActionHeader($populate_soap_action_header)
    {
        if (is_null($populate_soap_action_header)) {
            throw new \InvalidArgumentException('non-nullable populate_soap_action_header cannot be null');
        }
        $this->container['populate_soap_action_header'] = $populate_soap_action_header;

        return $this;
    }

    /**
     * Gets ssl_version
     *
     * @return string|null
     */
    public function getSslVersion()
    {
        return $this->container['ssl_version'];
    }

    /**
     * Sets ssl_version
     *
     * @param string|null $ssl_version SSL version to access the public webhook URL specified in the `url` field. Possible values: * **TLSv1.3** * **TLSv1.2** * **HTTP** - Only allowed on Test environment.  If not specified, the webhook will use `sslVersion`: **TLSv1.2**.
     *
     * @return self
     */
    public function setSslVersion($ssl_version)
    {
        if (is_null($ssl_version)) {
            throw new \InvalidArgumentException('non-nullable ssl_version cannot be null');
        }
        $allowedValues = $this->getSslVersionAllowableValues();
        if (!in_array($ssl_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssl_version', must be one of '%s'",
                    $ssl_version,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssl_version'] = $ssl_version;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of webhook that is being created. Possible values are:  - **standard** - **account-settings-notification** - **banktransfer-notification** - **boletobancario-notification** - **directdebit-notification** - **pending-notification** - **ideal-notification** - **ideal-pending-notification** - **report-notification** - **rreq-notification**  Find out more about [standard notification webhooks](https://docs.adyen.com/development-resources/webhooks/understand-notifications#event-codes) and [other types of notifications](https://docs.adyen.com/development-resources/webhooks/understand-notifications#other-notifications).
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Public URL where webhooks will be sent, for example **https://www.domain.com/webhook-endpoint**.
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username Username to access the webhook URL.
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
