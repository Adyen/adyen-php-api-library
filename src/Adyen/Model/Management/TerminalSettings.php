<?php

/**
 * Management API
 *
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Adyen\Model\Management;

use \ArrayAccess;
use Adyen\Model\Management\ObjectSerializer;

/**
 * TerminalSettings Class Doc Comment
 *
 * @category Class
 * @package  Adyen
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TerminalSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TerminalSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cardholder_receipt' => '\Adyen\Model\Management\CardholderReceipt',
        'connectivity' => '\Adyen\Model\Management\Connectivity',
        'gratuities' => '\Adyen\Model\Management\Gratuity[]',
        'hardware' => '\Adyen\Model\Management\Hardware',
        'nexo' => '\Adyen\Model\Management\Nexo',
        'offline_processing' => '\Adyen\Model\Management\OfflineProcessing',
        'opi' => '\Adyen\Model\Management\Opi',
        'passcodes' => '\Adyen\Model\Management\Passcodes',
        'pay_at_table' => '\Adyen\Model\Management\PayAtTable',
        'payment' => '\Adyen\Model\Management\Payment',
        'receipt_options' => '\Adyen\Model\Management\ReceiptOptions',
        'receipt_printing' => '\Adyen\Model\Management\ReceiptPrinting',
        'signature' => '\Adyen\Model\Management\Signature',
        'standalone' => '\Adyen\Model\Management\Standalone',
        'surcharge' => '\Adyen\Model\Management\Surcharge',
        'timeouts' => '\Adyen\Model\Management\Timeouts',
        'wifi_profiles' => '\Adyen\Model\Management\WifiProfiles'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cardholder_receipt' => null,
        'connectivity' => null,
        'gratuities' => null,
        'hardware' => null,
        'nexo' => null,
        'offline_processing' => null,
        'opi' => null,
        'passcodes' => null,
        'pay_at_table' => null,
        'payment' => null,
        'receipt_options' => null,
        'receipt_printing' => null,
        'signature' => null,
        'standalone' => null,
        'surcharge' => null,
        'timeouts' => null,
        'wifi_profiles' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'cardholder_receipt' => false,
		'connectivity' => false,
		'gratuities' => false,
		'hardware' => false,
		'nexo' => false,
		'offline_processing' => false,
		'opi' => false,
		'passcodes' => false,
		'pay_at_table' => false,
		'payment' => false,
		'receipt_options' => false,
		'receipt_printing' => false,
		'signature' => false,
		'standalone' => false,
		'surcharge' => false,
		'timeouts' => false,
		'wifi_profiles' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cardholder_receipt' => 'cardholderReceipt',
        'connectivity' => 'connectivity',
        'gratuities' => 'gratuities',
        'hardware' => 'hardware',
        'nexo' => 'nexo',
        'offline_processing' => 'offlineProcessing',
        'opi' => 'opi',
        'passcodes' => 'passcodes',
        'pay_at_table' => 'payAtTable',
        'payment' => 'payment',
        'receipt_options' => 'receiptOptions',
        'receipt_printing' => 'receiptPrinting',
        'signature' => 'signature',
        'standalone' => 'standalone',
        'surcharge' => 'surcharge',
        'timeouts' => 'timeouts',
        'wifi_profiles' => 'wifiProfiles'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cardholder_receipt' => 'setCardholderReceipt',
        'connectivity' => 'setConnectivity',
        'gratuities' => 'setGratuities',
        'hardware' => 'setHardware',
        'nexo' => 'setNexo',
        'offline_processing' => 'setOfflineProcessing',
        'opi' => 'setOpi',
        'passcodes' => 'setPasscodes',
        'pay_at_table' => 'setPayAtTable',
        'payment' => 'setPayment',
        'receipt_options' => 'setReceiptOptions',
        'receipt_printing' => 'setReceiptPrinting',
        'signature' => 'setSignature',
        'standalone' => 'setStandalone',
        'surcharge' => 'setSurcharge',
        'timeouts' => 'setTimeouts',
        'wifi_profiles' => 'setWifiProfiles'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cardholder_receipt' => 'getCardholderReceipt',
        'connectivity' => 'getConnectivity',
        'gratuities' => 'getGratuities',
        'hardware' => 'getHardware',
        'nexo' => 'getNexo',
        'offline_processing' => 'getOfflineProcessing',
        'opi' => 'getOpi',
        'passcodes' => 'getPasscodes',
        'pay_at_table' => 'getPayAtTable',
        'payment' => 'getPayment',
        'receipt_options' => 'getReceiptOptions',
        'receipt_printing' => 'getReceiptPrinting',
        'signature' => 'getSignature',
        'standalone' => 'getStandalone',
        'surcharge' => 'getSurcharge',
        'timeouts' => 'getTimeouts',
        'wifi_profiles' => 'getWifiProfiles'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cardholder_receipt', $data ?? [], null);
        $this->setIfExists('connectivity', $data ?? [], null);
        $this->setIfExists('gratuities', $data ?? [], null);
        $this->setIfExists('hardware', $data ?? [], null);
        $this->setIfExists('nexo', $data ?? [], null);
        $this->setIfExists('offline_processing', $data ?? [], null);
        $this->setIfExists('opi', $data ?? [], null);
        $this->setIfExists('passcodes', $data ?? [], null);
        $this->setIfExists('pay_at_table', $data ?? [], null);
        $this->setIfExists('payment', $data ?? [], null);
        $this->setIfExists('receipt_options', $data ?? [], null);
        $this->setIfExists('receipt_printing', $data ?? [], null);
        $this->setIfExists('signature', $data ?? [], null);
        $this->setIfExists('standalone', $data ?? [], null);
        $this->setIfExists('surcharge', $data ?? [], null);
        $this->setIfExists('timeouts', $data ?? [], null);
        $this->setIfExists('wifi_profiles', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cardholder_receipt
     *
     * @return \Adyen\Model\Management\CardholderReceipt|null
     */
    public function getCardholderReceipt()
    {
        return $this->container['cardholder_receipt'];
    }

    /**
     * Sets cardholder_receipt
     *
     * @param \Adyen\Model\Management\CardholderReceipt|null $cardholder_receipt cardholder_receipt
     *
     * @return self
     */
    public function setCardholderReceipt($cardholder_receipt)
    {
        if (is_null($cardholder_receipt)) {
            throw new \InvalidArgumentException('non-nullable cardholder_receipt cannot be null');
        }
        $this->container['cardholder_receipt'] = $cardholder_receipt;

        return $this;
    }

    /**
     * Gets connectivity
     *
     * @return \Adyen\Model\Management\Connectivity|null
     */
    public function getConnectivity()
    {
        return $this->container['connectivity'];
    }

    /**
     * Sets connectivity
     *
     * @param \Adyen\Model\Management\Connectivity|null $connectivity connectivity
     *
     * @return self
     */
    public function setConnectivity($connectivity)
    {
        if (is_null($connectivity)) {
            throw new \InvalidArgumentException('non-nullable connectivity cannot be null');
        }
        $this->container['connectivity'] = $connectivity;

        return $this;
    }

    /**
     * Gets gratuities
     *
     * @return \Adyen\Model\Management\Gratuity[]|null
     */
    public function getGratuities()
    {
        return $this->container['gratuities'];
    }

    /**
     * Sets gratuities
     *
     * @param \Adyen\Model\Management\Gratuity[]|null $gratuities Settings for tipping with or without predefined options to choose from. The maximum number of predefined options is four, or three plus the option to enter a custom tip.
     *
     * @return self
     */
    public function setGratuities($gratuities)
    {
        if (is_null($gratuities)) {
            throw new \InvalidArgumentException('non-nullable gratuities cannot be null');
        }
        $this->container['gratuities'] = $gratuities;

        return $this;
    }

    /**
     * Gets hardware
     *
     * @return \Adyen\Model\Management\Hardware|null
     */
    public function getHardware()
    {
        return $this->container['hardware'];
    }

    /**
     * Sets hardware
     *
     * @param \Adyen\Model\Management\Hardware|null $hardware hardware
     *
     * @return self
     */
    public function setHardware($hardware)
    {
        if (is_null($hardware)) {
            throw new \InvalidArgumentException('non-nullable hardware cannot be null');
        }
        $this->container['hardware'] = $hardware;

        return $this;
    }

    /**
     * Gets nexo
     *
     * @return \Adyen\Model\Management\Nexo|null
     */
    public function getNexo()
    {
        return $this->container['nexo'];
    }

    /**
     * Sets nexo
     *
     * @param \Adyen\Model\Management\Nexo|null $nexo nexo
     *
     * @return self
     */
    public function setNexo($nexo)
    {
        if (is_null($nexo)) {
            throw new \InvalidArgumentException('non-nullable nexo cannot be null');
        }
        $this->container['nexo'] = $nexo;

        return $this;
    }

    /**
     * Gets offline_processing
     *
     * @return \Adyen\Model\Management\OfflineProcessing|null
     */
    public function getOfflineProcessing()
    {
        return $this->container['offline_processing'];
    }

    /**
     * Sets offline_processing
     *
     * @param \Adyen\Model\Management\OfflineProcessing|null $offline_processing offline_processing
     *
     * @return self
     */
    public function setOfflineProcessing($offline_processing)
    {
        if (is_null($offline_processing)) {
            throw new \InvalidArgumentException('non-nullable offline_processing cannot be null');
        }
        $this->container['offline_processing'] = $offline_processing;

        return $this;
    }

    /**
     * Gets opi
     *
     * @return \Adyen\Model\Management\Opi|null
     */
    public function getOpi()
    {
        return $this->container['opi'];
    }

    /**
     * Sets opi
     *
     * @param \Adyen\Model\Management\Opi|null $opi opi
     *
     * @return self
     */
    public function setOpi($opi)
    {
        if (is_null($opi)) {
            throw new \InvalidArgumentException('non-nullable opi cannot be null');
        }
        $this->container['opi'] = $opi;

        return $this;
    }

    /**
     * Gets passcodes
     *
     * @return \Adyen\Model\Management\Passcodes|null
     */
    public function getPasscodes()
    {
        return $this->container['passcodes'];
    }

    /**
     * Sets passcodes
     *
     * @param \Adyen\Model\Management\Passcodes|null $passcodes passcodes
     *
     * @return self
     */
    public function setPasscodes($passcodes)
    {
        if (is_null($passcodes)) {
            throw new \InvalidArgumentException('non-nullable passcodes cannot be null');
        }
        $this->container['passcodes'] = $passcodes;

        return $this;
    }

    /**
     * Gets pay_at_table
     *
     * @return \Adyen\Model\Management\PayAtTable|null
     */
    public function getPayAtTable()
    {
        return $this->container['pay_at_table'];
    }

    /**
     * Sets pay_at_table
     *
     * @param \Adyen\Model\Management\PayAtTable|null $pay_at_table pay_at_table
     *
     * @return self
     */
    public function setPayAtTable($pay_at_table)
    {
        if (is_null($pay_at_table)) {
            throw new \InvalidArgumentException('non-nullable pay_at_table cannot be null');
        }
        $this->container['pay_at_table'] = $pay_at_table;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return \Adyen\Model\Management\Payment|null
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param \Adyen\Model\Management\Payment|null $payment payment
     *
     * @return self
     */
    public function setPayment($payment)
    {
        if (is_null($payment)) {
            throw new \InvalidArgumentException('non-nullable payment cannot be null');
        }
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets receipt_options
     *
     * @return \Adyen\Model\Management\ReceiptOptions|null
     */
    public function getReceiptOptions()
    {
        return $this->container['receipt_options'];
    }

    /**
     * Sets receipt_options
     *
     * @param \Adyen\Model\Management\ReceiptOptions|null $receipt_options receipt_options
     *
     * @return self
     */
    public function setReceiptOptions($receipt_options)
    {
        if (is_null($receipt_options)) {
            throw new \InvalidArgumentException('non-nullable receipt_options cannot be null');
        }
        $this->container['receipt_options'] = $receipt_options;

        return $this;
    }

    /**
     * Gets receipt_printing
     *
     * @return \Adyen\Model\Management\ReceiptPrinting|null
     */
    public function getReceiptPrinting()
    {
        return $this->container['receipt_printing'];
    }

    /**
     * Sets receipt_printing
     *
     * @param \Adyen\Model\Management\ReceiptPrinting|null $receipt_printing receipt_printing
     *
     * @return self
     */
    public function setReceiptPrinting($receipt_printing)
    {
        if (is_null($receipt_printing)) {
            throw new \InvalidArgumentException('non-nullable receipt_printing cannot be null');
        }
        $this->container['receipt_printing'] = $receipt_printing;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return \Adyen\Model\Management\Signature|null
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param \Adyen\Model\Management\Signature|null $signature signature
     *
     * @return self
     */
    public function setSignature($signature)
    {
        if (is_null($signature)) {
            throw new \InvalidArgumentException('non-nullable signature cannot be null');
        }
        $this->container['signature'] = $signature;

        return $this;
    }

    /**
     * Gets standalone
     *
     * @return \Adyen\Model\Management\Standalone|null
     */
    public function getStandalone()
    {
        return $this->container['standalone'];
    }

    /**
     * Sets standalone
     *
     * @param \Adyen\Model\Management\Standalone|null $standalone standalone
     *
     * @return self
     */
    public function setStandalone($standalone)
    {
        if (is_null($standalone)) {
            throw new \InvalidArgumentException('non-nullable standalone cannot be null');
        }
        $this->container['standalone'] = $standalone;

        return $this;
    }

    /**
     * Gets surcharge
     *
     * @return \Adyen\Model\Management\Surcharge|null
     */
    public function getSurcharge()
    {
        return $this->container['surcharge'];
    }

    /**
     * Sets surcharge
     *
     * @param \Adyen\Model\Management\Surcharge|null $surcharge surcharge
     *
     * @return self
     */
    public function setSurcharge($surcharge)
    {
        if (is_null($surcharge)) {
            throw new \InvalidArgumentException('non-nullable surcharge cannot be null');
        }
        $this->container['surcharge'] = $surcharge;

        return $this;
    }

    /**
     * Gets timeouts
     *
     * @return \Adyen\Model\Management\Timeouts|null
     */
    public function getTimeouts()
    {
        return $this->container['timeouts'];
    }

    /**
     * Sets timeouts
     *
     * @param \Adyen\Model\Management\Timeouts|null $timeouts timeouts
     *
     * @return self
     */
    public function setTimeouts($timeouts)
    {
        if (is_null($timeouts)) {
            throw new \InvalidArgumentException('non-nullable timeouts cannot be null');
        }
        $this->container['timeouts'] = $timeouts;

        return $this;
    }

    /**
     * Gets wifi_profiles
     *
     * @return \Adyen\Model\Management\WifiProfiles|null
     */
    public function getWifiProfiles()
    {
        return $this->container['wifi_profiles'];
    }

    /**
     * Sets wifi_profiles
     *
     * @param \Adyen\Model\Management\WifiProfiles|null $wifi_profiles wifi_profiles
     *
     * @return self
     */
    public function setWifiProfiles($wifi_profiles)
    {
        if (is_null($wifi_profiles)) {
            throw new \InvalidArgumentException('non-nullable wifi_profiles cannot be null');
        }
        $this->container['wifi_profiles'] = $wifi_profiles;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
