<?php

/**
 * Management API
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Adyen\Model\Management;

use \ArrayAccess;
use Adyen\Model\Management\ObjectSerializer;

/**
 * ScheduleTerminalActionsResponse Class Doc Comment
 *
 * @category Class
 * @package  Adyen
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ScheduleTerminalActionsResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ScheduleTerminalActionsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'action_details' => '\Adyen\Model\Management\ScheduleTerminalActionsRequestActionDetails',
        'items' => '\Adyen\Model\Management\TerminalActionScheduleDetail[]',
        'scheduled_at' => 'string',
        'store_id' => 'string',
        'terminal_ids' => 'string[]',
        'terminals_with_errors' => 'array<string,string[]>',
        'total_errors' => 'int',
        'total_scheduled' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'action_details' => null,
        'items' => null,
        'scheduled_at' => null,
        'store_id' => null,
        'terminal_ids' => null,
        'terminals_with_errors' => null,
        'total_errors' => 'int32',
        'total_scheduled' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'action_details' => false,
        'items' => false,
        'scheduled_at' => false,
        'store_id' => false,
        'terminal_ids' => false,
        'terminals_with_errors' => false,
        'total_errors' => true,
        'total_scheduled' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'action_details' => 'actionDetails',
        'items' => 'items',
        'scheduled_at' => 'scheduledAt',
        'store_id' => 'storeId',
        'terminal_ids' => 'terminalIds',
        'terminals_with_errors' => 'terminalsWithErrors',
        'total_errors' => 'totalErrors',
        'total_scheduled' => 'totalScheduled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'action_details' => 'setActionDetails',
        'items' => 'setItems',
        'scheduled_at' => 'setScheduledAt',
        'store_id' => 'setStoreId',
        'terminal_ids' => 'setTerminalIds',
        'terminals_with_errors' => 'setTerminalsWithErrors',
        'total_errors' => 'setTotalErrors',
        'total_scheduled' => 'setTotalScheduled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'action_details' => 'getActionDetails',
        'items' => 'getItems',
        'scheduled_at' => 'getScheduledAt',
        'store_id' => 'getStoreId',
        'terminal_ids' => 'getTerminalIds',
        'terminals_with_errors' => 'getTerminalsWithErrors',
        'total_errors' => 'getTotalErrors',
        'total_scheduled' => 'getTotalScheduled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('action_details', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('scheduled_at', $data ?? [], null);
        $this->setIfExists('store_id', $data ?? [], null);
        $this->setIfExists('terminal_ids', $data ?? [], null);
        $this->setIfExists('terminals_with_errors', $data ?? [], null);
        $this->setIfExists('total_errors', $data ?? [], null);
        $this->setIfExists('total_scheduled', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action_details
     *
     * @return \Adyen\Model\Management\ScheduleTerminalActionsRequestActionDetails|null
     */
    public function getActionDetails()
    {
        return $this->container['action_details'];
    }

    /**
     * Sets action_details
     *
     * @param \Adyen\Model\Management\ScheduleTerminalActionsRequestActionDetails|null $action_details action_details
     *
     * @return self
     */
    public function setActionDetails($action_details)
    {
        if (is_null($action_details)) {
            throw new \InvalidArgumentException('non-nullable action_details cannot be null');
        }
        $this->container['action_details'] = $action_details;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Adyen\Model\Management\TerminalActionScheduleDetail[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Adyen\Model\Management\TerminalActionScheduleDetail[]|null $items A list containing a terminal ID and an action ID for each terminal that the action was scheduled for.
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets scheduled_at
     *
     * @return string|null
     */
    public function getScheduledAt()
    {
        return $this->container['scheduled_at'];
    }

    /**
     * Sets scheduled_at
     *
     * @param string|null $scheduled_at The date and time when the action should happen.  Format: [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339), but without the **Z** before the time offset. For example, **2021-11-15T12:16:21+01:00**  The action is sent with the first [maintenance call](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api#when-actions-take-effect) after the specified date and time in the time zone of the terminal.  An empty value causes the action to be sent as soon as possible: at the next maintenance call.
     *
     * @return self
     */
    public function setScheduledAt($scheduled_at)
    {
        if (is_null($scheduled_at)) {
            throw new \InvalidArgumentException('non-nullable scheduled_at cannot be null');
        }
        $this->container['scheduled_at'] = $scheduled_at;

        return $this;
    }

    /**
     * Gets store_id
     *
     * @return string|null
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string|null $store_id The unique ID of the [store](https://docs.adyen.com/api-explorer/#/ManagementService/latest/get/stores). If present, all terminals in the `terminalIds` list must be assigned to this store.
     *
     * @return self
     */
    public function setStoreId($store_id)
    {
        if (is_null($store_id)) {
            throw new \InvalidArgumentException('non-nullable store_id cannot be null');
        }
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets terminal_ids
     *
     * @return string[]|null
     * @deprecated
     */
    public function getTerminalIds()
    {
        return $this->container['terminal_ids'];
    }

    /**
     * Sets terminal_ids
     *
     * @param string[]|null $terminal_ids A list of unique IDs of the terminals that the action applies to.
     *
     * @return self
     * @deprecated
     */
    public function setTerminalIds($terminal_ids)
    {
        if (is_null($terminal_ids)) {
            throw new \InvalidArgumentException('non-nullable terminal_ids cannot be null');
        }
        $this->container['terminal_ids'] = $terminal_ids;

        return $this;
    }

    /**
     * Gets terminals_with_errors
     *
     * @return array<string,string[]>|null
     */
    public function getTerminalsWithErrors()
    {
        return $this->container['terminals_with_errors'];
    }

    /**
     * Sets terminals_with_errors
     *
     * @param array<string,string[]>|null $terminals_with_errors The validation errors that occurred in the list of terminals, and for each error the IDs of the terminals that the error applies to.
     *
     * @return self
     */
    public function setTerminalsWithErrors($terminals_with_errors)
    {
        if (is_null($terminals_with_errors)) {
            throw new \InvalidArgumentException('non-nullable terminals_with_errors cannot be null');
        }
        $this->container['terminals_with_errors'] = $terminals_with_errors;

        return $this;
    }

    /**
     * Gets total_errors
     *
     * @return int|null
     */
    public function getTotalErrors()
    {
        return $this->container['total_errors'];
    }

    /**
     * Sets total_errors
     *
     * @param int|null $total_errors The number of terminals for which scheduling the action failed.
     *
     * @return self
     */
    public function setTotalErrors($total_errors)
    {
        // Do nothing for nullable integers
        $this->container['total_errors'] = $total_errors;

        return $this;
    }

    /**
     * Gets total_scheduled
     *
     * @return int|null
     */
    public function getTotalScheduled()
    {
        return $this->container['total_scheduled'];
    }

    /**
     * Sets total_scheduled
     *
     * @param int|null $total_scheduled The number of terminals for which the action was successfully scheduled. This doesn't mean the action has happened yet.
     *
     * @return self
     */
    public function setTotalScheduled($total_scheduled)
    {
        // Do nothing for nullable integers
        $this->container['total_scheduled'] = $total_scheduled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
