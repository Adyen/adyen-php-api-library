<?php

/**
 * Management API
 *
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to version 1 of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v1/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v1 ```
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Adyen\Model\Management;

use \ArrayAccess;
use Adyen\Model\Management\ObjectSerializer;

/**
 * ReceiptPrinting Class Doc Comment
 *
 * @category Class
 * @package  Adyen
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReceiptPrinting implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReceiptPrinting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'merchant_approved' => 'bool',
        'merchant_cancelled' => 'bool',
        'merchant_capture_approved' => 'bool',
        'merchant_capture_refused' => 'bool',
        'merchant_refund_approved' => 'bool',
        'merchant_refund_refused' => 'bool',
        'merchant_refused' => 'bool',
        'merchant_void' => 'bool',
        'shopper_approved' => 'bool',
        'shopper_cancelled' => 'bool',
        'shopper_capture_approved' => 'bool',
        'shopper_capture_refused' => 'bool',
        'shopper_refund_approved' => 'bool',
        'shopper_refund_refused' => 'bool',
        'shopper_refused' => 'bool',
        'shopper_void' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'merchant_approved' => null,
        'merchant_cancelled' => null,
        'merchant_capture_approved' => null,
        'merchant_capture_refused' => null,
        'merchant_refund_approved' => null,
        'merchant_refund_refused' => null,
        'merchant_refused' => null,
        'merchant_void' => null,
        'shopper_approved' => null,
        'shopper_cancelled' => null,
        'shopper_capture_approved' => null,
        'shopper_capture_refused' => null,
        'shopper_refund_approved' => null,
        'shopper_refund_refused' => null,
        'shopper_refused' => null,
        'shopper_void' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'merchant_approved' => false,
		'merchant_cancelled' => false,
		'merchant_capture_approved' => false,
		'merchant_capture_refused' => false,
		'merchant_refund_approved' => false,
		'merchant_refund_refused' => false,
		'merchant_refused' => false,
		'merchant_void' => false,
		'shopper_approved' => false,
		'shopper_cancelled' => false,
		'shopper_capture_approved' => false,
		'shopper_capture_refused' => false,
		'shopper_refund_approved' => false,
		'shopper_refund_refused' => false,
		'shopper_refused' => false,
		'shopper_void' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchant_approved' => 'merchantApproved',
        'merchant_cancelled' => 'merchantCancelled',
        'merchant_capture_approved' => 'merchantCaptureApproved',
        'merchant_capture_refused' => 'merchantCaptureRefused',
        'merchant_refund_approved' => 'merchantRefundApproved',
        'merchant_refund_refused' => 'merchantRefundRefused',
        'merchant_refused' => 'merchantRefused',
        'merchant_void' => 'merchantVoid',
        'shopper_approved' => 'shopperApproved',
        'shopper_cancelled' => 'shopperCancelled',
        'shopper_capture_approved' => 'shopperCaptureApproved',
        'shopper_capture_refused' => 'shopperCaptureRefused',
        'shopper_refund_approved' => 'shopperRefundApproved',
        'shopper_refund_refused' => 'shopperRefundRefused',
        'shopper_refused' => 'shopperRefused',
        'shopper_void' => 'shopperVoid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchant_approved' => 'setMerchantApproved',
        'merchant_cancelled' => 'setMerchantCancelled',
        'merchant_capture_approved' => 'setMerchantCaptureApproved',
        'merchant_capture_refused' => 'setMerchantCaptureRefused',
        'merchant_refund_approved' => 'setMerchantRefundApproved',
        'merchant_refund_refused' => 'setMerchantRefundRefused',
        'merchant_refused' => 'setMerchantRefused',
        'merchant_void' => 'setMerchantVoid',
        'shopper_approved' => 'setShopperApproved',
        'shopper_cancelled' => 'setShopperCancelled',
        'shopper_capture_approved' => 'setShopperCaptureApproved',
        'shopper_capture_refused' => 'setShopperCaptureRefused',
        'shopper_refund_approved' => 'setShopperRefundApproved',
        'shopper_refund_refused' => 'setShopperRefundRefused',
        'shopper_refused' => 'setShopperRefused',
        'shopper_void' => 'setShopperVoid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchant_approved' => 'getMerchantApproved',
        'merchant_cancelled' => 'getMerchantCancelled',
        'merchant_capture_approved' => 'getMerchantCaptureApproved',
        'merchant_capture_refused' => 'getMerchantCaptureRefused',
        'merchant_refund_approved' => 'getMerchantRefundApproved',
        'merchant_refund_refused' => 'getMerchantRefundRefused',
        'merchant_refused' => 'getMerchantRefused',
        'merchant_void' => 'getMerchantVoid',
        'shopper_approved' => 'getShopperApproved',
        'shopper_cancelled' => 'getShopperCancelled',
        'shopper_capture_approved' => 'getShopperCaptureApproved',
        'shopper_capture_refused' => 'getShopperCaptureRefused',
        'shopper_refund_approved' => 'getShopperRefundApproved',
        'shopper_refund_refused' => 'getShopperRefundRefused',
        'shopper_refused' => 'getShopperRefused',
        'shopper_void' => 'getShopperVoid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('merchant_approved', $data ?? [], null);
        $this->setIfExists('merchant_cancelled', $data ?? [], null);
        $this->setIfExists('merchant_capture_approved', $data ?? [], null);
        $this->setIfExists('merchant_capture_refused', $data ?? [], null);
        $this->setIfExists('merchant_refund_approved', $data ?? [], null);
        $this->setIfExists('merchant_refund_refused', $data ?? [], null);
        $this->setIfExists('merchant_refused', $data ?? [], null);
        $this->setIfExists('merchant_void', $data ?? [], null);
        $this->setIfExists('shopper_approved', $data ?? [], null);
        $this->setIfExists('shopper_cancelled', $data ?? [], null);
        $this->setIfExists('shopper_capture_approved', $data ?? [], null);
        $this->setIfExists('shopper_capture_refused', $data ?? [], null);
        $this->setIfExists('shopper_refund_approved', $data ?? [], null);
        $this->setIfExists('shopper_refund_refused', $data ?? [], null);
        $this->setIfExists('shopper_refused', $data ?? [], null);
        $this->setIfExists('shopper_void', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchant_approved
     *
     * @return bool|null
     */
    public function getMerchantApproved()
    {
        return $this->container['merchant_approved'];
    }

    /**
     * Sets merchant_approved
     *
     * @param bool|null $merchant_approved Print a merchant receipt when the payment is approved.
     *
     * @return self
     */
    public function setMerchantApproved($merchant_approved)
    {
        if (is_null($merchant_approved)) {
            throw new \InvalidArgumentException('non-nullable merchant_approved cannot be null');
        }
        $this->container['merchant_approved'] = $merchant_approved;

        return $this;
    }

    /**
     * Gets merchant_cancelled
     *
     * @return bool|null
     */
    public function getMerchantCancelled()
    {
        return $this->container['merchant_cancelled'];
    }

    /**
     * Sets merchant_cancelled
     *
     * @param bool|null $merchant_cancelled Print a merchant receipt when the transaction is cancelled.
     *
     * @return self
     */
    public function setMerchantCancelled($merchant_cancelled)
    {
        if (is_null($merchant_cancelled)) {
            throw new \InvalidArgumentException('non-nullable merchant_cancelled cannot be null');
        }
        $this->container['merchant_cancelled'] = $merchant_cancelled;

        return $this;
    }

    /**
     * Gets merchant_capture_approved
     *
     * @return bool|null
     */
    public function getMerchantCaptureApproved()
    {
        return $this->container['merchant_capture_approved'];
    }

    /**
     * Sets merchant_capture_approved
     *
     * @param bool|null $merchant_capture_approved Print a merchant receipt when capturing the payment is approved.
     *
     * @return self
     */
    public function setMerchantCaptureApproved($merchant_capture_approved)
    {
        if (is_null($merchant_capture_approved)) {
            throw new \InvalidArgumentException('non-nullable merchant_capture_approved cannot be null');
        }
        $this->container['merchant_capture_approved'] = $merchant_capture_approved;

        return $this;
    }

    /**
     * Gets merchant_capture_refused
     *
     * @return bool|null
     */
    public function getMerchantCaptureRefused()
    {
        return $this->container['merchant_capture_refused'];
    }

    /**
     * Sets merchant_capture_refused
     *
     * @param bool|null $merchant_capture_refused Print a merchant receipt when capturing the payment is refused.
     *
     * @return self
     */
    public function setMerchantCaptureRefused($merchant_capture_refused)
    {
        if (is_null($merchant_capture_refused)) {
            throw new \InvalidArgumentException('non-nullable merchant_capture_refused cannot be null');
        }
        $this->container['merchant_capture_refused'] = $merchant_capture_refused;

        return $this;
    }

    /**
     * Gets merchant_refund_approved
     *
     * @return bool|null
     */
    public function getMerchantRefundApproved()
    {
        return $this->container['merchant_refund_approved'];
    }

    /**
     * Sets merchant_refund_approved
     *
     * @param bool|null $merchant_refund_approved Print a merchant receipt when the refund is approved.
     *
     * @return self
     */
    public function setMerchantRefundApproved($merchant_refund_approved)
    {
        if (is_null($merchant_refund_approved)) {
            throw new \InvalidArgumentException('non-nullable merchant_refund_approved cannot be null');
        }
        $this->container['merchant_refund_approved'] = $merchant_refund_approved;

        return $this;
    }

    /**
     * Gets merchant_refund_refused
     *
     * @return bool|null
     */
    public function getMerchantRefundRefused()
    {
        return $this->container['merchant_refund_refused'];
    }

    /**
     * Sets merchant_refund_refused
     *
     * @param bool|null $merchant_refund_refused Print a merchant receipt when the refund is refused.
     *
     * @return self
     */
    public function setMerchantRefundRefused($merchant_refund_refused)
    {
        if (is_null($merchant_refund_refused)) {
            throw new \InvalidArgumentException('non-nullable merchant_refund_refused cannot be null');
        }
        $this->container['merchant_refund_refused'] = $merchant_refund_refused;

        return $this;
    }

    /**
     * Gets merchant_refused
     *
     * @return bool|null
     */
    public function getMerchantRefused()
    {
        return $this->container['merchant_refused'];
    }

    /**
     * Sets merchant_refused
     *
     * @param bool|null $merchant_refused Print a merchant receipt when the payment is refused.
     *
     * @return self
     */
    public function setMerchantRefused($merchant_refused)
    {
        if (is_null($merchant_refused)) {
            throw new \InvalidArgumentException('non-nullable merchant_refused cannot be null');
        }
        $this->container['merchant_refused'] = $merchant_refused;

        return $this;
    }

    /**
     * Gets merchant_void
     *
     * @return bool|null
     */
    public function getMerchantVoid()
    {
        return $this->container['merchant_void'];
    }

    /**
     * Sets merchant_void
     *
     * @param bool|null $merchant_void Print a merchant receipt when a previous transaction is voided.
     *
     * @return self
     */
    public function setMerchantVoid($merchant_void)
    {
        if (is_null($merchant_void)) {
            throw new \InvalidArgumentException('non-nullable merchant_void cannot be null');
        }
        $this->container['merchant_void'] = $merchant_void;

        return $this;
    }

    /**
     * Gets shopper_approved
     *
     * @return bool|null
     */
    public function getShopperApproved()
    {
        return $this->container['shopper_approved'];
    }

    /**
     * Sets shopper_approved
     *
     * @param bool|null $shopper_approved Print a shopper receipt when the payment is approved.
     *
     * @return self
     */
    public function setShopperApproved($shopper_approved)
    {
        if (is_null($shopper_approved)) {
            throw new \InvalidArgumentException('non-nullable shopper_approved cannot be null');
        }
        $this->container['shopper_approved'] = $shopper_approved;

        return $this;
    }

    /**
     * Gets shopper_cancelled
     *
     * @return bool|null
     */
    public function getShopperCancelled()
    {
        return $this->container['shopper_cancelled'];
    }

    /**
     * Sets shopper_cancelled
     *
     * @param bool|null $shopper_cancelled Print a shopper receipt when the transaction is cancelled.
     *
     * @return self
     */
    public function setShopperCancelled($shopper_cancelled)
    {
        if (is_null($shopper_cancelled)) {
            throw new \InvalidArgumentException('non-nullable shopper_cancelled cannot be null');
        }
        $this->container['shopper_cancelled'] = $shopper_cancelled;

        return $this;
    }

    /**
     * Gets shopper_capture_approved
     *
     * @return bool|null
     */
    public function getShopperCaptureApproved()
    {
        return $this->container['shopper_capture_approved'];
    }

    /**
     * Sets shopper_capture_approved
     *
     * @param bool|null $shopper_capture_approved Print a shopper receipt when capturing the payment is approved.
     *
     * @return self
     */
    public function setShopperCaptureApproved($shopper_capture_approved)
    {
        if (is_null($shopper_capture_approved)) {
            throw new \InvalidArgumentException('non-nullable shopper_capture_approved cannot be null');
        }
        $this->container['shopper_capture_approved'] = $shopper_capture_approved;

        return $this;
    }

    /**
     * Gets shopper_capture_refused
     *
     * @return bool|null
     */
    public function getShopperCaptureRefused()
    {
        return $this->container['shopper_capture_refused'];
    }

    /**
     * Sets shopper_capture_refused
     *
     * @param bool|null $shopper_capture_refused Print a shopper receipt when capturing the payment is refused.
     *
     * @return self
     */
    public function setShopperCaptureRefused($shopper_capture_refused)
    {
        if (is_null($shopper_capture_refused)) {
            throw new \InvalidArgumentException('non-nullable shopper_capture_refused cannot be null');
        }
        $this->container['shopper_capture_refused'] = $shopper_capture_refused;

        return $this;
    }

    /**
     * Gets shopper_refund_approved
     *
     * @return bool|null
     */
    public function getShopperRefundApproved()
    {
        return $this->container['shopper_refund_approved'];
    }

    /**
     * Sets shopper_refund_approved
     *
     * @param bool|null $shopper_refund_approved Print a shopper receipt when the refund is approved.
     *
     * @return self
     */
    public function setShopperRefundApproved($shopper_refund_approved)
    {
        if (is_null($shopper_refund_approved)) {
            throw new \InvalidArgumentException('non-nullable shopper_refund_approved cannot be null');
        }
        $this->container['shopper_refund_approved'] = $shopper_refund_approved;

        return $this;
    }

    /**
     * Gets shopper_refund_refused
     *
     * @return bool|null
     */
    public function getShopperRefundRefused()
    {
        return $this->container['shopper_refund_refused'];
    }

    /**
     * Sets shopper_refund_refused
     *
     * @param bool|null $shopper_refund_refused Print a shopper receipt when the refund is refused.
     *
     * @return self
     */
    public function setShopperRefundRefused($shopper_refund_refused)
    {
        if (is_null($shopper_refund_refused)) {
            throw new \InvalidArgumentException('non-nullable shopper_refund_refused cannot be null');
        }
        $this->container['shopper_refund_refused'] = $shopper_refund_refused;

        return $this;
    }

    /**
     * Gets shopper_refused
     *
     * @return bool|null
     */
    public function getShopperRefused()
    {
        return $this->container['shopper_refused'];
    }

    /**
     * Sets shopper_refused
     *
     * @param bool|null $shopper_refused Print a shopper receipt when the payment is refused.
     *
     * @return self
     */
    public function setShopperRefused($shopper_refused)
    {
        if (is_null($shopper_refused)) {
            throw new \InvalidArgumentException('non-nullable shopper_refused cannot be null');
        }
        $this->container['shopper_refused'] = $shopper_refused;

        return $this;
    }

    /**
     * Gets shopper_void
     *
     * @return bool|null
     */
    public function getShopperVoid()
    {
        return $this->container['shopper_void'];
    }

    /**
     * Sets shopper_void
     *
     * @param bool|null $shopper_void Print a shopper receipt when a previous transaction is voided.
     *
     * @return self
     */
    public function setShopperVoid($shopper_void)
    {
        if (is_null($shopper_void)) {
            throw new \InvalidArgumentException('non-nullable shopper_void cannot be null');
        }
        $this->container['shopper_void'] = $shopper_void;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
