<?php

/**
 * Configuration webhooks
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Adyen\Model\ConfigurationWebhooks;

use \ArrayAccess;
use Adyen\Model\ConfigurationWebhooks\ObjectSerializer;

/**
 * NetworkTokenNotificationDataV2 Class Doc Comment
 *
 * @package  Adyen
 * @implements \ArrayAccess<string, mixed>
 */
class NetworkTokenNotificationDataV2 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NetworkTokenNotificationDataV2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'authentication' => '\Adyen\Model\ConfigurationWebhooks\TokenAuthentication',
        'authenticationApplied' => 'bool',
        'balancePlatform' => 'string',
        'decision' => 'string',
        'id' => 'string',
        'paymentInstrumentId' => 'string',
        'status' => 'string',
        'tokenLastFour' => 'string',
        'tokenRequestor' => '\Adyen\Model\ConfigurationWebhooks\NetworkTokenRequestor',
        'transactionRulesResult' => '\Adyen\Model\ConfigurationWebhooks\NetworkTokenTransactionRulesResult',
        'type' => 'string',
        'validationFacts' => '\Adyen\Model\ConfigurationWebhooks\ValidationFacts[]',
        'wallet' => '\Adyen\Model\ConfigurationWebhooks\Wallet'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'authentication' => null,
        'authenticationApplied' => null,
        'balancePlatform' => null,
        'decision' => null,
        'id' => null,
        'paymentInstrumentId' => null,
        'status' => null,
        'tokenLastFour' => null,
        'tokenRequestor' => null,
        'transactionRulesResult' => null,
        'type' => null,
        'validationFacts' => null,
        'wallet' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'authentication' => false,
        'authenticationApplied' => false,
        'balancePlatform' => false,
        'decision' => false,
        'id' => false,
        'paymentInstrumentId' => false,
        'status' => false,
        'tokenLastFour' => false,
        'tokenRequestor' => false,
        'transactionRulesResult' => false,
        'type' => false,
        'validationFacts' => false,
        'wallet' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authentication' => 'authentication',
        'authenticationApplied' => 'authenticationApplied',
        'balancePlatform' => 'balancePlatform',
        'decision' => 'decision',
        'id' => 'id',
        'paymentInstrumentId' => 'paymentInstrumentId',
        'status' => 'status',
        'tokenLastFour' => 'tokenLastFour',
        'tokenRequestor' => 'tokenRequestor',
        'transactionRulesResult' => 'transactionRulesResult',
        'type' => 'type',
        'validationFacts' => 'validationFacts',
        'wallet' => 'wallet'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authentication' => 'setAuthentication',
        'authenticationApplied' => 'setAuthenticationApplied',
        'balancePlatform' => 'setBalancePlatform',
        'decision' => 'setDecision',
        'id' => 'setId',
        'paymentInstrumentId' => 'setPaymentInstrumentId',
        'status' => 'setStatus',
        'tokenLastFour' => 'setTokenLastFour',
        'tokenRequestor' => 'setTokenRequestor',
        'transactionRulesResult' => 'setTransactionRulesResult',
        'type' => 'setType',
        'validationFacts' => 'setValidationFacts',
        'wallet' => 'setWallet'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authentication' => 'getAuthentication',
        'authenticationApplied' => 'getAuthenticationApplied',
        'balancePlatform' => 'getBalancePlatform',
        'decision' => 'getDecision',
        'id' => 'getId',
        'paymentInstrumentId' => 'getPaymentInstrumentId',
        'status' => 'getStatus',
        'tokenLastFour' => 'getTokenLastFour',
        'tokenRequestor' => 'getTokenRequestor',
        'transactionRulesResult' => 'getTransactionRulesResult',
        'type' => 'getType',
        'validationFacts' => 'getValidationFacts',
        'wallet' => 'getWallet'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('authentication', $data ?? [], null);
        $this->setIfExists('authenticationApplied', $data ?? [], null);
        $this->setIfExists('balancePlatform', $data ?? [], null);
        $this->setIfExists('decision', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('paymentInstrumentId', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('tokenLastFour', $data ?? [], null);
        $this->setIfExists('tokenRequestor', $data ?? [], null);
        $this->setIfExists('transactionRulesResult', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('validationFacts', $data ?? [], null);
        $this->setIfExists('wallet', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authentication
     *
     * @return \Adyen\Model\ConfigurationWebhooks\TokenAuthentication|null
     */
    public function getAuthentication()
    {
        return $this->container['authentication'];
    }

    /**
     * Sets authentication
     *
     * @param \Adyen\Model\ConfigurationWebhooks\TokenAuthentication|null $authentication authentication
     *
     * @return self
     */
    public function setAuthentication($authentication)
    {
        $this->container['authentication'] = $authentication;

        return $this;
    }

    /**
     * Gets authenticationApplied
     *
     * @return bool|null
     */
    public function getAuthenticationApplied()
    {
        return $this->container['authenticationApplied'];
    }

    /**
     * Sets authenticationApplied
     *
     * @param bool|null $authenticationApplied Specifies whether the authentication process was triggered during token provisioning.
     *
     * @return self
     */
    public function setAuthenticationApplied($authenticationApplied)
    {
        $this->container['authenticationApplied'] = $authenticationApplied;

        return $this;
    }

    /**
     * Gets balancePlatform
     *
     * @return string|null
     */
    public function getBalancePlatform()
    {
        return $this->container['balancePlatform'];
    }

    /**
     * Sets balancePlatform
     *
     * @param string|null $balancePlatform The unique identifier of the balance platform.
     *
     * @return self
     */
    public function setBalancePlatform($balancePlatform)
    {
        $this->container['balancePlatform'] = $balancePlatform;

        return $this;
    }

    /**
     * Gets decision
     *
     * @return string|null
     */
    public function getDecision()
    {
        return $this->container['decision'];
    }

    /**
     * Sets decision
     *
     * @param string|null $decision The decision about the network token provisioning.  Possible values: **approved**, **declined**, **requiresAuthentication**.
     *
     * @return self
     */
    public function setDecision($decision)
    {
        $this->container['decision'] = $decision;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier of the network token.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets paymentInstrumentId
     *
     * @return string|null
     */
    public function getPaymentInstrumentId()
    {
        return $this->container['paymentInstrumentId'];
    }

    /**
     * Sets paymentInstrumentId
     *
     * @param string|null $paymentInstrumentId The unique identifier of the payment instrument to which the network token is associated.
     *
     * @return self
     */
    public function setPaymentInstrumentId($paymentInstrumentId)
    {
        $this->container['paymentInstrumentId'] = $paymentInstrumentId;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The status of the network token.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tokenLastFour
     *
     * @return string|null
     */
    public function getTokenLastFour()
    {
        return $this->container['tokenLastFour'];
    }

    /**
     * Sets tokenLastFour
     *
     * @param string|null $tokenLastFour The last four digits of the network token. Use this value to help your user to identify their network token.
     *
     * @return self
     */
    public function setTokenLastFour($tokenLastFour)
    {
        $this->container['tokenLastFour'] = $tokenLastFour;

        return $this;
    }

    /**
     * Gets tokenRequestor
     *
     * @return \Adyen\Model\ConfigurationWebhooks\NetworkTokenRequestor|null
     */
    public function getTokenRequestor()
    {
        return $this->container['tokenRequestor'];
    }

    /**
     * Sets tokenRequestor
     *
     * @param \Adyen\Model\ConfigurationWebhooks\NetworkTokenRequestor|null $tokenRequestor tokenRequestor
     *
     * @return self
     */
    public function setTokenRequestor($tokenRequestor)
    {
        $this->container['tokenRequestor'] = $tokenRequestor;

        return $this;
    }

    /**
     * Gets transactionRulesResult
     *
     * @return \Adyen\Model\ConfigurationWebhooks\NetworkTokenTransactionRulesResult|null
     */
    public function getTransactionRulesResult()
    {
        return $this->container['transactionRulesResult'];
    }

    /**
     * Sets transactionRulesResult
     *
     * @param \Adyen\Model\ConfigurationWebhooks\NetworkTokenTransactionRulesResult|null $transactionRulesResult transactionRulesResult
     *
     * @return self
     */
    public function setTransactionRulesResult($transactionRulesResult)
    {
        $this->container['transactionRulesResult'] = $transactionRulesResult;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of network token.  Possible values: **wallet**, **cof**.
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets validationFacts
     *
     * @return \Adyen\Model\ConfigurationWebhooks\ValidationFacts[]|null
     */
    public function getValidationFacts()
    {
        return $this->container['validationFacts'];
    }

    /**
     * Sets validationFacts
     *
     * @param \Adyen\Model\ConfigurationWebhooks\ValidationFacts[]|null $validationFacts The rules used to validate the request for provisioning the network token.
     *
     * @return self
     */
    public function setValidationFacts($validationFacts)
    {
        $this->container['validationFacts'] = $validationFacts;

        return $this;
    }

    /**
     * Gets wallet
     *
     * @return \Adyen\Model\ConfigurationWebhooks\Wallet|null
     */
    public function getWallet()
    {
        return $this->container['wallet'];
    }

    /**
     * Sets wallet
     *
     * @param \Adyen\Model\ConfigurationWebhooks\Wallet|null $wallet wallet
     *
     * @return self
     */
    public function setWallet($wallet)
    {
        $this->container['wallet'] = $wallet;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    public function toArray(): array
    {
        $array = [];
        foreach (self::$openAPITypes as $propertyName => $propertyType) {
            $propertyValue = $this[$propertyName];
            if ($propertyValue !== null) {
                // Check if the property value is an object and has a toArray() method
                if (is_object($propertyValue) && method_exists($propertyValue, 'toArray')) {
                    $array[$propertyName] = $propertyValue->toArray();
                // Check if it's type datetime
                } elseif ($propertyValue instanceof \DateTime) {
                    $array[$propertyName] = $propertyValue->format(DATE_ATOM);
                // If it's an array type we should check whether it contains objects and if so call toArray method
                } elseif (is_array($propertyValue)) {
                    $array[$propertyName] = array_map(function ($item) {
                        return $item instanceof ModelInterface ? $item->toArray() : $item;
                    }, $propertyValue);
                } else {
                    // Otherwise, directly assign the property value to the array
                    $array[$propertyName] = $propertyValue;
                }
            }
        }
        return $array;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
