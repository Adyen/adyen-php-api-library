<?php

/**
 * Configuration API
 *
 * The Configuration API enables you to create a platform where you can onboard your users as account holders and create balance accounts, cards, and business accounts.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Versioning The Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/bcl/v2/accountHolders ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://balanceplatform-api-live.adyen.com/bcl/v2`.
 *
 * The version of the OpenAPI document: 2
 * Contact: developer-experience@adyen.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Adyen\Model\BalancePlatform;

use \ArrayAccess;
use Adyen\Model\BalancePlatform\ObjectSerializer;

/**
 * CardConfiguration Class Doc Comment
 *
 * @category Class
 * @package  Adyen
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CardConfiguration implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CardConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'activation' => 'string',
        'activation_url' => 'string',
        'bulk_address' => '\Adyen\Model\BalancePlatform\BulkAddress',
        'card_image_id' => 'string',
        'carrier' => 'string',
        'carrier_image_id' => 'string',
        'configuration_profile_id' => 'string',
        'currency' => 'string',
        'envelope' => 'string',
        'insert' => 'string',
        'language' => 'string',
        'logo_image_id' => 'string',
        'pin_mailer' => 'string',
        'shipment_method' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'activation' => null,
        'activation_url' => null,
        'bulk_address' => null,
        'card_image_id' => null,
        'carrier' => null,
        'carrier_image_id' => null,
        'configuration_profile_id' => null,
        'currency' => null,
        'envelope' => null,
        'insert' => null,
        'language' => null,
        'logo_image_id' => null,
        'pin_mailer' => null,
        'shipment_method' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'activation' => false,
		'activation_url' => false,
		'bulk_address' => false,
		'card_image_id' => false,
		'carrier' => false,
		'carrier_image_id' => false,
		'configuration_profile_id' => false,
		'currency' => false,
		'envelope' => false,
		'insert' => false,
		'language' => false,
		'logo_image_id' => false,
		'pin_mailer' => false,
		'shipment_method' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activation' => 'activation',
        'activation_url' => 'activationUrl',
        'bulk_address' => 'bulkAddress',
        'card_image_id' => 'cardImageId',
        'carrier' => 'carrier',
        'carrier_image_id' => 'carrierImageId',
        'configuration_profile_id' => 'configurationProfileId',
        'currency' => 'currency',
        'envelope' => 'envelope',
        'insert' => 'insert',
        'language' => 'language',
        'logo_image_id' => 'logoImageId',
        'pin_mailer' => 'pinMailer',
        'shipment_method' => 'shipmentMethod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activation' => 'setActivation',
        'activation_url' => 'setActivationUrl',
        'bulk_address' => 'setBulkAddress',
        'card_image_id' => 'setCardImageId',
        'carrier' => 'setCarrier',
        'carrier_image_id' => 'setCarrierImageId',
        'configuration_profile_id' => 'setConfigurationProfileId',
        'currency' => 'setCurrency',
        'envelope' => 'setEnvelope',
        'insert' => 'setInsert',
        'language' => 'setLanguage',
        'logo_image_id' => 'setLogoImageId',
        'pin_mailer' => 'setPinMailer',
        'shipment_method' => 'setShipmentMethod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activation' => 'getActivation',
        'activation_url' => 'getActivationUrl',
        'bulk_address' => 'getBulkAddress',
        'card_image_id' => 'getCardImageId',
        'carrier' => 'getCarrier',
        'carrier_image_id' => 'getCarrierImageId',
        'configuration_profile_id' => 'getConfigurationProfileId',
        'currency' => 'getCurrency',
        'envelope' => 'getEnvelope',
        'insert' => 'getInsert',
        'language' => 'getLanguage',
        'logo_image_id' => 'getLogoImageId',
        'pin_mailer' => 'getPinMailer',
        'shipment_method' => 'getShipmentMethod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('activation', $data ?? [], null);
        $this->setIfExists('activation_url', $data ?? [], null);
        $this->setIfExists('bulk_address', $data ?? [], null);
        $this->setIfExists('card_image_id', $data ?? [], null);
        $this->setIfExists('carrier', $data ?? [], null);
        $this->setIfExists('carrier_image_id', $data ?? [], null);
        $this->setIfExists('configuration_profile_id', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('envelope', $data ?? [], null);
        $this->setIfExists('insert', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('logo_image_id', $data ?? [], null);
        $this->setIfExists('pin_mailer', $data ?? [], null);
        $this->setIfExists('shipment_method', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['configuration_profile_id'] === null) {
            $invalidProperties[] = "'configuration_profile_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets activation
     *
     * @return string|null
     */
    public function getActivation()
    {
        return $this->container['activation'];
    }

    /**
     * Sets activation
     *
     * @param string|null $activation Overrides the activation label design ID defined in the `configurationProfileId`. The activation label is attached to the card and contains the activation instructions.
     *
     * @return self
     */
    public function setActivation($activation)
    {
        if (is_null($activation)) {
            throw new \InvalidArgumentException('non-nullable activation cannot be null');
        }
        $this->container['activation'] = $activation;

        return $this;
    }

    /**
     * Gets activation_url
     *
     * @return string|null
     */
    public function getActivationUrl()
    {
        return $this->container['activation_url'];
    }

    /**
     * Sets activation_url
     *
     * @param string|null $activation_url Your app's URL, if you want to activate cards through your app. For example, **my-app://ref1236a7d**. A QR code is created based on this URL, and is included in the carrier. Before you use this field, reach out to your Adyen contact to set up the QR code process.   Maximum length: 255 characters.
     *
     * @return self
     */
    public function setActivationUrl($activation_url)
    {
        if (is_null($activation_url)) {
            throw new \InvalidArgumentException('non-nullable activation_url cannot be null');
        }
        $this->container['activation_url'] = $activation_url;

        return $this;
    }

    /**
     * Gets bulk_address
     *
     * @return \Adyen\Model\BalancePlatform\BulkAddress|null
     */
    public function getBulkAddress()
    {
        return $this->container['bulk_address'];
    }

    /**
     * Sets bulk_address
     *
     * @param \Adyen\Model\BalancePlatform\BulkAddress|null $bulk_address bulk_address
     *
     * @return self
     */
    public function setBulkAddress($bulk_address)
    {
        if (is_null($bulk_address)) {
            throw new \InvalidArgumentException('non-nullable bulk_address cannot be null');
        }
        $this->container['bulk_address'] = $bulk_address;

        return $this;
    }

    /**
     * Gets card_image_id
     *
     * @return string|null
     */
    public function getCardImageId()
    {
        return $this->container['card_image_id'];
    }

    /**
     * Sets card_image_id
     *
     * @param string|null $card_image_id The ID of the card image. This is the image that will be printed on the full front of the card.
     *
     * @return self
     */
    public function setCardImageId($card_image_id)
    {
        if (is_null($card_image_id)) {
            throw new \InvalidArgumentException('non-nullable card_image_id cannot be null');
        }
        $this->container['card_image_id'] = $card_image_id;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return string|null
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param string|null $carrier Overrides the carrier design ID defined in the `configurationProfileId`. The carrier is the letter or packaging to which the card is attached.
     *
     * @return self
     */
    public function setCarrier($carrier)
    {
        if (is_null($carrier)) {
            throw new \InvalidArgumentException('non-nullable carrier cannot be null');
        }
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets carrier_image_id
     *
     * @return string|null
     */
    public function getCarrierImageId()
    {
        return $this->container['carrier_image_id'];
    }

    /**
     * Sets carrier_image_id
     *
     * @param string|null $carrier_image_id The ID of the carrier image. This is the image that will printed on the letter to which the card is attached.
     *
     * @return self
     */
    public function setCarrierImageId($carrier_image_id)
    {
        if (is_null($carrier_image_id)) {
            throw new \InvalidArgumentException('non-nullable carrier_image_id cannot be null');
        }
        $this->container['carrier_image_id'] = $carrier_image_id;

        return $this;
    }

    /**
     * Gets configuration_profile_id
     *
     * @return string
     */
    public function getConfigurationProfileId()
    {
        return $this->container['configuration_profile_id'];
    }

    /**
     * Sets configuration_profile_id
     *
     * @param string $configuration_profile_id The ID of the card configuration profile that contains the settings of the card. For example, the envelope and PIN mailer designs or the logistics company handling the shipment. All the settings in the profile are applied to the card, unless you provide other fields to override them.  For example, send the `shipmentMethod` to override the logistics company defined in the card configuration profile.
     *
     * @return self
     */
    public function setConfigurationProfileId($configuration_profile_id)
    {
        if (is_null($configuration_profile_id)) {
            throw new \InvalidArgumentException('non-nullable configuration_profile_id cannot be null');
        }
        $this->container['configuration_profile_id'] = $configuration_profile_id;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency The three-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of the card. For example, **EUR**.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets envelope
     *
     * @return string|null
     */
    public function getEnvelope()
    {
        return $this->container['envelope'];
    }

    /**
     * Sets envelope
     *
     * @param string|null $envelope Overrides the envelope design ID defined in the `configurationProfileId`.
     *
     * @return self
     */
    public function setEnvelope($envelope)
    {
        if (is_null($envelope)) {
            throw new \InvalidArgumentException('non-nullable envelope cannot be null');
        }
        $this->container['envelope'] = $envelope;

        return $this;
    }

    /**
     * Gets insert
     *
     * @return string|null
     */
    public function getInsert()
    {
        return $this->container['insert'];
    }

    /**
     * Sets insert
     *
     * @param string|null $insert Overrides the insert design ID defined in the `configurationProfileId`. An insert is any additional material, such as marketing materials, that are shipped together with the card.
     *
     * @return self
     */
    public function setInsert($insert)
    {
        if (is_null($insert)) {
            throw new \InvalidArgumentException('non-nullable insert cannot be null');
        }
        $this->container['insert'] = $insert;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language The two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code of the card. For example, **en**.
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets logo_image_id
     *
     * @return string|null
     */
    public function getLogoImageId()
    {
        return $this->container['logo_image_id'];
    }

    /**
     * Sets logo_image_id
     *
     * @param string|null $logo_image_id The ID of the logo image. This is the image that will be printed on the partial front of the card, such as a logo on the upper right corner.
     *
     * @return self
     */
    public function setLogoImageId($logo_image_id)
    {
        if (is_null($logo_image_id)) {
            throw new \InvalidArgumentException('non-nullable logo_image_id cannot be null');
        }
        $this->container['logo_image_id'] = $logo_image_id;

        return $this;
    }

    /**
     * Gets pin_mailer
     *
     * @return string|null
     */
    public function getPinMailer()
    {
        return $this->container['pin_mailer'];
    }

    /**
     * Sets pin_mailer
     *
     * @param string|null $pin_mailer Overrides the PIN mailer design ID defined in the `configurationProfileId`. The PIN mailer is the letter on which the PIN is printed.
     *
     * @return self
     */
    public function setPinMailer($pin_mailer)
    {
        if (is_null($pin_mailer)) {
            throw new \InvalidArgumentException('non-nullable pin_mailer cannot be null');
        }
        $this->container['pin_mailer'] = $pin_mailer;

        return $this;
    }

    /**
     * Gets shipment_method
     *
     * @return string|null
     */
    public function getShipmentMethod()
    {
        return $this->container['shipment_method'];
    }

    /**
     * Sets shipment_method
     *
     * @param string|null $shipment_method Overrides the logistics company defined in the `configurationProfileId`.
     *
     * @return self
     */
    public function setShipmentMethod($shipment_method)
    {
        if (is_null($shipment_method)) {
            throw new \InvalidArgumentException('non-nullable shipment_method cannot be null');
        }
        $this->container['shipment_method'] = $shipment_method;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
