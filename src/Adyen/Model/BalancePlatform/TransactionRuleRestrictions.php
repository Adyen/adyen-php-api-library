<?php

/**
 * Configuration API
 *
 * The Configuration API enables you to create a platform where you can onboard your users as account holders and create balance accounts, cards, and business accounts.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Versioning The Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/bcl/v2/accountHolders ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://balanceplatform-api-live.adyen.com/bcl/v2`.
 *
 * The version of the OpenAPI document: 2
 * Contact: developer-experience@adyen.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Adyen\Model\BalancePlatform;

use \ArrayAccess;
use Adyen\Model\BalancePlatform\ObjectSerializer;

/**
 * TransactionRuleRestrictions Class Doc Comment
 *
 * @category Class
 * @package  Adyen
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransactionRuleRestrictions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionRuleRestrictions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'active_network_tokens' => '\Adyen\Model\BalancePlatform\ActiveNetworkTokensRestriction',
        'brand_variants' => '\Adyen\Model\BalancePlatform\BrandVariantsRestriction',
        'countries' => '\Adyen\Model\BalancePlatform\CountriesRestriction',
        'day_of_week' => '\Adyen\Model\BalancePlatform\DayOfWeekRestriction',
        'different_currencies' => '\Adyen\Model\BalancePlatform\DifferentCurrenciesRestriction',
        'entry_modes' => '\Adyen\Model\BalancePlatform\EntryModesRestriction',
        'international_transaction' => '\Adyen\Model\BalancePlatform\InternationalTransactionRestriction',
        'matching_transactions' => '\Adyen\Model\BalancePlatform\MatchingTransactionsRestriction',
        'mccs' => '\Adyen\Model\BalancePlatform\MccsRestriction',
        'merchant_names' => '\Adyen\Model\BalancePlatform\MerchantNamesRestriction',
        'merchants' => '\Adyen\Model\BalancePlatform\MerchantsRestriction',
        'processing_types' => '\Adyen\Model\BalancePlatform\ProcessingTypesRestriction',
        'time_of_day' => '\Adyen\Model\BalancePlatform\TimeOfDayRestriction',
        'total_amount' => '\Adyen\Model\BalancePlatform\TotalAmountRestriction'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'active_network_tokens' => null,
        'brand_variants' => null,
        'countries' => null,
        'day_of_week' => null,
        'different_currencies' => null,
        'entry_modes' => null,
        'international_transaction' => null,
        'matching_transactions' => null,
        'mccs' => null,
        'merchant_names' => null,
        'merchants' => null,
        'processing_types' => null,
        'time_of_day' => null,
        'total_amount' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'active_network_tokens' => false,
        'brand_variants' => false,
        'countries' => false,
        'day_of_week' => false,
        'different_currencies' => false,
        'entry_modes' => false,
        'international_transaction' => false,
        'matching_transactions' => false,
        'mccs' => false,
        'merchant_names' => false,
        'merchants' => false,
        'processing_types' => false,
        'time_of_day' => false,
        'total_amount' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active_network_tokens' => 'activeNetworkTokens',
        'brand_variants' => 'brandVariants',
        'countries' => 'countries',
        'day_of_week' => 'dayOfWeek',
        'different_currencies' => 'differentCurrencies',
        'entry_modes' => 'entryModes',
        'international_transaction' => 'internationalTransaction',
        'matching_transactions' => 'matchingTransactions',
        'mccs' => 'mccs',
        'merchant_names' => 'merchantNames',
        'merchants' => 'merchants',
        'processing_types' => 'processingTypes',
        'time_of_day' => 'timeOfDay',
        'total_amount' => 'totalAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active_network_tokens' => 'setActiveNetworkTokens',
        'brand_variants' => 'setBrandVariants',
        'countries' => 'setCountries',
        'day_of_week' => 'setDayOfWeek',
        'different_currencies' => 'setDifferentCurrencies',
        'entry_modes' => 'setEntryModes',
        'international_transaction' => 'setInternationalTransaction',
        'matching_transactions' => 'setMatchingTransactions',
        'mccs' => 'setMccs',
        'merchant_names' => 'setMerchantNames',
        'merchants' => 'setMerchants',
        'processing_types' => 'setProcessingTypes',
        'time_of_day' => 'setTimeOfDay',
        'total_amount' => 'setTotalAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active_network_tokens' => 'getActiveNetworkTokens',
        'brand_variants' => 'getBrandVariants',
        'countries' => 'getCountries',
        'day_of_week' => 'getDayOfWeek',
        'different_currencies' => 'getDifferentCurrencies',
        'entry_modes' => 'getEntryModes',
        'international_transaction' => 'getInternationalTransaction',
        'matching_transactions' => 'getMatchingTransactions',
        'mccs' => 'getMccs',
        'merchant_names' => 'getMerchantNames',
        'merchants' => 'getMerchants',
        'processing_types' => 'getProcessingTypes',
        'time_of_day' => 'getTimeOfDay',
        'total_amount' => 'getTotalAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('active_network_tokens', $data ?? [], null);
        $this->setIfExists('brand_variants', $data ?? [], null);
        $this->setIfExists('countries', $data ?? [], null);
        $this->setIfExists('day_of_week', $data ?? [], null);
        $this->setIfExists('different_currencies', $data ?? [], null);
        $this->setIfExists('entry_modes', $data ?? [], null);
        $this->setIfExists('international_transaction', $data ?? [], null);
        $this->setIfExists('matching_transactions', $data ?? [], null);
        $this->setIfExists('mccs', $data ?? [], null);
        $this->setIfExists('merchant_names', $data ?? [], null);
        $this->setIfExists('merchants', $data ?? [], null);
        $this->setIfExists('processing_types', $data ?? [], null);
        $this->setIfExists('time_of_day', $data ?? [], null);
        $this->setIfExists('total_amount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active_network_tokens
     *
     * @return \Adyen\Model\BalancePlatform\ActiveNetworkTokensRestriction|null
     */
    public function getActiveNetworkTokens()
    {
        return $this->container['active_network_tokens'];
    }

    /**
     * Sets active_network_tokens
     *
     * @param \Adyen\Model\BalancePlatform\ActiveNetworkTokensRestriction|null $active_network_tokens active_network_tokens
     *
     * @return self
     */
    public function setActiveNetworkTokens($active_network_tokens)
    {
        if (is_null($active_network_tokens)) {
            throw new \InvalidArgumentException('non-nullable active_network_tokens cannot be null');
        }
        $this->container['active_network_tokens'] = $active_network_tokens;

        return $this;
    }

    /**
     * Gets brand_variants
     *
     * @return \Adyen\Model\BalancePlatform\BrandVariantsRestriction|null
     */
    public function getBrandVariants()
    {
        return $this->container['brand_variants'];
    }

    /**
     * Sets brand_variants
     *
     * @param \Adyen\Model\BalancePlatform\BrandVariantsRestriction|null $brand_variants brand_variants
     *
     * @return self
     */
    public function setBrandVariants($brand_variants)
    {
        if (is_null($brand_variants)) {
            throw new \InvalidArgumentException('non-nullable brand_variants cannot be null');
        }
        $this->container['brand_variants'] = $brand_variants;

        return $this;
    }

    /**
     * Gets countries
     *
     * @return \Adyen\Model\BalancePlatform\CountriesRestriction|null
     */
    public function getCountries()
    {
        return $this->container['countries'];
    }

    /**
     * Sets countries
     *
     * @param \Adyen\Model\BalancePlatform\CountriesRestriction|null $countries countries
     *
     * @return self
     */
    public function setCountries($countries)
    {
        if (is_null($countries)) {
            throw new \InvalidArgumentException('non-nullable countries cannot be null');
        }
        $this->container['countries'] = $countries;

        return $this;
    }

    /**
     * Gets day_of_week
     *
     * @return \Adyen\Model\BalancePlatform\DayOfWeekRestriction|null
     */
    public function getDayOfWeek()
    {
        return $this->container['day_of_week'];
    }

    /**
     * Sets day_of_week
     *
     * @param \Adyen\Model\BalancePlatform\DayOfWeekRestriction|null $day_of_week day_of_week
     *
     * @return self
     */
    public function setDayOfWeek($day_of_week)
    {
        if (is_null($day_of_week)) {
            throw new \InvalidArgumentException('non-nullable day_of_week cannot be null');
        }
        $this->container['day_of_week'] = $day_of_week;

        return $this;
    }

    /**
     * Gets different_currencies
     *
     * @return \Adyen\Model\BalancePlatform\DifferentCurrenciesRestriction|null
     */
    public function getDifferentCurrencies()
    {
        return $this->container['different_currencies'];
    }

    /**
     * Sets different_currencies
     *
     * @param \Adyen\Model\BalancePlatform\DifferentCurrenciesRestriction|null $different_currencies different_currencies
     *
     * @return self
     */
    public function setDifferentCurrencies($different_currencies)
    {
        if (is_null($different_currencies)) {
            throw new \InvalidArgumentException('non-nullable different_currencies cannot be null');
        }
        $this->container['different_currencies'] = $different_currencies;

        return $this;
    }

    /**
     * Gets entry_modes
     *
     * @return \Adyen\Model\BalancePlatform\EntryModesRestriction|null
     */
    public function getEntryModes()
    {
        return $this->container['entry_modes'];
    }

    /**
     * Sets entry_modes
     *
     * @param \Adyen\Model\BalancePlatform\EntryModesRestriction|null $entry_modes entry_modes
     *
     * @return self
     */
    public function setEntryModes($entry_modes)
    {
        if (is_null($entry_modes)) {
            throw new \InvalidArgumentException('non-nullable entry_modes cannot be null');
        }
        $this->container['entry_modes'] = $entry_modes;

        return $this;
    }

    /**
     * Gets international_transaction
     *
     * @return \Adyen\Model\BalancePlatform\InternationalTransactionRestriction|null
     */
    public function getInternationalTransaction()
    {
        return $this->container['international_transaction'];
    }

    /**
     * Sets international_transaction
     *
     * @param \Adyen\Model\BalancePlatform\InternationalTransactionRestriction|null $international_transaction international_transaction
     *
     * @return self
     */
    public function setInternationalTransaction($international_transaction)
    {
        if (is_null($international_transaction)) {
            throw new \InvalidArgumentException('non-nullable international_transaction cannot be null');
        }
        $this->container['international_transaction'] = $international_transaction;

        return $this;
    }

    /**
     * Gets matching_transactions
     *
     * @return \Adyen\Model\BalancePlatform\MatchingTransactionsRestriction|null
     */
    public function getMatchingTransactions()
    {
        return $this->container['matching_transactions'];
    }

    /**
     * Sets matching_transactions
     *
     * @param \Adyen\Model\BalancePlatform\MatchingTransactionsRestriction|null $matching_transactions matching_transactions
     *
     * @return self
     */
    public function setMatchingTransactions($matching_transactions)
    {
        if (is_null($matching_transactions)) {
            throw new \InvalidArgumentException('non-nullable matching_transactions cannot be null');
        }
        $this->container['matching_transactions'] = $matching_transactions;

        return $this;
    }

    /**
     * Gets mccs
     *
     * @return \Adyen\Model\BalancePlatform\MccsRestriction|null
     */
    public function getMccs()
    {
        return $this->container['mccs'];
    }

    /**
     * Sets mccs
     *
     * @param \Adyen\Model\BalancePlatform\MccsRestriction|null $mccs mccs
     *
     * @return self
     */
    public function setMccs($mccs)
    {
        if (is_null($mccs)) {
            throw new \InvalidArgumentException('non-nullable mccs cannot be null');
        }
        $this->container['mccs'] = $mccs;

        return $this;
    }

    /**
     * Gets merchant_names
     *
     * @return \Adyen\Model\BalancePlatform\MerchantNamesRestriction|null
     */
    public function getMerchantNames()
    {
        return $this->container['merchant_names'];
    }

    /**
     * Sets merchant_names
     *
     * @param \Adyen\Model\BalancePlatform\MerchantNamesRestriction|null $merchant_names merchant_names
     *
     * @return self
     */
    public function setMerchantNames($merchant_names)
    {
        if (is_null($merchant_names)) {
            throw new \InvalidArgumentException('non-nullable merchant_names cannot be null');
        }
        $this->container['merchant_names'] = $merchant_names;

        return $this;
    }

    /**
     * Gets merchants
     *
     * @return \Adyen\Model\BalancePlatform\MerchantsRestriction|null
     */
    public function getMerchants()
    {
        return $this->container['merchants'];
    }

    /**
     * Sets merchants
     *
     * @param \Adyen\Model\BalancePlatform\MerchantsRestriction|null $merchants merchants
     *
     * @return self
     */
    public function setMerchants($merchants)
    {
        if (is_null($merchants)) {
            throw new \InvalidArgumentException('non-nullable merchants cannot be null');
        }
        $this->container['merchants'] = $merchants;

        return $this;
    }

    /**
     * Gets processing_types
     *
     * @return \Adyen\Model\BalancePlatform\ProcessingTypesRestriction|null
     */
    public function getProcessingTypes()
    {
        return $this->container['processing_types'];
    }

    /**
     * Sets processing_types
     *
     * @param \Adyen\Model\BalancePlatform\ProcessingTypesRestriction|null $processing_types processing_types
     *
     * @return self
     */
    public function setProcessingTypes($processing_types)
    {
        if (is_null($processing_types)) {
            throw new \InvalidArgumentException('non-nullable processing_types cannot be null');
        }
        $this->container['processing_types'] = $processing_types;

        return $this;
    }

    /**
     * Gets time_of_day
     *
     * @return \Adyen\Model\BalancePlatform\TimeOfDayRestriction|null
     */
    public function getTimeOfDay()
    {
        return $this->container['time_of_day'];
    }

    /**
     * Sets time_of_day
     *
     * @param \Adyen\Model\BalancePlatform\TimeOfDayRestriction|null $time_of_day time_of_day
     *
     * @return self
     */
    public function setTimeOfDay($time_of_day)
    {
        if (is_null($time_of_day)) {
            throw new \InvalidArgumentException('non-nullable time_of_day cannot be null');
        }
        $this->container['time_of_day'] = $time_of_day;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return \Adyen\Model\BalancePlatform\TotalAmountRestriction|null
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param \Adyen\Model\BalancePlatform\TotalAmountRestriction|null $total_amount total_amount
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        if (is_null($total_amount)) {
            throw new \InvalidArgumentException('non-nullable total_amount cannot be null');
        }
        $this->container['total_amount'] = $total_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
