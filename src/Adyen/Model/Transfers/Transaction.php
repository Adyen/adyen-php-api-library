<?php

/**
 * Transfers API
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Adyen\Model\Transfers;

use \ArrayAccess;
use Adyen\Model\Transfers\ObjectSerializer;

/**
 * Transaction Class Doc Comment
 *
 * @category Class
 * @package  Adyen
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Transaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accountHolderId' => 'string',
        'amount' => '\Adyen\Model\Transfers\Amount',
        'balanceAccountId' => 'string',
        'balancePlatform' => 'string',
        'bookingDate' => '\DateTime',
        'category' => 'string',
        'counterparty' => '\Adyen\Model\Transfers\CounterpartyV3',
        'createdAt' => '\DateTime',
        'creationDate' => '\DateTime',
        'description' => 'string',
        'eventId' => 'string',
        'id' => 'string',
        'instructedAmount' => '\Adyen\Model\Transfers\Amount',
        'paymentInstrumentId' => 'string',
        'reference' => 'string',
        'referenceForBeneficiary' => 'string',
        'status' => 'string',
        'transferId' => 'string',
        'type' => 'string',
        'valueDate' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'accountHolderId' => null,
        'amount' => null,
        'balanceAccountId' => null,
        'balancePlatform' => null,
        'bookingDate' => 'date-time',
        'category' => null,
        'counterparty' => null,
        'createdAt' => 'date-time',
        'creationDate' => 'date-time',
        'description' => null,
        'eventId' => null,
        'id' => null,
        'instructedAmount' => null,
        'paymentInstrumentId' => null,
        'reference' => null,
        'referenceForBeneficiary' => null,
        'status' => null,
        'transferId' => null,
        'type' => null,
        'valueDate' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'accountHolderId' => false,
        'amount' => false,
        'balanceAccountId' => false,
        'balancePlatform' => false,
        'bookingDate' => false,
        'category' => false,
        'counterparty' => false,
        'createdAt' => false,
        'creationDate' => false,
        'description' => false,
        'eventId' => false,
        'id' => false,
        'instructedAmount' => false,
        'paymentInstrumentId' => false,
        'reference' => false,
        'referenceForBeneficiary' => false,
        'status' => false,
        'transferId' => false,
        'type' => false,
        'valueDate' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountHolderId' => 'accountHolderId',
        'amount' => 'amount',
        'balanceAccountId' => 'balanceAccountId',
        'balancePlatform' => 'balancePlatform',
        'bookingDate' => 'bookingDate',
        'category' => 'category',
        'counterparty' => 'counterparty',
        'createdAt' => 'createdAt',
        'creationDate' => 'creationDate',
        'description' => 'description',
        'eventId' => 'eventId',
        'id' => 'id',
        'instructedAmount' => 'instructedAmount',
        'paymentInstrumentId' => 'paymentInstrumentId',
        'reference' => 'reference',
        'referenceForBeneficiary' => 'referenceForBeneficiary',
        'status' => 'status',
        'transferId' => 'transferId',
        'type' => 'type',
        'valueDate' => 'valueDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountHolderId' => 'setAccountHolderId',
        'amount' => 'setAmount',
        'balanceAccountId' => 'setBalanceAccountId',
        'balancePlatform' => 'setBalancePlatform',
        'bookingDate' => 'setBookingDate',
        'category' => 'setCategory',
        'counterparty' => 'setCounterparty',
        'createdAt' => 'setCreatedAt',
        'creationDate' => 'setCreationDate',
        'description' => 'setDescription',
        'eventId' => 'setEventId',
        'id' => 'setId',
        'instructedAmount' => 'setInstructedAmount',
        'paymentInstrumentId' => 'setPaymentInstrumentId',
        'reference' => 'setReference',
        'referenceForBeneficiary' => 'setReferenceForBeneficiary',
        'status' => 'setStatus',
        'transferId' => 'setTransferId',
        'type' => 'setType',
        'valueDate' => 'setValueDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountHolderId' => 'getAccountHolderId',
        'amount' => 'getAmount',
        'balanceAccountId' => 'getBalanceAccountId',
        'balancePlatform' => 'getBalancePlatform',
        'bookingDate' => 'getBookingDate',
        'category' => 'getCategory',
        'counterparty' => 'getCounterparty',
        'createdAt' => 'getCreatedAt',
        'creationDate' => 'getCreationDate',
        'description' => 'getDescription',
        'eventId' => 'getEventId',
        'id' => 'getId',
        'instructedAmount' => 'getInstructedAmount',
        'paymentInstrumentId' => 'getPaymentInstrumentId',
        'reference' => 'getReference',
        'referenceForBeneficiary' => 'getReferenceForBeneficiary',
        'status' => 'getStatus',
        'transferId' => 'getTransferId',
        'type' => 'getType',
        'valueDate' => 'getValueDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CATEGORY_BANK = 'bank';
    public const CATEGORY_CARD = 'card';
    public const CATEGORY_GRANTS = 'grants';
    public const CATEGORY_INTERNAL = 'internal';
    public const CATEGORY_ISSUED_CARD = 'issuedCard';
    public const CATEGORY_MIGRATION = 'migration';
    public const CATEGORY_PLATFORM_PAYMENT = 'platformPayment';
    public const STATUS_BOOKED = 'booked';
    public const STATUS_PENDING = 'pending';
    public const TYPE_ATM_WITHDRAWAL = 'atmWithdrawal';
    public const TYPE_ATM_WITHDRAWAL_REVERSAL = 'atmWithdrawalReversal';
    public const TYPE_BALANCE_ADJUSTMENT = 'balanceAdjustment';
    public const TYPE_BALANCE_ROLLOVER = 'balanceRollover';
    public const TYPE_BANK_TRANSFER = 'bankTransfer';
    public const TYPE_CAPTURE = 'capture';
    public const TYPE_CAPTURE_REVERSAL = 'captureReversal';
    public const TYPE_CARD_TRANSFER = 'cardTransfer';
    public const TYPE_CHARGEBACK = 'chargeback';
    public const TYPE_CHARGEBACK_REVERSAL = 'chargebackReversal';
    public const TYPE_DEPOSIT_CORRECTION = 'depositCorrection';
    public const TYPE_FEE = 'fee';
    public const TYPE_GRANT = 'grant';
    public const TYPE_INSTALLMENT = 'installment';
    public const TYPE_INSTALLMENT_REVERSAL = 'installmentReversal';
    public const TYPE_INTERNAL_TRANSFER = 'internalTransfer';
    public const TYPE_INVOICE_DEDUCTION = 'invoiceDeduction';
    public const TYPE_LEFTOVER = 'leftover';
    public const TYPE_MANUAL_CORRECTION = 'manualCorrection';
    public const TYPE_MISC_COST = 'miscCost';
    public const TYPE_PAYMENT = 'payment';
    public const TYPE_PAYMENT_COST = 'paymentCost';
    public const TYPE_REFUND = 'refund';
    public const TYPE_REFUND_REVERSAL = 'refundReversal';
    public const TYPE_REPAYMENT = 'repayment';
    public const TYPE_RESERVE_ADJUSTMENT = 'reserveAdjustment';
    public const TYPE_SECOND_CHARGEBACK = 'secondChargeback';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCategoryAllowableValues()
    {
        return [
            self::CATEGORY_BANK,
            self::CATEGORY_CARD,
            self::CATEGORY_GRANTS,
            self::CATEGORY_INTERNAL,
            self::CATEGORY_ISSUED_CARD,
            self::CATEGORY_MIGRATION,
            self::CATEGORY_PLATFORM_PAYMENT,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_BOOKED,
            self::STATUS_PENDING,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ATM_WITHDRAWAL,
            self::TYPE_ATM_WITHDRAWAL_REVERSAL,
            self::TYPE_BALANCE_ADJUSTMENT,
            self::TYPE_BALANCE_ROLLOVER,
            self::TYPE_BANK_TRANSFER,
            self::TYPE_CAPTURE,
            self::TYPE_CAPTURE_REVERSAL,
            self::TYPE_CARD_TRANSFER,
            self::TYPE_CHARGEBACK,
            self::TYPE_CHARGEBACK_REVERSAL,
            self::TYPE_DEPOSIT_CORRECTION,
            self::TYPE_FEE,
            self::TYPE_GRANT,
            self::TYPE_INSTALLMENT,
            self::TYPE_INSTALLMENT_REVERSAL,
            self::TYPE_INTERNAL_TRANSFER,
            self::TYPE_INVOICE_DEDUCTION,
            self::TYPE_LEFTOVER,
            self::TYPE_MANUAL_CORRECTION,
            self::TYPE_MISC_COST,
            self::TYPE_PAYMENT,
            self::TYPE_PAYMENT_COST,
            self::TYPE_REFUND,
            self::TYPE_REFUND_REVERSAL,
            self::TYPE_REPAYMENT,
            self::TYPE_RESERVE_ADJUSTMENT,
            self::TYPE_SECOND_CHARGEBACK,
        ];
    }
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('accountHolderId', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('balanceAccountId', $data ?? [], null);
        $this->setIfExists('balancePlatform', $data ?? [], null);
        $this->setIfExists('bookingDate', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('counterparty', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('creationDate', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('eventId', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('instructedAmount', $data ?? [], null);
        $this->setIfExists('paymentInstrumentId', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('referenceForBeneficiary', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('transferId', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('valueDate', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['accountHolderId'] === null) {
            $invalidProperties[] = "'accountHolderId' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['balanceAccountId'] === null) {
            $invalidProperties[] = "'balanceAccountId' can't be null";
        }
        if ($this->container['balancePlatform'] === null) {
            $invalidProperties[] = "'balancePlatform' can't be null";
        }
        if ($this->container['bookingDate'] === null) {
            $invalidProperties[] = "'bookingDate' can't be null";
        }
        $allowedValues = $this->getCategoryAllowableValues();
        if (!is_null($this->container['category']) && !in_array($this->container['category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'category', must be one of '%s'",
                $this->container['category'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['counterparty'] === null) {
            $invalidProperties[] = "'counterparty' can't be null";
        }
        if ($this->container['createdAt'] === null) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['reference'] === null) {
            $invalidProperties[] = "'reference' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['valueDate'] === null) {
            $invalidProperties[] = "'valueDate' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountHolderId
     *
     * @return string
     */
    public function getAccountHolderId()
    {
        return $this->container['accountHolderId'];
    }

    /**
     * Sets accountHolderId
     *
     * @param string $accountHolderId Unique identifier of the account holder.
     *
     * @return self
     */
    public function setAccountHolderId($accountHolderId)
    {
        if (is_null($accountHolderId)) {
            throw new \InvalidArgumentException('non-nullable accountHolderId cannot be null');
        }
        $this->container['accountHolderId'] = $accountHolderId;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \Adyen\Model\Transfers\Amount
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \Adyen\Model\Transfers\Amount $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets balanceAccountId
     *
     * @return string
     */
    public function getBalanceAccountId()
    {
        return $this->container['balanceAccountId'];
    }

    /**
     * Sets balanceAccountId
     *
     * @param string $balanceAccountId Unique identifier of the balance account.
     *
     * @return self
     */
    public function setBalanceAccountId($balanceAccountId)
    {
        if (is_null($balanceAccountId)) {
            throw new \InvalidArgumentException('non-nullable balanceAccountId cannot be null');
        }
        $this->container['balanceAccountId'] = $balanceAccountId;

        return $this;
    }

    /**
     * Gets balancePlatform
     *
     * @return string
     */
    public function getBalancePlatform()
    {
        return $this->container['balancePlatform'];
    }

    /**
     * Sets balancePlatform
     *
     * @param string $balancePlatform Unique identifier of the balance platform.
     *
     * @return self
     */
    public function setBalancePlatform($balancePlatform)
    {
        if (is_null($balancePlatform)) {
            throw new \InvalidArgumentException('non-nullable balancePlatform cannot be null');
        }
        $this->container['balancePlatform'] = $balancePlatform;

        return $this;
    }

    /**
     * Gets bookingDate
     *
     * @return \DateTime
     */
    public function getBookingDate()
    {
        return $this->container['bookingDate'];
    }

    /**
     * Sets bookingDate
     *
     * @param \DateTime $bookingDate The date the transaction was booked to the balance account.
     *
     * @return self
     */
    public function setBookingDate($bookingDate)
    {
        if (is_null($bookingDate)) {
            throw new \InvalidArgumentException('non-nullable bookingDate cannot be null');
        }
        $this->container['bookingDate'] = $bookingDate;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category The category of the transaction indicating the type of activity.   Possible values:  * **platformPayment**: The transaction is a payment or payment modification made with an Adyen merchant account.  * **internal**: The transaction resulted from an internal adjustment such as a deposit correction or invoice deduction.  * **bank**: The transaction is a bank-related activity, such as sending a payout or receiving funds.  * **issuedCard**: The transaction is a card-related activity, such as using an Adyen-issued card to pay online.
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $allowedValues = $this->getCategoryAllowableValues();
        if (!in_array($category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'category', must be one of '%s'",
                    $category,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets counterparty
     *
     * @return \Adyen\Model\Transfers\CounterpartyV3
     */
    public function getCounterparty()
    {
        return $this->container['counterparty'];
    }

    /**
     * Sets counterparty
     *
     * @param \Adyen\Model\Transfers\CounterpartyV3 $counterparty counterparty
     *
     * @return self
     */
    public function setCounterparty($counterparty)
    {
        if (is_null($counterparty)) {
            throw new \InvalidArgumentException('non-nullable counterparty cannot be null');
        }
        $this->container['counterparty'] = $counterparty;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime $createdAt The date the transaction was created.
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return \DateTime|null
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param \DateTime|null $creationDate The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.
     *
     * @return self
     */
    public function setCreationDate($creationDate)
    {
        if (is_null($creationDate)) {
            throw new \InvalidArgumentException('non-nullable creationDate cannot be null');
        }
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The `description` from the `/transfers` request.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets eventId
     *
     * @return string|null
     */
    public function getEventId()
    {
        return $this->container['eventId'];
    }

    /**
     * Sets eventId
     *
     * @param string|null $eventId The PSP reference in the journal.
     *
     * @return self
     */
    public function setEventId($eventId)
    {
        if (is_null($eventId)) {
            throw new \InvalidArgumentException('non-nullable eventId cannot be null');
        }
        $this->container['eventId'] = $eventId;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique identifier of the transaction.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets instructedAmount
     *
     * @return \Adyen\Model\Transfers\Amount|null
     */
    public function getInstructedAmount()
    {
        return $this->container['instructedAmount'];
    }

    /**
     * Sets instructedAmount
     *
     * @param \Adyen\Model\Transfers\Amount|null $instructedAmount instructedAmount
     *
     * @return self
     */
    public function setInstructedAmount($instructedAmount)
    {
        if (is_null($instructedAmount)) {
            throw new \InvalidArgumentException('non-nullable instructedAmount cannot be null');
        }
        $this->container['instructedAmount'] = $instructedAmount;

        return $this;
    }

    /**
     * Gets paymentInstrumentId
     *
     * @return string|null
     */
    public function getPaymentInstrumentId()
    {
        return $this->container['paymentInstrumentId'];
    }

    /**
     * Sets paymentInstrumentId
     *
     * @param string|null $paymentInstrumentId Unique identifier of the payment instrument that was used for the transaction.
     *
     * @return self
     */
    public function setPaymentInstrumentId($paymentInstrumentId)
    {
        if (is_null($paymentInstrumentId)) {
            throw new \InvalidArgumentException('non-nullable paymentInstrumentId cannot be null');
        }
        $this->container['paymentInstrumentId'] = $paymentInstrumentId;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference The [`reference`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_reference) from the `/transfers` request. If you haven't provided any, Adyen generates a unique reference.
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets referenceForBeneficiary
     *
     * @return string|null
     */
    public function getReferenceForBeneficiary()
    {
        return $this->container['referenceForBeneficiary'];
    }

    /**
     * Sets referenceForBeneficiary
     *
     * @param string|null $referenceForBeneficiary The reference sent to or received from the counterparty.  * For outgoing funds, this is the [`referenceForBeneficiary`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__resParam_referenceForBeneficiary) from the  [`/transfers`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_referenceForBeneficiary) request.   * For incoming funds, this is the reference from the sender.
     *
     * @return self
     */
    public function setReferenceForBeneficiary($referenceForBeneficiary)
    {
        if (is_null($referenceForBeneficiary)) {
            throw new \InvalidArgumentException('non-nullable referenceForBeneficiary cannot be null');
        }
        $this->container['referenceForBeneficiary'] = $referenceForBeneficiary;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the transaction.   Possible values:  * **pending**: The transaction is still pending.  * **booked**: The transaction has been booked to the balance account.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets transferId
     *
     * @return string|null
     */
    public function getTransferId()
    {
        return $this->container['transferId'];
    }

    /**
     * Sets transferId
     *
     * @param string|null $transferId Unique identifier of the related transfer.
     *
     * @return self
     */
    public function setTransferId($transferId)
    {
        if (is_null($transferId)) {
            throw new \InvalidArgumentException('non-nullable transferId cannot be null');
        }
        $this->container['transferId'] = $transferId;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of the transaction.   Possible values: **payment**, **capture**, **captureReversal**, **refund** **refundReversal**, **chargeback**, **chargebackReversal**, **secondChargeback**, **atmWithdrawal**, **atmWithdrawalReversal**, **internalTransfer**, **manualCorrection**, **invoiceDeduction**, **depositCorrection**, **bankTransfer**, **miscCost**, **paymentCost**, **fee**
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets valueDate
     *
     * @return \DateTime
     */
    public function getValueDate()
    {
        return $this->container['valueDate'];
    }

    /**
     * Sets valueDate
     *
     * @param \DateTime $valueDate The date the transfer amount becomes available in the balance account.
     *
     * @return self
     */
    public function setValueDate($valueDate)
    {
        if (is_null($valueDate)) {
            throw new \InvalidArgumentException('non-nullable valueDate cannot be null');
        }
        $this->container['valueDate'] = $valueDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
