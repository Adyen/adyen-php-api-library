<?php

/**
 * Transfers API
 *
 * The Transfers API provides endpoints that you can use to get information about all your transactions, move funds within your balance platform or send funds from your balance platform to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments).  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Roles and permissions To use the Transfers API, you need an additional role for your API credential. Transfers must also be enabled for the source balance account. Your Adyen contact will set up the roles and permissions for you. ## Versioning The Transfers API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/btl/v3/transfers ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://balanceplatform-api-live.adyen.com/btl/v3`.
 *
 * The version of the OpenAPI document: 3
 * Contact: developer-experience@adyen.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Adyen\Model\Transfers;

use \ArrayAccess;
use Adyen\Model\Transfers\ObjectSerializer;

/**
 * BankAccountV3AccountIdentification Class Doc Comment
 *
 * @category Class
 * @description Contains the bank account details. The fields required in this object depend on the country of the bank account and the currency of the transfer.
 * @package  Adyen
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BankAccountV3AccountIdentification implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BankAccountV3_accountIdentification';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_number' => 'string',
        'bsb_code' => 'string',
        'type' => 'string',
        'bank_code' => 'string',
        'branch_number' => 'string',
        'institution_number' => 'string',
        'transit_number' => 'string',
        'iban' => 'string',
        'additional_bank_identification' => '\Adyen\Model\Transfers\AdditionalBankIdentification',
        'bic' => 'string',
        'clearing_number' => 'string',
        'sort_code' => 'string',
        'account_type' => 'string',
        'routing_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_number' => null,
        'bsb_code' => null,
        'type' => null,
        'bank_code' => null,
        'branch_number' => null,
        'institution_number' => null,
        'transit_number' => null,
        'iban' => null,
        'additional_bank_identification' => null,
        'bic' => null,
        'clearing_number' => null,
        'sort_code' => null,
        'account_type' => null,
        'routing_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'account_number' => false,
        'bsb_code' => false,
        'type' => false,
        'bank_code' => false,
        'branch_number' => false,
        'institution_number' => false,
        'transit_number' => false,
        'iban' => false,
        'additional_bank_identification' => false,
        'bic' => false,
        'clearing_number' => false,
        'sort_code' => false,
        'account_type' => false,
        'routing_number' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_number' => 'accountNumber',
        'bsb_code' => 'bsbCode',
        'type' => 'type',
        'bank_code' => 'bankCode',
        'branch_number' => 'branchNumber',
        'institution_number' => 'institutionNumber',
        'transit_number' => 'transitNumber',
        'iban' => 'iban',
        'additional_bank_identification' => 'additionalBankIdentification',
        'bic' => 'bic',
        'clearing_number' => 'clearingNumber',
        'sort_code' => 'sortCode',
        'account_type' => 'accountType',
        'routing_number' => 'routingNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_number' => 'setAccountNumber',
        'bsb_code' => 'setBsbCode',
        'type' => 'setType',
        'bank_code' => 'setBankCode',
        'branch_number' => 'setBranchNumber',
        'institution_number' => 'setInstitutionNumber',
        'transit_number' => 'setTransitNumber',
        'iban' => 'setIban',
        'additional_bank_identification' => 'setAdditionalBankIdentification',
        'bic' => 'setBic',
        'clearing_number' => 'setClearingNumber',
        'sort_code' => 'setSortCode',
        'account_type' => 'setAccountType',
        'routing_number' => 'setRoutingNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_number' => 'getAccountNumber',
        'bsb_code' => 'getBsbCode',
        'type' => 'getType',
        'bank_code' => 'getBankCode',
        'branch_number' => 'getBranchNumber',
        'institution_number' => 'getInstitutionNumber',
        'transit_number' => 'getTransitNumber',
        'iban' => 'getIban',
        'additional_bank_identification' => 'getAdditionalBankIdentification',
        'bic' => 'getBic',
        'clearing_number' => 'getClearingNumber',
        'sort_code' => 'getSortCode',
        'account_type' => 'getAccountType',
        'routing_number' => 'getRoutingNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_number', $data ?? [], null);
        $this->setIfExists('bsb_code', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], 'usLocal');
        $this->setIfExists('bank_code', $data ?? [], null);
        $this->setIfExists('branch_number', $data ?? [], null);
        $this->setIfExists('institution_number', $data ?? [], null);
        $this->setIfExists('transit_number', $data ?? [], null);
        $this->setIfExists('iban', $data ?? [], null);
        $this->setIfExists('additional_bank_identification', $data ?? [], null);
        $this->setIfExists('bic', $data ?? [], null);
        $this->setIfExists('clearing_number', $data ?? [], null);
        $this->setIfExists('sort_code', $data ?? [], null);
        $this->setIfExists('account_type', $data ?? [], 'checking');
        $this->setIfExists('routing_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_number'] === null) {
            $invalidProperties[] = "'account_number' can't be null";
        }
        if ($this->container['bsb_code'] === null) {
            $invalidProperties[] = "'bsb_code' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }

        if ($this->container['bank_code'] === null) {
            $invalidProperties[] = "'bank_code' can't be null";
        }
        if ($this->container['branch_number'] === null) {
            $invalidProperties[] = "'branch_number' can't be null";
        }
        if ($this->container['institution_number'] === null) {
            $invalidProperties[] = "'institution_number' can't be null";
        }
        if ($this->container['transit_number'] === null) {
            $invalidProperties[] = "'transit_number' can't be null";
        }
        if ($this->container['iban'] === null) {
            $invalidProperties[] = "'iban' can't be null";
        }
        if ($this->container['bic'] === null) {
            $invalidProperties[] = "'bic' can't be null";
        }
        if ($this->container['clearing_number'] === null) {
            $invalidProperties[] = "'clearing_number' can't be null";
        }
        if ($this->container['sort_code'] === null) {
            $invalidProperties[] = "'sort_code' can't be null";
        }

        if ($this->container['routing_number'] === null) {
            $invalidProperties[] = "'routing_number' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_number
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string $account_number The bank account number, without separators or whitespace.
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        if (is_null($account_number)) {
            throw new \InvalidArgumentException('non-nullable account_number cannot be null');
        }
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets bsb_code
     *
     * @return string
     */
    public function getBsbCode()
    {
        return $this->container['bsb_code'];
    }

    /**
     * Sets bsb_code
     *
     * @param string $bsb_code The 6-digit [Bank State Branch (BSB) code](https://en.wikipedia.org/wiki/Bank_state_branch), without separators or whitespace.
     *
     * @return self
     */
    public function setBsbCode($bsb_code)
    {
        if (is_null($bsb_code)) {
            throw new \InvalidArgumentException('non-nullable bsb_code cannot be null');
        }
        $this->container['bsb_code'] = $bsb_code;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type **usLocal**
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets bank_code
     *
     * @return string
     */
    public function getBankCode()
    {
        return $this->container['bank_code'];
    }

    /**
     * Sets bank_code
     *
     * @param string $bank_code The 4-digit bank code (Registreringsnummer) (without separators or whitespace).
     *
     * @return self
     */
    public function setBankCode($bank_code)
    {
        if (is_null($bank_code)) {
            throw new \InvalidArgumentException('non-nullable bank_code cannot be null');
        }
        $this->container['bank_code'] = $bank_code;

        return $this;
    }

    /**
     * Gets branch_number
     *
     * @return string
     */
    public function getBranchNumber()
    {
        return $this->container['branch_number'];
    }

    /**
     * Sets branch_number
     *
     * @param string $branch_number The bank account branch number (without separators or whitespace).
     *
     * @return self
     */
    public function setBranchNumber($branch_number)
    {
        if (is_null($branch_number)) {
            throw new \InvalidArgumentException('non-nullable branch_number cannot be null');
        }
        $this->container['branch_number'] = $branch_number;

        return $this;
    }

    /**
     * Gets institution_number
     *
     * @return string
     */
    public function getInstitutionNumber()
    {
        return $this->container['institution_number'];
    }

    /**
     * Sets institution_number
     *
     * @param string $institution_number The 3-digit institution number, without separators or whitespace.
     *
     * @return self
     */
    public function setInstitutionNumber($institution_number)
    {
        if (is_null($institution_number)) {
            throw new \InvalidArgumentException('non-nullable institution_number cannot be null');
        }
        $this->container['institution_number'] = $institution_number;

        return $this;
    }

    /**
     * Gets transit_number
     *
     * @return string
     */
    public function getTransitNumber()
    {
        return $this->container['transit_number'];
    }

    /**
     * Sets transit_number
     *
     * @param string $transit_number The 5-digit transit number, without separators or whitespace.
     *
     * @return self
     */
    public function setTransitNumber($transit_number)
    {
        if (is_null($transit_number)) {
            throw new \InvalidArgumentException('non-nullable transit_number cannot be null');
        }
        $this->container['transit_number'] = $transit_number;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string $iban The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.
     *
     * @return self
     */
    public function setIban($iban)
    {
        if (is_null($iban)) {
            throw new \InvalidArgumentException('non-nullable iban cannot be null');
        }
        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets additional_bank_identification
     *
     * @return \Adyen\Model\Transfers\AdditionalBankIdentification|null
     */
    public function getAdditionalBankIdentification()
    {
        return $this->container['additional_bank_identification'];
    }

    /**
     * Sets additional_bank_identification
     *
     * @param \Adyen\Model\Transfers\AdditionalBankIdentification|null $additional_bank_identification additional_bank_identification
     *
     * @return self
     */
    public function setAdditionalBankIdentification($additional_bank_identification)
    {
        if (is_null($additional_bank_identification)) {
            throw new \InvalidArgumentException('non-nullable additional_bank_identification cannot be null');
        }
        $this->container['additional_bank_identification'] = $additional_bank_identification;

        return $this;
    }

    /**
     * Gets bic
     *
     * @return string
     */
    public function getBic()
    {
        return $this->container['bic'];
    }

    /**
     * Sets bic
     *
     * @param string $bic The bank's 8- or 11-character BIC or SWIFT code.
     *
     * @return self
     */
    public function setBic($bic)
    {
        if (is_null($bic)) {
            throw new \InvalidArgumentException('non-nullable bic cannot be null');
        }
        $this->container['bic'] = $bic;

        return $this;
    }

    /**
     * Gets clearing_number
     *
     * @return string
     */
    public function getClearingNumber()
    {
        return $this->container['clearing_number'];
    }

    /**
     * Sets clearing_number
     *
     * @param string $clearing_number The 4- to 5-digit clearing number ([Clearingnummer](https://sv.wikipedia.org/wiki/Clearingnummer)), without separators or whitespace.
     *
     * @return self
     */
    public function setClearingNumber($clearing_number)
    {
        if (is_null($clearing_number)) {
            throw new \InvalidArgumentException('non-nullable clearing_number cannot be null');
        }
        $this->container['clearing_number'] = $clearing_number;

        return $this;
    }

    /**
     * Gets sort_code
     *
     * @return string
     */
    public function getSortCode()
    {
        return $this->container['sort_code'];
    }

    /**
     * Sets sort_code
     *
     * @param string $sort_code The 6-digit [sort code](https://en.wikipedia.org/wiki/Sort_code), without separators or whitespace.
     *
     * @return self
     */
    public function setSortCode($sort_code)
    {
        if (is_null($sort_code)) {
            throw new \InvalidArgumentException('non-nullable sort_code cannot be null');
        }
        $this->container['sort_code'] = $sort_code;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string|null $account_type The bank account type.  Possible values: **checking** or **savings**. Defaults to **checking**.
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        if (is_null($account_type)) {
            throw new \InvalidArgumentException('non-nullable account_type cannot be null');
        }
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets routing_number
     *
     * @return string
     */
    public function getRoutingNumber()
    {
        return $this->container['routing_number'];
    }

    /**
     * Sets routing_number
     *
     * @param string $routing_number The 9-digit [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or whitespace.
     *
     * @return self
     */
    public function setRoutingNumber($routing_number)
    {
        if (is_null($routing_number)) {
            throw new \InvalidArgumentException('non-nullable routing_number cannot be null');
        }
        $this->container['routing_number'] = $routing_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
