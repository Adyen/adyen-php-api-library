<?php

/**
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 70
 * Contact: developer-experience@adyen.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Adyen\Model\Checkout;

use \ArrayAccess;
use \Adyen\Model\Checkout\ObjectSerializer;

/**
 * CreateCheckoutSessionResponse Class Doc Comment
 *
 * @category Class
 * @package  Adyen\Model\Checkout
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateCheckoutSessionResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateCheckoutSessionResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_info' => '\Adyen\Model\Checkout\AccountInfo',
        'additional_amount' => '\Adyen\Model\Checkout\Amount',
        'additional_data' => 'array<string,string>',
        'allowed_payment_methods' => 'string[]',
        'amount' => '\Adyen\Model\Checkout\Amount',
        'application_info' => '\Adyen\Model\Checkout\ApplicationInfo',
        'authentication_data' => '\Adyen\Model\Checkout\AuthenticationData',
        'billing_address' => '\Adyen\Model\Checkout\Address',
        'blocked_payment_methods' => 'string[]',
        'capture_delay_hours' => 'int',
        'channel' => 'string',
        'company' => '\Adyen\Model\Checkout\Company',
        'country_code' => 'string',
        'date_of_birth' => '\DateTime',
        'deliver_at' => '\DateTime',
        'delivery_address' => '\Adyen\Model\Checkout\Address',
        'enable_one_click' => 'bool',
        'enable_pay_out' => 'bool',
        'enable_recurring' => 'bool',
        'expires_at' => '\DateTime',
        'fund_origin' => '\Adyen\Model\Checkout\FundOrigin',
        'fund_recipient' => '\Adyen\Model\Checkout\FundRecipient',
        'id' => 'string',
        'installment_options' => 'array<string,\Adyen\Model\Checkout\CheckoutSessionInstallmentOption>',
        'line_items' => '\Adyen\Model\Checkout\LineItem[]',
        'mandate' => '\Adyen\Model\Checkout\Mandate',
        'mcc' => 'string',
        'merchant_account' => 'string',
        'merchant_order_reference' => 'string',
        'metadata' => 'array<string,string>',
        'mode' => 'string',
        'mpi_data' => '\Adyen\Model\Checkout\ThreeDSecureData',
        'recurring_expiry' => 'string',
        'recurring_frequency' => 'string',
        'recurring_processing_model' => 'string',
        'redirect_from_issuer_method' => 'string',
        'redirect_to_issuer_method' => 'string',
        'reference' => 'string',
        'return_url' => 'string',
        'risk_data' => '\Adyen\Model\Checkout\RiskData',
        'session_data' => 'string',
        'shopper_email' => 'string',
        'shopper_ip' => 'string',
        'shopper_interaction' => 'string',
        'shopper_locale' => 'string',
        'shopper_name' => '\Adyen\Model\Checkout\Name',
        'shopper_reference' => 'string',
        'shopper_statement' => 'string',
        'social_security_number' => 'string',
        'split_card_funding_sources' => 'bool',
        'splits' => '\Adyen\Model\Checkout\Split[]',
        'store' => 'string',
        'store_payment_method' => 'bool',
        'store_payment_method_mode' => 'string',
        'telephone_number' => 'string',
        'three_ds_authentication_only' => 'bool',
        'trusted_shopper' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_info' => null,
        'additional_amount' => null,
        'additional_data' => null,
        'allowed_payment_methods' => null,
        'amount' => null,
        'application_info' => null,
        'authentication_data' => null,
        'billing_address' => null,
        'blocked_payment_methods' => null,
        'capture_delay_hours' => 'int32',
        'channel' => null,
        'company' => null,
        'country_code' => null,
        'date_of_birth' => 'date',
        'deliver_at' => 'date-time',
        'delivery_address' => null,
        'enable_one_click' => null,
        'enable_pay_out' => null,
        'enable_recurring' => null,
        'expires_at' => 'date-time',
        'fund_origin' => null,
        'fund_recipient' => null,
        'id' => null,
        'installment_options' => null,
        'line_items' => null,
        'mandate' => null,
        'mcc' => null,
        'merchant_account' => null,
        'merchant_order_reference' => null,
        'metadata' => null,
        'mode' => null,
        'mpi_data' => null,
        'recurring_expiry' => null,
        'recurring_frequency' => null,
        'recurring_processing_model' => null,
        'redirect_from_issuer_method' => null,
        'redirect_to_issuer_method' => null,
        'reference' => null,
        'return_url' => null,
        'risk_data' => null,
        'session_data' => null,
        'shopper_email' => null,
        'shopper_ip' => null,
        'shopper_interaction' => null,
        'shopper_locale' => null,
        'shopper_name' => null,
        'shopper_reference' => null,
        'shopper_statement' => null,
        'social_security_number' => null,
        'split_card_funding_sources' => null,
        'splits' => null,
        'store' => null,
        'store_payment_method' => null,
        'store_payment_method_mode' => null,
        'telephone_number' => null,
        'three_ds_authentication_only' => null,
        'trusted_shopper' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_info' => false,
        'additional_amount' => false,
        'additional_data' => false,
        'allowed_payment_methods' => false,
        'amount' => false,
        'application_info' => false,
        'authentication_data' => false,
        'billing_address' => false,
        'blocked_payment_methods' => false,
        'capture_delay_hours' => false,
        'channel' => false,
        'company' => false,
        'country_code' => false,
        'date_of_birth' => false,
        'deliver_at' => false,
        'delivery_address' => false,
        'enable_one_click' => false,
        'enable_pay_out' => false,
        'enable_recurring' => false,
        'expires_at' => false,
        'fund_origin' => false,
        'fund_recipient' => false,
        'id' => false,
        'installment_options' => false,
        'line_items' => false,
        'mandate' => false,
        'mcc' => false,
        'merchant_account' => false,
        'merchant_order_reference' => false,
        'metadata' => false,
        'mode' => false,
        'mpi_data' => false,
        'recurring_expiry' => false,
        'recurring_frequency' => false,
        'recurring_processing_model' => false,
        'redirect_from_issuer_method' => false,
        'redirect_to_issuer_method' => false,
        'reference' => false,
        'return_url' => false,
        'risk_data' => false,
        'session_data' => false,
        'shopper_email' => false,
        'shopper_ip' => false,
        'shopper_interaction' => false,
        'shopper_locale' => false,
        'shopper_name' => false,
        'shopper_reference' => false,
        'shopper_statement' => false,
        'social_security_number' => false,
        'split_card_funding_sources' => false,
        'splits' => false,
        'store' => false,
        'store_payment_method' => false,
        'store_payment_method_mode' => false,
        'telephone_number' => false,
        'three_ds_authentication_only' => false,
        'trusted_shopper' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_info' => 'accountInfo',
        'additional_amount' => 'additionalAmount',
        'additional_data' => 'additionalData',
        'allowed_payment_methods' => 'allowedPaymentMethods',
        'amount' => 'amount',
        'application_info' => 'applicationInfo',
        'authentication_data' => 'authenticationData',
        'billing_address' => 'billingAddress',
        'blocked_payment_methods' => 'blockedPaymentMethods',
        'capture_delay_hours' => 'captureDelayHours',
        'channel' => 'channel',
        'company' => 'company',
        'country_code' => 'countryCode',
        'date_of_birth' => 'dateOfBirth',
        'deliver_at' => 'deliverAt',
        'delivery_address' => 'deliveryAddress',
        'enable_one_click' => 'enableOneClick',
        'enable_pay_out' => 'enablePayOut',
        'enable_recurring' => 'enableRecurring',
        'expires_at' => 'expiresAt',
        'fund_origin' => 'fundOrigin',
        'fund_recipient' => 'fundRecipient',
        'id' => 'id',
        'installment_options' => 'installmentOptions',
        'line_items' => 'lineItems',
        'mandate' => 'mandate',
        'mcc' => 'mcc',
        'merchant_account' => 'merchantAccount',
        'merchant_order_reference' => 'merchantOrderReference',
        'metadata' => 'metadata',
        'mode' => 'mode',
        'mpi_data' => 'mpiData',
        'recurring_expiry' => 'recurringExpiry',
        'recurring_frequency' => 'recurringFrequency',
        'recurring_processing_model' => 'recurringProcessingModel',
        'redirect_from_issuer_method' => 'redirectFromIssuerMethod',
        'redirect_to_issuer_method' => 'redirectToIssuerMethod',
        'reference' => 'reference',
        'return_url' => 'returnUrl',
        'risk_data' => 'riskData',
        'session_data' => 'sessionData',
        'shopper_email' => 'shopperEmail',
        'shopper_ip' => 'shopperIP',
        'shopper_interaction' => 'shopperInteraction',
        'shopper_locale' => 'shopperLocale',
        'shopper_name' => 'shopperName',
        'shopper_reference' => 'shopperReference',
        'shopper_statement' => 'shopperStatement',
        'social_security_number' => 'socialSecurityNumber',
        'split_card_funding_sources' => 'splitCardFundingSources',
        'splits' => 'splits',
        'store' => 'store',
        'store_payment_method' => 'storePaymentMethod',
        'store_payment_method_mode' => 'storePaymentMethodMode',
        'telephone_number' => 'telephoneNumber',
        'three_ds_authentication_only' => 'threeDSAuthenticationOnly',
        'trusted_shopper' => 'trustedShopper'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_info' => 'setAccountInfo',
        'additional_amount' => 'setAdditionalAmount',
        'additional_data' => 'setAdditionalData',
        'allowed_payment_methods' => 'setAllowedPaymentMethods',
        'amount' => 'setAmount',
        'application_info' => 'setApplicationInfo',
        'authentication_data' => 'setAuthenticationData',
        'billing_address' => 'setBillingAddress',
        'blocked_payment_methods' => 'setBlockedPaymentMethods',
        'capture_delay_hours' => 'setCaptureDelayHours',
        'channel' => 'setChannel',
        'company' => 'setCompany',
        'country_code' => 'setCountryCode',
        'date_of_birth' => 'setDateOfBirth',
        'deliver_at' => 'setDeliverAt',
        'delivery_address' => 'setDeliveryAddress',
        'enable_one_click' => 'setEnableOneClick',
        'enable_pay_out' => 'setEnablePayOut',
        'enable_recurring' => 'setEnableRecurring',
        'expires_at' => 'setExpiresAt',
        'fund_origin' => 'setFundOrigin',
        'fund_recipient' => 'setFundRecipient',
        'id' => 'setId',
        'installment_options' => 'setInstallmentOptions',
        'line_items' => 'setLineItems',
        'mandate' => 'setMandate',
        'mcc' => 'setMcc',
        'merchant_account' => 'setMerchantAccount',
        'merchant_order_reference' => 'setMerchantOrderReference',
        'metadata' => 'setMetadata',
        'mode' => 'setMode',
        'mpi_data' => 'setMpiData',
        'recurring_expiry' => 'setRecurringExpiry',
        'recurring_frequency' => 'setRecurringFrequency',
        'recurring_processing_model' => 'setRecurringProcessingModel',
        'redirect_from_issuer_method' => 'setRedirectFromIssuerMethod',
        'redirect_to_issuer_method' => 'setRedirectToIssuerMethod',
        'reference' => 'setReference',
        'return_url' => 'setReturnUrl',
        'risk_data' => 'setRiskData',
        'session_data' => 'setSessionData',
        'shopper_email' => 'setShopperEmail',
        'shopper_ip' => 'setShopperIp',
        'shopper_interaction' => 'setShopperInteraction',
        'shopper_locale' => 'setShopperLocale',
        'shopper_name' => 'setShopperName',
        'shopper_reference' => 'setShopperReference',
        'shopper_statement' => 'setShopperStatement',
        'social_security_number' => 'setSocialSecurityNumber',
        'split_card_funding_sources' => 'setSplitCardFundingSources',
        'splits' => 'setSplits',
        'store' => 'setStore',
        'store_payment_method' => 'setStorePaymentMethod',
        'store_payment_method_mode' => 'setStorePaymentMethodMode',
        'telephone_number' => 'setTelephoneNumber',
        'three_ds_authentication_only' => 'setThreeDsAuthenticationOnly',
        'trusted_shopper' => 'setTrustedShopper'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_info' => 'getAccountInfo',
        'additional_amount' => 'getAdditionalAmount',
        'additional_data' => 'getAdditionalData',
        'allowed_payment_methods' => 'getAllowedPaymentMethods',
        'amount' => 'getAmount',
        'application_info' => 'getApplicationInfo',
        'authentication_data' => 'getAuthenticationData',
        'billing_address' => 'getBillingAddress',
        'blocked_payment_methods' => 'getBlockedPaymentMethods',
        'capture_delay_hours' => 'getCaptureDelayHours',
        'channel' => 'getChannel',
        'company' => 'getCompany',
        'country_code' => 'getCountryCode',
        'date_of_birth' => 'getDateOfBirth',
        'deliver_at' => 'getDeliverAt',
        'delivery_address' => 'getDeliveryAddress',
        'enable_one_click' => 'getEnableOneClick',
        'enable_pay_out' => 'getEnablePayOut',
        'enable_recurring' => 'getEnableRecurring',
        'expires_at' => 'getExpiresAt',
        'fund_origin' => 'getFundOrigin',
        'fund_recipient' => 'getFundRecipient',
        'id' => 'getId',
        'installment_options' => 'getInstallmentOptions',
        'line_items' => 'getLineItems',
        'mandate' => 'getMandate',
        'mcc' => 'getMcc',
        'merchant_account' => 'getMerchantAccount',
        'merchant_order_reference' => 'getMerchantOrderReference',
        'metadata' => 'getMetadata',
        'mode' => 'getMode',
        'mpi_data' => 'getMpiData',
        'recurring_expiry' => 'getRecurringExpiry',
        'recurring_frequency' => 'getRecurringFrequency',
        'recurring_processing_model' => 'getRecurringProcessingModel',
        'redirect_from_issuer_method' => 'getRedirectFromIssuerMethod',
        'redirect_to_issuer_method' => 'getRedirectToIssuerMethod',
        'reference' => 'getReference',
        'return_url' => 'getReturnUrl',
        'risk_data' => 'getRiskData',
        'session_data' => 'getSessionData',
        'shopper_email' => 'getShopperEmail',
        'shopper_ip' => 'getShopperIp',
        'shopper_interaction' => 'getShopperInteraction',
        'shopper_locale' => 'getShopperLocale',
        'shopper_name' => 'getShopperName',
        'shopper_reference' => 'getShopperReference',
        'shopper_statement' => 'getShopperStatement',
        'social_security_number' => 'getSocialSecurityNumber',
        'split_card_funding_sources' => 'getSplitCardFundingSources',
        'splits' => 'getSplits',
        'store' => 'getStore',
        'store_payment_method' => 'getStorePaymentMethod',
        'store_payment_method_mode' => 'getStorePaymentMethodMode',
        'telephone_number' => 'getTelephoneNumber',
        'three_ds_authentication_only' => 'getThreeDsAuthenticationOnly',
        'trusted_shopper' => 'getTrustedShopper'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CHANNEL_I_OS = 'iOS';
    public const CHANNEL_ANDROID = 'Android';
    public const CHANNEL_WEB = 'Web';
    public const MODE_EMBEDDED = 'embedded';
    public const MODE_HOSTED = 'hosted';
    public const RECURRING_PROCESSING_MODEL_CARD_ON_FILE = 'CardOnFile';
    public const RECURRING_PROCESSING_MODEL_SUBSCRIPTION = 'Subscription';
    public const RECURRING_PROCESSING_MODEL_UNSCHEDULED_CARD_ON_FILE = 'UnscheduledCardOnFile';
    public const SHOPPER_INTERACTION_ECOMMERCE = 'Ecommerce';
    public const SHOPPER_INTERACTION_CONT_AUTH = 'ContAuth';
    public const SHOPPER_INTERACTION_MOTO = 'Moto';
    public const SHOPPER_INTERACTION_POS = 'POS';
    public const STORE_PAYMENT_METHOD_MODE_ASK_FOR_CONSENT = 'askForConsent';
    public const STORE_PAYMENT_METHOD_MODE_DISABLED = 'disabled';
    public const STORE_PAYMENT_METHOD_MODE_ENABLED = 'enabled';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChannelAllowableValues()
    {
        return [
            self::CHANNEL_I_OS,
            self::CHANNEL_ANDROID,
            self::CHANNEL_WEB,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_EMBEDDED,
            self::MODE_HOSTED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRecurringProcessingModelAllowableValues()
    {
        return [
            self::RECURRING_PROCESSING_MODEL_CARD_ON_FILE,
            self::RECURRING_PROCESSING_MODEL_SUBSCRIPTION,
            self::RECURRING_PROCESSING_MODEL_UNSCHEDULED_CARD_ON_FILE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShopperInteractionAllowableValues()
    {
        return [
            self::SHOPPER_INTERACTION_ECOMMERCE,
            self::SHOPPER_INTERACTION_CONT_AUTH,
            self::SHOPPER_INTERACTION_MOTO,
            self::SHOPPER_INTERACTION_POS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStorePaymentMethodModeAllowableValues()
    {
        return [
            self::STORE_PAYMENT_METHOD_MODE_ASK_FOR_CONSENT,
            self::STORE_PAYMENT_METHOD_MODE_DISABLED,
            self::STORE_PAYMENT_METHOD_MODE_ENABLED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_info', $data ?? [], null);
        $this->setIfExists('additional_amount', $data ?? [], null);
        $this->setIfExists('additional_data', $data ?? [], null);
        $this->setIfExists('allowed_payment_methods', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('application_info', $data ?? [], null);
        $this->setIfExists('authentication_data', $data ?? [], null);
        $this->setIfExists('billing_address', $data ?? [], null);
        $this->setIfExists('blocked_payment_methods', $data ?? [], null);
        $this->setIfExists('capture_delay_hours', $data ?? [], null);
        $this->setIfExists('channel', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('country_code', $data ?? [], null);
        $this->setIfExists('date_of_birth', $data ?? [], null);
        $this->setIfExists('deliver_at', $data ?? [], null);
        $this->setIfExists('delivery_address', $data ?? [], null);
        $this->setIfExists('enable_one_click', $data ?? [], null);
        $this->setIfExists('enable_pay_out', $data ?? [], null);
        $this->setIfExists('enable_recurring', $data ?? [], null);
        $this->setIfExists('expires_at', $data ?? [], null);
        $this->setIfExists('fund_origin', $data ?? [], null);
        $this->setIfExists('fund_recipient', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('installment_options', $data ?? [], null);
        $this->setIfExists('line_items', $data ?? [], null);
        $this->setIfExists('mandate', $data ?? [], null);
        $this->setIfExists('mcc', $data ?? [], null);
        $this->setIfExists('merchant_account', $data ?? [], null);
        $this->setIfExists('merchant_order_reference', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('mode', $data ?? [], 'embedded');
        $this->setIfExists('mpi_data', $data ?? [], null);
        $this->setIfExists('recurring_expiry', $data ?? [], null);
        $this->setIfExists('recurring_frequency', $data ?? [], null);
        $this->setIfExists('recurring_processing_model', $data ?? [], null);
        $this->setIfExists('redirect_from_issuer_method', $data ?? [], null);
        $this->setIfExists('redirect_to_issuer_method', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('return_url', $data ?? [], null);
        $this->setIfExists('risk_data', $data ?? [], null);
        $this->setIfExists('session_data', $data ?? [], null);
        $this->setIfExists('shopper_email', $data ?? [], null);
        $this->setIfExists('shopper_ip', $data ?? [], null);
        $this->setIfExists('shopper_interaction', $data ?? [], null);
        $this->setIfExists('shopper_locale', $data ?? [], null);
        $this->setIfExists('shopper_name', $data ?? [], null);
        $this->setIfExists('shopper_reference', $data ?? [], null);
        $this->setIfExists('shopper_statement', $data ?? [], null);
        $this->setIfExists('social_security_number', $data ?? [], null);
        $this->setIfExists('split_card_funding_sources', $data ?? [], false);
        $this->setIfExists('splits', $data ?? [], null);
        $this->setIfExists('store', $data ?? [], null);
        $this->setIfExists('store_payment_method', $data ?? [], null);
        $this->setIfExists('store_payment_method_mode', $data ?? [], null);
        $this->setIfExists('telephone_number', $data ?? [], null);
        $this->setIfExists('three_ds_authentication_only', $data ?? [], false);
        $this->setIfExists('trusted_shopper', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        $allowedValues = $this->getChannelAllowableValues();
        if (!is_null($this->container['channel']) && !in_array($this->container['channel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'channel', must be one of '%s'",
                $this->container['channel'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['expires_at'] === null) {
            $invalidProperties[] = "'expires_at' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['merchant_account'] === null) {
            $invalidProperties[] = "'merchant_account' can't be null";
        }
        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($this->container['mode']) && !in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mode', must be one of '%s'",
                $this->container['mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRecurringProcessingModelAllowableValues();
        if (!is_null($this->container['recurring_processing_model']) && !in_array($this->container['recurring_processing_model'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'recurring_processing_model', must be one of '%s'",
                $this->container['recurring_processing_model'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['reference'] === null) {
            $invalidProperties[] = "'reference' can't be null";
        }
        if ($this->container['return_url'] === null) {
            $invalidProperties[] = "'return_url' can't be null";
        }
        $allowedValues = $this->getShopperInteractionAllowableValues();
        if (!is_null($this->container['shopper_interaction']) && !in_array($this->container['shopper_interaction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shopper_interaction', must be one of '%s'",
                $this->container['shopper_interaction'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStorePaymentMethodModeAllowableValues();
        if (!is_null($this->container['store_payment_method_mode']) && !in_array($this->container['store_payment_method_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'store_payment_method_mode', must be one of '%s'",
                $this->container['store_payment_method_mode'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_info
     *
     * @return \Adyen\Model\Checkout\AccountInfo|null
     */
    public function getAccountInfo()
    {
        return $this->container['account_info'];
    }

    /**
     * Sets account_info
     *
     * @param \Adyen\Model\Checkout\AccountInfo|null $account_info account_info
     *
     * @return self
     */
    public function setAccountInfo($account_info)
    {
        if (is_null($account_info)) {
            throw new \InvalidArgumentException('non-nullable account_info cannot be null');
        }
        $this->container['account_info'] = $account_info;

        return $this;
    }

    /**
     * Gets additional_amount
     *
     * @return \Adyen\Model\Checkout\Amount|null
     */
    public function getAdditionalAmount()
    {
        return $this->container['additional_amount'];
    }

    /**
     * Sets additional_amount
     *
     * @param \Adyen\Model\Checkout\Amount|null $additional_amount additional_amount
     *
     * @return self
     */
    public function setAdditionalAmount($additional_amount)
    {
        if (is_null($additional_amount)) {
            throw new \InvalidArgumentException('non-nullable additional_amount cannot be null');
        }
        $this->container['additional_amount'] = $additional_amount;

        return $this;
    }

    /**
     * Gets additional_data
     *
     * @return array<string,string>|null
     */
    public function getAdditionalData()
    {
        return $this->container['additional_data'];
    }

    /**
     * Sets additional_data
     *
     * @param array<string,string>|null $additional_data This field contains additional data, which may be required for a particular payment request.  The `additionalData` object consists of entries, each of which includes the key and value.
     *
     * @return self
     */
    public function setAdditionalData($additional_data)
    {
        if (is_null($additional_data)) {
            throw new \InvalidArgumentException('non-nullable additional_data cannot be null');
        }
        $this->container['additional_data'] = $additional_data;

        return $this;
    }

    /**
     * Gets allowed_payment_methods
     *
     * @return string[]|null
     */
    public function getAllowedPaymentMethods()
    {
        return $this->container['allowed_payment_methods'];
    }

    /**
     * Sets allowed_payment_methods
     *
     * @param string[]|null $allowed_payment_methods List of payment methods to be presented to the shopper. To refer to payment methods, use their `paymentMethod.type`from [Payment methods overview](https://docs.adyen.com/payment-methods).  Example: `\"allowedPaymentMethods\":[\"ideal\",\"giropay\"]`
     *
     * @return self
     */
    public function setAllowedPaymentMethods($allowed_payment_methods)
    {
        if (is_null($allowed_payment_methods)) {
            throw new \InvalidArgumentException('non-nullable allowed_payment_methods cannot be null');
        }
        $this->container['allowed_payment_methods'] = $allowed_payment_methods;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \Adyen\Model\Checkout\Amount
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \Adyen\Model\Checkout\Amount $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets application_info
     *
     * @return \Adyen\Model\Checkout\ApplicationInfo|null
     */
    public function getApplicationInfo()
    {
        return $this->container['application_info'];
    }

    /**
     * Sets application_info
     *
     * @param \Adyen\Model\Checkout\ApplicationInfo|null $application_info application_info
     *
     * @return self
     */
    public function setApplicationInfo($application_info)
    {
        if (is_null($application_info)) {
            throw new \InvalidArgumentException('non-nullable application_info cannot be null');
        }
        $this->container['application_info'] = $application_info;

        return $this;
    }

    /**
     * Gets authentication_data
     *
     * @return \Adyen\Model\Checkout\AuthenticationData|null
     */
    public function getAuthenticationData()
    {
        return $this->container['authentication_data'];
    }

    /**
     * Sets authentication_data
     *
     * @param \Adyen\Model\Checkout\AuthenticationData|null $authentication_data authentication_data
     *
     * @return self
     */
    public function setAuthenticationData($authentication_data)
    {
        if (is_null($authentication_data)) {
            throw new \InvalidArgumentException('non-nullable authentication_data cannot be null');
        }
        $this->container['authentication_data'] = $authentication_data;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return \Adyen\Model\Checkout\Address|null
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param \Adyen\Model\Checkout\Address|null $billing_address billing_address
     *
     * @return self
     */
    public function setBillingAddress($billing_address)
    {
        if (is_null($billing_address)) {
            throw new \InvalidArgumentException('non-nullable billing_address cannot be null');
        }
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets blocked_payment_methods
     *
     * @return string[]|null
     */
    public function getBlockedPaymentMethods()
    {
        return $this->container['blocked_payment_methods'];
    }

    /**
     * Sets blocked_payment_methods
     *
     * @param string[]|null $blocked_payment_methods List of payment methods to be hidden from the shopper. To refer to payment methods, use their `paymentMethod.type`from [Payment methods overview](https://docs.adyen.com/payment-methods).  Example: `\"blockedPaymentMethods\":[\"ideal\",\"giropay\"]`
     *
     * @return self
     */
    public function setBlockedPaymentMethods($blocked_payment_methods)
    {
        if (is_null($blocked_payment_methods)) {
            throw new \InvalidArgumentException('non-nullable blocked_payment_methods cannot be null');
        }
        $this->container['blocked_payment_methods'] = $blocked_payment_methods;

        return $this;
    }

    /**
     * Gets capture_delay_hours
     *
     * @return int|null
     */
    public function getCaptureDelayHours()
    {
        return $this->container['capture_delay_hours'];
    }

    /**
     * Sets capture_delay_hours
     *
     * @param int|null $capture_delay_hours The delay between the authorisation and scheduled auto-capture, specified in hours.
     *
     * @return self
     */
    public function setCaptureDelayHours($capture_delay_hours)
    {
        if (is_null($capture_delay_hours)) {
            throw new \InvalidArgumentException('non-nullable capture_delay_hours cannot be null');
        }
        $this->container['capture_delay_hours'] = $capture_delay_hours;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string|null $channel The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the `sdkVersion` or `token`.  Possible values: * **iOS** * **Android** * **Web**
     *
     * @return self
     */
    public function setChannel($channel)
    {
        if (is_null($channel)) {
            throw new \InvalidArgumentException('non-nullable channel cannot be null');
        }
        $allowedValues = $this->getChannelAllowableValues();
        if (!in_array($channel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'channel', must be one of '%s'",
                    $channel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets company
     *
     * @return \Adyen\Model\Checkout\Company|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param \Adyen\Model\Checkout\Company|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code The shopper's two-letter country code.
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        if (is_null($country_code)) {
            throw new \InvalidArgumentException('non-nullable country_code cannot be null');
        }
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return \DateTime|null
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \DateTime|null $date_of_birth The shopper's date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD
     *
     * @return self
     */
    public function setDateOfBirth($date_of_birth)
    {
        if (is_null($date_of_birth)) {
            throw new \InvalidArgumentException('non-nullable date_of_birth cannot be null');
        }
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets deliver_at
     *
     * @return \DateTime|null
     */
    public function getDeliverAt()
    {
        return $this->container['deliver_at'];
    }

    /**
     * Sets deliver_at
     *
     * @param \DateTime|null $deliver_at The date and time when the purchased goods should be delivered.  [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.
     *
     * @return self
     */
    public function setDeliverAt($deliver_at)
    {
        if (is_null($deliver_at)) {
            throw new \InvalidArgumentException('non-nullable deliver_at cannot be null');
        }
        $this->container['deliver_at'] = $deliver_at;

        return $this;
    }

    /**
     * Gets delivery_address
     *
     * @return \Adyen\Model\Checkout\Address|null
     */
    public function getDeliveryAddress()
    {
        return $this->container['delivery_address'];
    }

    /**
     * Sets delivery_address
     *
     * @param \Adyen\Model\Checkout\Address|null $delivery_address delivery_address
     *
     * @return self
     */
    public function setDeliveryAddress($delivery_address)
    {
        if (is_null($delivery_address)) {
            throw new \InvalidArgumentException('non-nullable delivery_address cannot be null');
        }
        $this->container['delivery_address'] = $delivery_address;

        return $this;
    }

    /**
     * Gets enable_one_click
     *
     * @return bool|null
     */
    public function getEnableOneClick()
    {
        return $this->container['enable_one_click'];
    }

    /**
     * Sets enable_one_click
     *
     * @param bool|null $enable_one_click When true and `shopperReference` is provided, the shopper will be asked if the payment details should be stored for future one-click payments.
     *
     * @return self
     */
    public function setEnableOneClick($enable_one_click)
    {
        if (is_null($enable_one_click)) {
            throw new \InvalidArgumentException('non-nullable enable_one_click cannot be null');
        }
        $this->container['enable_one_click'] = $enable_one_click;

        return $this;
    }

    /**
     * Gets enable_pay_out
     *
     * @return bool|null
     */
    public function getEnablePayOut()
    {
        return $this->container['enable_pay_out'];
    }

    /**
     * Sets enable_pay_out
     *
     * @param bool|null $enable_pay_out When true and `shopperReference` is provided, the payment details will be tokenized for payouts.
     *
     * @return self
     */
    public function setEnablePayOut($enable_pay_out)
    {
        if (is_null($enable_pay_out)) {
            throw new \InvalidArgumentException('non-nullable enable_pay_out cannot be null');
        }
        $this->container['enable_pay_out'] = $enable_pay_out;

        return $this;
    }

    /**
     * Gets enable_recurring
     *
     * @return bool|null
     */
    public function getEnableRecurring()
    {
        return $this->container['enable_recurring'];
    }

    /**
     * Sets enable_recurring
     *
     * @param bool|null $enable_recurring When true and `shopperReference` is provided, the payment details will be tokenized for recurring payments.
     *
     * @return self
     */
    public function setEnableRecurring($enable_recurring)
    {
        if (is_null($enable_recurring)) {
            throw new \InvalidArgumentException('non-nullable enable_recurring cannot be null');
        }
        $this->container['enable_recurring'] = $enable_recurring;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return \DateTime
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param \DateTime $expires_at The date the session expires in [ISO8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. When not specified, the expiry date is set to 1 hour after session creation. You cannot set the session expiry to more than 24 hours after session creation.
     *
     * @return self
     */
    public function setExpiresAt($expires_at)
    {
        if (is_null($expires_at)) {
            throw new \InvalidArgumentException('non-nullable expires_at cannot be null');
        }
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets fund_origin
     *
     * @return \Adyen\Model\Checkout\FundOrigin|null
     */
    public function getFundOrigin()
    {
        return $this->container['fund_origin'];
    }

    /**
     * Sets fund_origin
     *
     * @param \Adyen\Model\Checkout\FundOrigin|null $fund_origin fund_origin
     *
     * @return self
     */
    public function setFundOrigin($fund_origin)
    {
        if (is_null($fund_origin)) {
            throw new \InvalidArgumentException('non-nullable fund_origin cannot be null');
        }
        $this->container['fund_origin'] = $fund_origin;

        return $this;
    }

    /**
     * Gets fund_recipient
     *
     * @return \Adyen\Model\Checkout\FundRecipient|null
     */
    public function getFundRecipient()
    {
        return $this->container['fund_recipient'];
    }

    /**
     * Sets fund_recipient
     *
     * @param \Adyen\Model\Checkout\FundRecipient|null $fund_recipient fund_recipient
     *
     * @return self
     */
    public function setFundRecipient($fund_recipient)
    {
        if (is_null($fund_recipient)) {
            throw new \InvalidArgumentException('non-nullable fund_recipient cannot be null');
        }
        $this->container['fund_recipient'] = $fund_recipient;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id A unique identifier of the session.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets installment_options
     *
     * @return array<string,\Adyen\Model\Checkout\CheckoutSessionInstallmentOption>|null
     */
    public function getInstallmentOptions()
    {
        return $this->container['installment_options'];
    }

    /**
     * Sets installment_options
     *
     * @param array<string,\Adyen\Model\Checkout\CheckoutSessionInstallmentOption>|null $installment_options A set of key-value pairs that specifies the installment options available per payment method. The key must be a payment method name in lowercase. For example, **card** to specify installment options for all cards, or **visa** or **mc**. The value must be an object containing the installment options.
     *
     * @return self
     */
    public function setInstallmentOptions($installment_options)
    {
        if (is_null($installment_options)) {
            throw new \InvalidArgumentException('non-nullable installment_options cannot be null');
        }
        $this->container['installment_options'] = $installment_options;

        return $this;
    }

    /**
     * Gets line_items
     *
     * @return \Adyen\Model\Checkout\LineItem[]|null
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param \Adyen\Model\Checkout\LineItem[]|null $line_items Price and product information about the purchased items, to be included on the invoice sent to the shopper. > This field is required for 3x 4x Oney, Affirm, Afterpay, Clearpay, Klarna, Ratepay, and Zip.
     *
     * @return self
     */
    public function setLineItems($line_items)
    {
        if (is_null($line_items)) {
            throw new \InvalidArgumentException('non-nullable line_items cannot be null');
        }
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets mandate
     *
     * @return \Adyen\Model\Checkout\Mandate|null
     */
    public function getMandate()
    {
        return $this->container['mandate'];
    }

    /**
     * Sets mandate
     *
     * @param \Adyen\Model\Checkout\Mandate|null $mandate mandate
     *
     * @return self
     */
    public function setMandate($mandate)
    {
        if (is_null($mandate)) {
            throw new \InvalidArgumentException('non-nullable mandate cannot be null');
        }
        $this->container['mandate'] = $mandate;

        return $this;
    }

    /**
     * Gets mcc
     *
     * @return string|null
     */
    public function getMcc()
    {
        return $this->container['mcc'];
    }

    /**
     * Sets mcc
     *
     * @param string|null $mcc The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.
     *
     * @return self
     */
    public function setMcc($mcc)
    {
        if (is_null($mcc)) {
            throw new \InvalidArgumentException('non-nullable mcc cannot be null');
        }
        $this->container['mcc'] = $mcc;

        return $this;
    }

    /**
     * Gets merchant_account
     *
     * @return string
     */
    public function getMerchantAccount()
    {
        return $this->container['merchant_account'];
    }

    /**
     * Sets merchant_account
     *
     * @param string $merchant_account The merchant account identifier, with which you want to process the transaction.
     *
     * @return self
     */
    public function setMerchantAccount($merchant_account)
    {
        if (is_null($merchant_account)) {
            throw new \InvalidArgumentException('non-nullable merchant_account cannot be null');
        }
        $this->container['merchant_account'] = $merchant_account;

        return $this;
    }

    /**
     * Gets merchant_order_reference
     *
     * @return string|null
     */
    public function getMerchantOrderReference()
    {
        return $this->container['merchant_order_reference'];
    }

    /**
     * Sets merchant_order_reference
     *
     * @param string|null $merchant_order_reference This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle. The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations. > We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.
     *
     * @return self
     */
    public function setMerchantOrderReference($merchant_order_reference)
    {
        if (is_null($merchant_order_reference)) {
            throw new \InvalidArgumentException('non-nullable merchant_order_reference cannot be null');
        }
        $this->container['merchant_order_reference'] = $merchant_order_reference;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,string>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string>|null $metadata Metadata consists of entries, each of which includes a key and a value. Limits: * Maximum 20 key-value pairs per request. * Maximum 20 characters per key. * Maximum 80 characters per value.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode Indicates the type of front end integration. Possible values: * **embedded** (default): Drop-in or Components integration * **hosted**: Hosted Checkout integration
     *
     * @return self
     */
    public function setMode($mode)
    {
        if (is_null($mode)) {
            throw new \InvalidArgumentException('non-nullable mode cannot be null');
        }
        $allowedValues = $this->getModeAllowableValues();
        if (!in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mode', must be one of '%s'",
                    $mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets mpi_data
     *
     * @return \Adyen\Model\Checkout\ThreeDSecureData|null
     */
    public function getMpiData()
    {
        return $this->container['mpi_data'];
    }

    /**
     * Sets mpi_data
     *
     * @param \Adyen\Model\Checkout\ThreeDSecureData|null $mpi_data mpi_data
     *
     * @return self
     */
    public function setMpiData($mpi_data)
    {
        if (is_null($mpi_data)) {
            throw new \InvalidArgumentException('non-nullable mpi_data cannot be null');
        }
        $this->container['mpi_data'] = $mpi_data;

        return $this;
    }

    /**
     * Gets recurring_expiry
     *
     * @return string|null
     */
    public function getRecurringExpiry()
    {
        return $this->container['recurring_expiry'];
    }

    /**
     * Sets recurring_expiry
     *
     * @param string|null $recurring_expiry Date after which no further authorisations shall be performed. Only for 3D Secure 2.
     *
     * @return self
     */
    public function setRecurringExpiry($recurring_expiry)
    {
        if (is_null($recurring_expiry)) {
            throw new \InvalidArgumentException('non-nullable recurring_expiry cannot be null');
        }
        $this->container['recurring_expiry'] = $recurring_expiry;

        return $this;
    }

    /**
     * Gets recurring_frequency
     *
     * @return string|null
     */
    public function getRecurringFrequency()
    {
        return $this->container['recurring_frequency'];
    }

    /**
     * Sets recurring_frequency
     *
     * @param string|null $recurring_frequency Minimum number of days between authorisations. Only for 3D Secure 2.
     *
     * @return self
     */
    public function setRecurringFrequency($recurring_frequency)
    {
        if (is_null($recurring_frequency)) {
            throw new \InvalidArgumentException('non-nullable recurring_frequency cannot be null');
        }
        $this->container['recurring_frequency'] = $recurring_frequency;

        return $this;
    }

    /**
     * Gets recurring_processing_model
     *
     * @return string|null
     */
    public function getRecurringProcessingModel()
    {
        return $this->container['recurring_processing_model'];
    }

    /**
     * Sets recurring_processing_model
     *
     * @param string|null $recurring_processing_model Defines a recurring payment type. Required when creating a token to store payment details. Allowed values: * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule. * `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.
     *
     * @return self
     */
    public function setRecurringProcessingModel($recurring_processing_model)
    {
        if (is_null($recurring_processing_model)) {
            throw new \InvalidArgumentException('non-nullable recurring_processing_model cannot be null');
        }
        $allowedValues = $this->getRecurringProcessingModelAllowableValues();
        if (!in_array($recurring_processing_model, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'recurring_processing_model', must be one of '%s'",
                    $recurring_processing_model,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['recurring_processing_model'] = $recurring_processing_model;

        return $this;
    }

    /**
     * Gets redirect_from_issuer_method
     *
     * @return string|null
     */
    public function getRedirectFromIssuerMethod()
    {
        return $this->container['redirect_from_issuer_method'];
    }

    /**
     * Sets redirect_from_issuer_method
     *
     * @param string|null $redirect_from_issuer_method Specifies the redirect method (GET or POST) when redirecting back from the issuer.
     *
     * @return self
     */
    public function setRedirectFromIssuerMethod($redirect_from_issuer_method)
    {
        if (is_null($redirect_from_issuer_method)) {
            throw new \InvalidArgumentException('non-nullable redirect_from_issuer_method cannot be null');
        }
        $this->container['redirect_from_issuer_method'] = $redirect_from_issuer_method;

        return $this;
    }

    /**
     * Gets redirect_to_issuer_method
     *
     * @return string|null
     */
    public function getRedirectToIssuerMethod()
    {
        return $this->container['redirect_to_issuer_method'];
    }

    /**
     * Sets redirect_to_issuer_method
     *
     * @param string|null $redirect_to_issuer_method Specifies the redirect method (GET or POST) when redirecting to the issuer.
     *
     * @return self
     */
    public function setRedirectToIssuerMethod($redirect_to_issuer_method)
    {
        if (is_null($redirect_to_issuer_method)) {
            throw new \InvalidArgumentException('non-nullable redirect_to_issuer_method cannot be null');
        }
        $this->container['redirect_to_issuer_method'] = $redirect_to_issuer_method;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference The reference to uniquely identify a payment.
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets return_url
     *
     * @return string
     */
    public function getReturnUrl()
    {
        return $this->container['return_url'];
    }

    /**
     * Sets return_url
     *
     * @param string $return_url The URL to return to when a redirect payment is completed.
     *
     * @return self
     */
    public function setReturnUrl($return_url)
    {
        if (is_null($return_url)) {
            throw new \InvalidArgumentException('non-nullable return_url cannot be null');
        }
        $this->container['return_url'] = $return_url;

        return $this;
    }

    /**
     * Gets risk_data
     *
     * @return \Adyen\Model\Checkout\RiskData|null
     */
    public function getRiskData()
    {
        return $this->container['risk_data'];
    }

    /**
     * Sets risk_data
     *
     * @param \Adyen\Model\Checkout\RiskData|null $risk_data risk_data
     *
     * @return self
     */
    public function setRiskData($risk_data)
    {
        if (is_null($risk_data)) {
            throw new \InvalidArgumentException('non-nullable risk_data cannot be null');
        }
        $this->container['risk_data'] = $risk_data;

        return $this;
    }

    /**
     * Gets session_data
     *
     * @return string|null
     */
    public function getSessionData()
    {
        return $this->container['session_data'];
    }

    /**
     * Sets session_data
     *
     * @param string|null $session_data The payment session data you need to pass to your front end.
     *
     * @return self
     */
    public function setSessionData($session_data)
    {
        if (is_null($session_data)) {
            throw new \InvalidArgumentException('non-nullable session_data cannot be null');
        }
        $this->container['session_data'] = $session_data;

        return $this;
    }

    /**
     * Gets shopper_email
     *
     * @return string|null
     */
    public function getShopperEmail()
    {
        return $this->container['shopper_email'];
    }

    /**
     * Sets shopper_email
     *
     * @param string|null $shopper_email The shopper's email address.
     *
     * @return self
     */
    public function setShopperEmail($shopper_email)
    {
        if (is_null($shopper_email)) {
            throw new \InvalidArgumentException('non-nullable shopper_email cannot be null');
        }
        $this->container['shopper_email'] = $shopper_email;

        return $this;
    }

    /**
     * Gets shopper_ip
     *
     * @return string|null
     */
    public function getShopperIp()
    {
        return $this->container['shopper_ip'];
    }

    /**
     * Sets shopper_ip
     *
     * @param string|null $shopper_ip The shopper's IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). > For 3D Secure 2 transactions, schemes require `shopperIP` for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).
     *
     * @return self
     */
    public function setShopperIp($shopper_ip)
    {
        if (is_null($shopper_ip)) {
            throw new \InvalidArgumentException('non-nullable shopper_ip cannot be null');
        }
        $this->container['shopper_ip'] = $shopper_ip;

        return $this;
    }

    /**
     * Gets shopper_interaction
     *
     * @return string|null
     */
    public function getShopperInteraction()
    {
        return $this->container['shopper_interaction'];
    }

    /**
     * Sets shopper_interaction
     *
     * @param string|null $shopper_interaction Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
     *
     * @return self
     */
    public function setShopperInteraction($shopper_interaction)
    {
        if (is_null($shopper_interaction)) {
            throw new \InvalidArgumentException('non-nullable shopper_interaction cannot be null');
        }
        $allowedValues = $this->getShopperInteractionAllowableValues();
        if (!in_array($shopper_interaction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shopper_interaction', must be one of '%s'",
                    $shopper_interaction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shopper_interaction'] = $shopper_interaction;

        return $this;
    }

    /**
     * Gets shopper_locale
     *
     * @return string|null
     */
    public function getShopperLocale()
    {
        return $this->container['shopper_locale'];
    }

    /**
     * Sets shopper_locale
     *
     * @param string|null $shopper_locale The combination of a language code and a country code to specify the language to be used in the payment.
     *
     * @return self
     */
    public function setShopperLocale($shopper_locale)
    {
        if (is_null($shopper_locale)) {
            throw new \InvalidArgumentException('non-nullable shopper_locale cannot be null');
        }
        $this->container['shopper_locale'] = $shopper_locale;

        return $this;
    }

    /**
     * Gets shopper_name
     *
     * @return \Adyen\Model\Checkout\Name|null
     */
    public function getShopperName()
    {
        return $this->container['shopper_name'];
    }

    /**
     * Sets shopper_name
     *
     * @param \Adyen\Model\Checkout\Name|null $shopper_name shopper_name
     *
     * @return self
     */
    public function setShopperName($shopper_name)
    {
        if (is_null($shopper_name)) {
            throw new \InvalidArgumentException('non-nullable shopper_name cannot be null');
        }
        $this->container['shopper_name'] = $shopper_name;

        return $this;
    }

    /**
     * Gets shopper_reference
     *
     * @return string|null
     */
    public function getShopperReference()
    {
        return $this->container['shopper_reference'];
    }

    /**
     * Sets shopper_reference
     *
     * @param string|null $shopper_reference Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.
     *
     * @return self
     */
    public function setShopperReference($shopper_reference)
    {
        if (is_null($shopper_reference)) {
            throw new \InvalidArgumentException('non-nullable shopper_reference cannot be null');
        }
        $this->container['shopper_reference'] = $shopper_reference;

        return $this;
    }

    /**
     * Gets shopper_statement
     *
     * @return string|null
     */
    public function getShopperStatement()
    {
        return $this->container['shopper_statement'];
    }

    /**
     * Sets shopper_statement
     *
     * @param string|null $shopper_statement The text to be shown on the shopper's bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /_**.
     *
     * @return self
     */
    public function setShopperStatement($shopper_statement)
    {
        if (is_null($shopper_statement)) {
            throw new \InvalidArgumentException('non-nullable shopper_statement cannot be null');
        }
        $this->container['shopper_statement'] = $shopper_statement;

        return $this;
    }

    /**
     * Gets social_security_number
     *
     * @return string|null
     */
    public function getSocialSecurityNumber()
    {
        return $this->container['social_security_number'];
    }

    /**
     * Sets social_security_number
     *
     * @param string|null $social_security_number The shopper's social security number.
     *
     * @return self
     */
    public function setSocialSecurityNumber($social_security_number)
    {
        if (is_null($social_security_number)) {
            throw new \InvalidArgumentException('non-nullable social_security_number cannot be null');
        }
        $this->container['social_security_number'] = $social_security_number;

        return $this;
    }

    /**
     * Gets split_card_funding_sources
     *
     * @return bool|null
     */
    public function getSplitCardFundingSources()
    {
        return $this->container['split_card_funding_sources'];
    }

    /**
     * Sets split_card_funding_sources
     *
     * @param bool|null $split_card_funding_sources Boolean value indicating whether the card payment method should be split into separate debit and credit options.
     *
     * @return self
     */
    public function setSplitCardFundingSources($split_card_funding_sources)
    {
        if (is_null($split_card_funding_sources)) {
            throw new \InvalidArgumentException('non-nullable split_card_funding_sources cannot be null');
        }
        $this->container['split_card_funding_sources'] = $split_card_funding_sources;

        return $this;
    }

    /**
     * Gets splits
     *
     * @return \Adyen\Model\Checkout\Split[]|null
     */
    public function getSplits()
    {
        return $this->container['splits'];
    }

    /**
     * Sets splits
     *
     * @param \Adyen\Model\Checkout\Split[]|null $splits An array of objects specifying how the payment should be split when using [Adyen for Platforms](https://docs.adyen.com/platforms/processing-payments#providing-split-information) or [Issuing](https://docs.adyen.com/issuing/manage-funds#split).
     *
     * @return self
     */
    public function setSplits($splits)
    {
        if (is_null($splits)) {
            throw new \InvalidArgumentException('non-nullable splits cannot be null');
        }
        $this->container['splits'] = $splits;

        return $this;
    }

    /**
     * Gets store
     *
     * @return string|null
     */
    public function getStore()
    {
        return $this->container['store'];
    }

    /**
     * Sets store
     *
     * @param string|null $store The ecommerce or point-of-sale store that is processing the payment.
     *
     * @return self
     */
    public function setStore($store)
    {
        if (is_null($store)) {
            throw new \InvalidArgumentException('non-nullable store cannot be null');
        }
        $this->container['store'] = $store;

        return $this;
    }

    /**
     * Gets store_payment_method
     *
     * @return bool|null
     */
    public function getStorePaymentMethod()
    {
        return $this->container['store_payment_method'];
    }

    /**
     * Sets store_payment_method
     *
     * @param bool|null $store_payment_method When this is set to **true** and the `shopperReference` is provided, the payment details will be stored.
     *
     * @return self
     */
    public function setStorePaymentMethod($store_payment_method)
    {
        if (is_null($store_payment_method)) {
            throw new \InvalidArgumentException('non-nullable store_payment_method cannot be null');
        }
        $this->container['store_payment_method'] = $store_payment_method;

        return $this;
    }

    /**
     * Gets store_payment_method_mode
     *
     * @return string|null
     */
    public function getStorePaymentMethodMode()
    {
        return $this->container['store_payment_method_mode'];
    }

    /**
     * Sets store_payment_method_mode
     *
     * @param string|null $store_payment_method_mode Indicates if the details of the payment method will be stored for the shopper. Possible values: * **disabled** – No details will be stored (default). * **askForConsent** – If the `shopperReference` is provided, the UI lets the shopper choose if they want their payment details to be stored. * **enabled** – If the `shopperReference` is provided, the details will be stored without asking the shopper for consent.
     *
     * @return self
     */
    public function setStorePaymentMethodMode($store_payment_method_mode)
    {
        if (is_null($store_payment_method_mode)) {
            throw new \InvalidArgumentException('non-nullable store_payment_method_mode cannot be null');
        }
        $allowedValues = $this->getStorePaymentMethodModeAllowableValues();
        if (!in_array($store_payment_method_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'store_payment_method_mode', must be one of '%s'",
                    $store_payment_method_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['store_payment_method_mode'] = $store_payment_method_mode;

        return $this;
    }

    /**
     * Gets telephone_number
     *
     * @return string|null
     */
    public function getTelephoneNumber()
    {
        return $this->container['telephone_number'];
    }

    /**
     * Sets telephone_number
     *
     * @param string|null $telephone_number The shopper's telephone number.
     *
     * @return self
     */
    public function setTelephoneNumber($telephone_number)
    {
        if (is_null($telephone_number)) {
            throw new \InvalidArgumentException('non-nullable telephone_number cannot be null');
        }
        $this->container['telephone_number'] = $telephone_number;

        return $this;
    }

    /**
     * Gets three_ds_authentication_only
     *
     * @return bool|null
     */
    public function getThreeDsAuthenticationOnly()
    {
        return $this->container['three_ds_authentication_only'];
    }

    /**
     * Sets three_ds_authentication_only
     *
     * @param bool|null $three_ds_authentication_only If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.
     *
     * @return self
     */
    public function setThreeDsAuthenticationOnly($three_ds_authentication_only)
    {
        if (is_null($three_ds_authentication_only)) {
            throw new \InvalidArgumentException('non-nullable three_ds_authentication_only cannot be null');
        }
        $this->container['three_ds_authentication_only'] = $three_ds_authentication_only;

        return $this;
    }

    /**
     * Gets trusted_shopper
     *
     * @return bool|null
     */
    public function getTrustedShopper()
    {
        return $this->container['trusted_shopper'];
    }

    /**
     * Sets trusted_shopper
     *
     * @param bool|null $trusted_shopper Set to true if the payment should be routed to a trusted MID.
     *
     * @return self
     */
    public function setTrustedShopper($trusted_shopper)
    {
        if (is_null($trusted_shopper)) {
            throw new \InvalidArgumentException('non-nullable trusted_shopper cannot be null');
        }
        $this->container['trusted_shopper'] = $trusted_shopper;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
