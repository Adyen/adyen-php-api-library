<?php

/**
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 70
 * Contact: developer-experience@adyen.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Adyen\Model\Checkout;

use \ArrayAccess;
use Adyen\Model\Checkout\ObjectSerializer;

/**
 * AccountInfo Class Doc Comment
 *
 * @category Class
 * @package  Adyen
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_age_indicator' => 'string',
        'account_change_date' => '\DateTime',
        'account_change_indicator' => 'string',
        'account_creation_date' => '\DateTime',
        'account_type' => 'string',
        'add_card_attempts_day' => 'int',
        'delivery_address_usage_date' => '\DateTime',
        'delivery_address_usage_indicator' => 'string',
        'home_phone' => 'string',
        'mobile_phone' => 'string',
        'password_change_date' => '\DateTime',
        'password_change_indicator' => 'string',
        'past_transactions_day' => 'int',
        'past_transactions_year' => 'int',
        'payment_account_age' => '\DateTime',
        'payment_account_indicator' => 'string',
        'purchases_last6_months' => 'int',
        'suspicious_activity' => 'bool',
        'work_phone' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_age_indicator' => null,
        'account_change_date' => 'date-time',
        'account_change_indicator' => null,
        'account_creation_date' => 'date-time',
        'account_type' => null,
        'add_card_attempts_day' => 'int32',
        'delivery_address_usage_date' => 'date-time',
        'delivery_address_usage_indicator' => null,
        'home_phone' => null,
        'mobile_phone' => null,
        'password_change_date' => 'date-time',
        'password_change_indicator' => null,
        'past_transactions_day' => 'int32',
        'past_transactions_year' => 'int32',
        'payment_account_age' => 'date-time',
        'payment_account_indicator' => null,
        'purchases_last6_months' => 'int32',
        'suspicious_activity' => null,
        'work_phone' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'account_age_indicator' => false,
		'account_change_date' => false,
		'account_change_indicator' => false,
		'account_creation_date' => false,
		'account_type' => false,
		'add_card_attempts_day' => true,
		'delivery_address_usage_date' => false,
		'delivery_address_usage_indicator' => false,
		'home_phone' => false,
		'mobile_phone' => false,
		'password_change_date' => false,
		'password_change_indicator' => false,
		'past_transactions_day' => true,
		'past_transactions_year' => true,
		'payment_account_age' => false,
		'payment_account_indicator' => false,
		'purchases_last6_months' => true,
		'suspicious_activity' => false,
		'work_phone' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_age_indicator' => 'accountAgeIndicator',
        'account_change_date' => 'accountChangeDate',
        'account_change_indicator' => 'accountChangeIndicator',
        'account_creation_date' => 'accountCreationDate',
        'account_type' => 'accountType',
        'add_card_attempts_day' => 'addCardAttemptsDay',
        'delivery_address_usage_date' => 'deliveryAddressUsageDate',
        'delivery_address_usage_indicator' => 'deliveryAddressUsageIndicator',
        'home_phone' => 'homePhone',
        'mobile_phone' => 'mobilePhone',
        'password_change_date' => 'passwordChangeDate',
        'password_change_indicator' => 'passwordChangeIndicator',
        'past_transactions_day' => 'pastTransactionsDay',
        'past_transactions_year' => 'pastTransactionsYear',
        'payment_account_age' => 'paymentAccountAge',
        'payment_account_indicator' => 'paymentAccountIndicator',
        'purchases_last6_months' => 'purchasesLast6Months',
        'suspicious_activity' => 'suspiciousActivity',
        'work_phone' => 'workPhone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_age_indicator' => 'setAccountAgeIndicator',
        'account_change_date' => 'setAccountChangeDate',
        'account_change_indicator' => 'setAccountChangeIndicator',
        'account_creation_date' => 'setAccountCreationDate',
        'account_type' => 'setAccountType',
        'add_card_attempts_day' => 'setAddCardAttemptsDay',
        'delivery_address_usage_date' => 'setDeliveryAddressUsageDate',
        'delivery_address_usage_indicator' => 'setDeliveryAddressUsageIndicator',
        'home_phone' => 'setHomePhone',
        'mobile_phone' => 'setMobilePhone',
        'password_change_date' => 'setPasswordChangeDate',
        'password_change_indicator' => 'setPasswordChangeIndicator',
        'past_transactions_day' => 'setPastTransactionsDay',
        'past_transactions_year' => 'setPastTransactionsYear',
        'payment_account_age' => 'setPaymentAccountAge',
        'payment_account_indicator' => 'setPaymentAccountIndicator',
        'purchases_last6_months' => 'setPurchasesLast6Months',
        'suspicious_activity' => 'setSuspiciousActivity',
        'work_phone' => 'setWorkPhone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_age_indicator' => 'getAccountAgeIndicator',
        'account_change_date' => 'getAccountChangeDate',
        'account_change_indicator' => 'getAccountChangeIndicator',
        'account_creation_date' => 'getAccountCreationDate',
        'account_type' => 'getAccountType',
        'add_card_attempts_day' => 'getAddCardAttemptsDay',
        'delivery_address_usage_date' => 'getDeliveryAddressUsageDate',
        'delivery_address_usage_indicator' => 'getDeliveryAddressUsageIndicator',
        'home_phone' => 'getHomePhone',
        'mobile_phone' => 'getMobilePhone',
        'password_change_date' => 'getPasswordChangeDate',
        'password_change_indicator' => 'getPasswordChangeIndicator',
        'past_transactions_day' => 'getPastTransactionsDay',
        'past_transactions_year' => 'getPastTransactionsYear',
        'payment_account_age' => 'getPaymentAccountAge',
        'payment_account_indicator' => 'getPaymentAccountIndicator',
        'purchases_last6_months' => 'getPurchasesLast6Months',
        'suspicious_activity' => 'getSuspiciousActivity',
        'work_phone' => 'getWorkPhone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ACCOUNT_AGE_INDICATOR_NOT_APPLICABLE = 'notApplicable';
    public const ACCOUNT_AGE_INDICATOR_THIS_TRANSACTION = 'thisTransaction';
    public const ACCOUNT_AGE_INDICATOR_LESS_THAN30_DAYS = 'lessThan30Days';
    public const ACCOUNT_AGE_INDICATOR_FROM30_TO60_DAYS = 'from30To60Days';
    public const ACCOUNT_AGE_INDICATOR_MORE_THAN60_DAYS = 'moreThan60Days';
    public const ACCOUNT_CHANGE_INDICATOR_THIS_TRANSACTION = 'thisTransaction';
    public const ACCOUNT_CHANGE_INDICATOR_LESS_THAN30_DAYS = 'lessThan30Days';
    public const ACCOUNT_CHANGE_INDICATOR_FROM30_TO60_DAYS = 'from30To60Days';
    public const ACCOUNT_CHANGE_INDICATOR_MORE_THAN60_DAYS = 'moreThan60Days';
    public const ACCOUNT_TYPE_NOT_APPLICABLE = 'notApplicable';
    public const ACCOUNT_TYPE_CREDIT = 'credit';
    public const ACCOUNT_TYPE_DEBIT = 'debit';
    public const DELIVERY_ADDRESS_USAGE_INDICATOR_THIS_TRANSACTION = 'thisTransaction';
    public const DELIVERY_ADDRESS_USAGE_INDICATOR_LESS_THAN30_DAYS = 'lessThan30Days';
    public const DELIVERY_ADDRESS_USAGE_INDICATOR_FROM30_TO60_DAYS = 'from30To60Days';
    public const DELIVERY_ADDRESS_USAGE_INDICATOR_MORE_THAN60_DAYS = 'moreThan60Days';
    public const PASSWORD_CHANGE_INDICATOR_NOT_APPLICABLE = 'notApplicable';
    public const PASSWORD_CHANGE_INDICATOR_THIS_TRANSACTION = 'thisTransaction';
    public const PASSWORD_CHANGE_INDICATOR_LESS_THAN30_DAYS = 'lessThan30Days';
    public const PASSWORD_CHANGE_INDICATOR_FROM30_TO60_DAYS = 'from30To60Days';
    public const PASSWORD_CHANGE_INDICATOR_MORE_THAN60_DAYS = 'moreThan60Days';
    public const PAYMENT_ACCOUNT_INDICATOR_NOT_APPLICABLE = 'notApplicable';
    public const PAYMENT_ACCOUNT_INDICATOR_THIS_TRANSACTION = 'thisTransaction';
    public const PAYMENT_ACCOUNT_INDICATOR_LESS_THAN30_DAYS = 'lessThan30Days';
    public const PAYMENT_ACCOUNT_INDICATOR_FROM30_TO60_DAYS = 'from30To60Days';
    public const PAYMENT_ACCOUNT_INDICATOR_MORE_THAN60_DAYS = 'moreThan60Days';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountAgeIndicatorAllowableValues()
    {
        return [
            self::ACCOUNT_AGE_INDICATOR_NOT_APPLICABLE,
            self::ACCOUNT_AGE_INDICATOR_THIS_TRANSACTION,
            self::ACCOUNT_AGE_INDICATOR_LESS_THAN30_DAYS,
            self::ACCOUNT_AGE_INDICATOR_FROM30_TO60_DAYS,
            self::ACCOUNT_AGE_INDICATOR_MORE_THAN60_DAYS,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountChangeIndicatorAllowableValues()
    {
        return [
            self::ACCOUNT_CHANGE_INDICATOR_THIS_TRANSACTION,
            self::ACCOUNT_CHANGE_INDICATOR_LESS_THAN30_DAYS,
            self::ACCOUNT_CHANGE_INDICATOR_FROM30_TO60_DAYS,
            self::ACCOUNT_CHANGE_INDICATOR_MORE_THAN60_DAYS,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountTypeAllowableValues()
    {
        return [
            self::ACCOUNT_TYPE_NOT_APPLICABLE,
            self::ACCOUNT_TYPE_CREDIT,
            self::ACCOUNT_TYPE_DEBIT,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryAddressUsageIndicatorAllowableValues()
    {
        return [
            self::DELIVERY_ADDRESS_USAGE_INDICATOR_THIS_TRANSACTION,
            self::DELIVERY_ADDRESS_USAGE_INDICATOR_LESS_THAN30_DAYS,
            self::DELIVERY_ADDRESS_USAGE_INDICATOR_FROM30_TO60_DAYS,
            self::DELIVERY_ADDRESS_USAGE_INDICATOR_MORE_THAN60_DAYS,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPasswordChangeIndicatorAllowableValues()
    {
        return [
            self::PASSWORD_CHANGE_INDICATOR_NOT_APPLICABLE,
            self::PASSWORD_CHANGE_INDICATOR_THIS_TRANSACTION,
            self::PASSWORD_CHANGE_INDICATOR_LESS_THAN30_DAYS,
            self::PASSWORD_CHANGE_INDICATOR_FROM30_TO60_DAYS,
            self::PASSWORD_CHANGE_INDICATOR_MORE_THAN60_DAYS,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentAccountIndicatorAllowableValues()
    {
        return [
            self::PAYMENT_ACCOUNT_INDICATOR_NOT_APPLICABLE,
            self::PAYMENT_ACCOUNT_INDICATOR_THIS_TRANSACTION,
            self::PAYMENT_ACCOUNT_INDICATOR_LESS_THAN30_DAYS,
            self::PAYMENT_ACCOUNT_INDICATOR_FROM30_TO60_DAYS,
            self::PAYMENT_ACCOUNT_INDICATOR_MORE_THAN60_DAYS,
        ];
    }
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_age_indicator', $data ?? [], null);
        $this->setIfExists('account_change_date', $data ?? [], null);
        $this->setIfExists('account_change_indicator', $data ?? [], null);
        $this->setIfExists('account_creation_date', $data ?? [], null);
        $this->setIfExists('account_type', $data ?? [], null);
        $this->setIfExists('add_card_attempts_day', $data ?? [], null);
        $this->setIfExists('delivery_address_usage_date', $data ?? [], null);
        $this->setIfExists('delivery_address_usage_indicator', $data ?? [], null);
        $this->setIfExists('home_phone', $data ?? [], null);
        $this->setIfExists('mobile_phone', $data ?? [], null);
        $this->setIfExists('password_change_date', $data ?? [], null);
        $this->setIfExists('password_change_indicator', $data ?? [], null);
        $this->setIfExists('past_transactions_day', $data ?? [], null);
        $this->setIfExists('past_transactions_year', $data ?? [], null);
        $this->setIfExists('payment_account_age', $data ?? [], null);
        $this->setIfExists('payment_account_indicator', $data ?? [], null);
        $this->setIfExists('purchases_last6_months', $data ?? [], null);
        $this->setIfExists('suspicious_activity', $data ?? [], null);
        $this->setIfExists('work_phone', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAccountAgeIndicatorAllowableValues();
        if (!is_null($this->container['account_age_indicator']) && !in_array($this->container['account_age_indicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'account_age_indicator', must be one of '%s'",
                $this->container['account_age_indicator'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccountChangeIndicatorAllowableValues();
        if (!is_null($this->container['account_change_indicator']) && !in_array($this->container['account_change_indicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'account_change_indicator', must be one of '%s'",
                $this->container['account_change_indicator'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!is_null($this->container['account_type']) && !in_array($this->container['account_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'account_type', must be one of '%s'",
                $this->container['account_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeliveryAddressUsageIndicatorAllowableValues();
        if (!is_null($this->container['delivery_address_usage_indicator']) && !in_array($this->container['delivery_address_usage_indicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'delivery_address_usage_indicator', must be one of '%s'",
                $this->container['delivery_address_usage_indicator'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPasswordChangeIndicatorAllowableValues();
        if (!is_null($this->container['password_change_indicator']) && !in_array($this->container['password_change_indicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'password_change_indicator', must be one of '%s'",
                $this->container['password_change_indicator'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentAccountIndicatorAllowableValues();
        if (!is_null($this->container['payment_account_indicator']) && !in_array($this->container['payment_account_indicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_account_indicator', must be one of '%s'",
                $this->container['payment_account_indicator'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_age_indicator
     *
     * @return string|null
     */
    public function getAccountAgeIndicator()
    {
        return $this->container['account_age_indicator'];
    }

    /**
     * Sets account_age_indicator
     *
     * @param string|null $account_age_indicator Indicator for the length of time since this shopper account was created in the merchant's environment. Allowed values: * notApplicable * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days
     *
     * @return self
     */
    public function setAccountAgeIndicator($account_age_indicator)
    {
        if (is_null($account_age_indicator)) {
            throw new \InvalidArgumentException('non-nullable account_age_indicator cannot be null');
        }
        $allowedValues = $this->getAccountAgeIndicatorAllowableValues();
        if (!in_array($account_age_indicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'account_age_indicator', must be one of '%s'",
                    $account_age_indicator,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_age_indicator'] = $account_age_indicator;

        return $this;
    }

    /**
     * Gets account_change_date
     *
     * @return \DateTime|null
     */
    public function getAccountChangeDate()
    {
        return $this->container['account_change_date'];
    }

    /**
     * Sets account_change_date
     *
     * @param \DateTime|null $account_change_date Date when the shopper's account was last changed.
     *
     * @return self
     */
    public function setAccountChangeDate($account_change_date)
    {
        if (is_null($account_change_date)) {
            throw new \InvalidArgumentException('non-nullable account_change_date cannot be null');
        }
        $this->container['account_change_date'] = $account_change_date;

        return $this;
    }

    /**
     * Gets account_change_indicator
     *
     * @return string|null
     */
    public function getAccountChangeIndicator()
    {
        return $this->container['account_change_indicator'];
    }

    /**
     * Sets account_change_indicator
     *
     * @param string|null $account_change_indicator Indicator for the length of time since the shopper's account was last updated. Allowed values: * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days
     *
     * @return self
     */
    public function setAccountChangeIndicator($account_change_indicator)
    {
        if (is_null($account_change_indicator)) {
            throw new \InvalidArgumentException('non-nullable account_change_indicator cannot be null');
        }
        $allowedValues = $this->getAccountChangeIndicatorAllowableValues();
        if (!in_array($account_change_indicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'account_change_indicator', must be one of '%s'",
                    $account_change_indicator,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_change_indicator'] = $account_change_indicator;

        return $this;
    }

    /**
     * Gets account_creation_date
     *
     * @return \DateTime|null
     */
    public function getAccountCreationDate()
    {
        return $this->container['account_creation_date'];
    }

    /**
     * Sets account_creation_date
     *
     * @param \DateTime|null $account_creation_date Date when the shopper's account was created.
     *
     * @return self
     */
    public function setAccountCreationDate($account_creation_date)
    {
        if (is_null($account_creation_date)) {
            throw new \InvalidArgumentException('non-nullable account_creation_date cannot be null');
        }
        $this->container['account_creation_date'] = $account_creation_date;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string|null $account_type Indicates the type of account. For example, for a multi-account card product. Allowed values: * notApplicable * credit * debit
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        if (is_null($account_type)) {
            throw new \InvalidArgumentException('non-nullable account_type cannot be null');
        }
        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!in_array($account_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'account_type', must be one of '%s'",
                    $account_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets add_card_attempts_day
     *
     * @return int|null
     */
    public function getAddCardAttemptsDay()
    {
        return $this->container['add_card_attempts_day'];
    }

    /**
     * Sets add_card_attempts_day
     *
     * @param int|null $add_card_attempts_day Number of attempts the shopper tried to add a card to their account in the last day.
     *
     * @return self
     */
    public function setAddCardAttemptsDay($add_card_attempts_day)
    {
        // Do nothing for nullable integers
        $this->container['add_card_attempts_day'] = $add_card_attempts_day;

        return $this;
    }

    /**
     * Gets delivery_address_usage_date
     *
     * @return \DateTime|null
     */
    public function getDeliveryAddressUsageDate()
    {
        return $this->container['delivery_address_usage_date'];
    }

    /**
     * Sets delivery_address_usage_date
     *
     * @param \DateTime|null $delivery_address_usage_date Date the selected delivery address was first used.
     *
     * @return self
     */
    public function setDeliveryAddressUsageDate($delivery_address_usage_date)
    {
        if (is_null($delivery_address_usage_date)) {
            throw new \InvalidArgumentException('non-nullable delivery_address_usage_date cannot be null');
        }
        $this->container['delivery_address_usage_date'] = $delivery_address_usage_date;

        return $this;
    }

    /**
     * Gets delivery_address_usage_indicator
     *
     * @return string|null
     */
    public function getDeliveryAddressUsageIndicator()
    {
        return $this->container['delivery_address_usage_indicator'];
    }

    /**
     * Sets delivery_address_usage_indicator
     *
     * @param string|null $delivery_address_usage_indicator Indicator for the length of time since this delivery address was first used. Allowed values: * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days
     *
     * @return self
     */
    public function setDeliveryAddressUsageIndicator($delivery_address_usage_indicator)
    {
        if (is_null($delivery_address_usage_indicator)) {
            throw new \InvalidArgumentException('non-nullable delivery_address_usage_indicator cannot be null');
        }
        $allowedValues = $this->getDeliveryAddressUsageIndicatorAllowableValues();
        if (!in_array($delivery_address_usage_indicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'delivery_address_usage_indicator', must be one of '%s'",
                    $delivery_address_usage_indicator,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_address_usage_indicator'] = $delivery_address_usage_indicator;

        return $this;
    }

    /**
     * Gets home_phone
     *
     * @return string|null
     * @deprecated
     */
    public function getHomePhone()
    {
        return $this->container['home_phone'];
    }

    /**
     * Sets home_phone
     *
     * @param string|null $home_phone Shopper's home phone number (including the country code).
     *
     * @return self
     * @deprecated
     */
    public function setHomePhone($home_phone)
    {
        if (is_null($home_phone)) {
            throw new \InvalidArgumentException('non-nullable home_phone cannot be null');
        }
        $this->container['home_phone'] = $home_phone;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return string|null
     * @deprecated
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param string|null $mobile_phone Shopper's mobile phone number (including the country code).
     *
     * @return self
     * @deprecated
     */
    public function setMobilePhone($mobile_phone)
    {
        if (is_null($mobile_phone)) {
            throw new \InvalidArgumentException('non-nullable mobile_phone cannot be null');
        }
        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets password_change_date
     *
     * @return \DateTime|null
     */
    public function getPasswordChangeDate()
    {
        return $this->container['password_change_date'];
    }

    /**
     * Sets password_change_date
     *
     * @param \DateTime|null $password_change_date Date when the shopper last changed their password.
     *
     * @return self
     */
    public function setPasswordChangeDate($password_change_date)
    {
        if (is_null($password_change_date)) {
            throw new \InvalidArgumentException('non-nullable password_change_date cannot be null');
        }
        $this->container['password_change_date'] = $password_change_date;

        return $this;
    }

    /**
     * Gets password_change_indicator
     *
     * @return string|null
     */
    public function getPasswordChangeIndicator()
    {
        return $this->container['password_change_indicator'];
    }

    /**
     * Sets password_change_indicator
     *
     * @param string|null $password_change_indicator Indicator when the shopper has changed their password. Allowed values: * notApplicable * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days
     *
     * @return self
     */
    public function setPasswordChangeIndicator($password_change_indicator)
    {
        if (is_null($password_change_indicator)) {
            throw new \InvalidArgumentException('non-nullable password_change_indicator cannot be null');
        }
        $allowedValues = $this->getPasswordChangeIndicatorAllowableValues();
        if (!in_array($password_change_indicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'password_change_indicator', must be one of '%s'",
                    $password_change_indicator,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['password_change_indicator'] = $password_change_indicator;

        return $this;
    }

    /**
     * Gets past_transactions_day
     *
     * @return int|null
     */
    public function getPastTransactionsDay()
    {
        return $this->container['past_transactions_day'];
    }

    /**
     * Sets past_transactions_day
     *
     * @param int|null $past_transactions_day Number of all transactions (successful and abandoned) from this shopper in the past 24 hours.
     *
     * @return self
     */
    public function setPastTransactionsDay($past_transactions_day)
    {
        // Do nothing for nullable integers
        $this->container['past_transactions_day'] = $past_transactions_day;

        return $this;
    }

    /**
     * Gets past_transactions_year
     *
     * @return int|null
     */
    public function getPastTransactionsYear()
    {
        return $this->container['past_transactions_year'];
    }

    /**
     * Sets past_transactions_year
     *
     * @param int|null $past_transactions_year Number of all transactions (successful and abandoned) from this shopper in the past year.
     *
     * @return self
     */
    public function setPastTransactionsYear($past_transactions_year)
    {
        // Do nothing for nullable integers
        $this->container['past_transactions_year'] = $past_transactions_year;

        return $this;
    }

    /**
     * Gets payment_account_age
     *
     * @return \DateTime|null
     */
    public function getPaymentAccountAge()
    {
        return $this->container['payment_account_age'];
    }

    /**
     * Sets payment_account_age
     *
     * @param \DateTime|null $payment_account_age Date this payment method was added to the shopper's account.
     *
     * @return self
     */
    public function setPaymentAccountAge($payment_account_age)
    {
        if (is_null($payment_account_age)) {
            throw new \InvalidArgumentException('non-nullable payment_account_age cannot be null');
        }
        $this->container['payment_account_age'] = $payment_account_age;

        return $this;
    }

    /**
     * Gets payment_account_indicator
     *
     * @return string|null
     */
    public function getPaymentAccountIndicator()
    {
        return $this->container['payment_account_indicator'];
    }

    /**
     * Sets payment_account_indicator
     *
     * @param string|null $payment_account_indicator Indicator for the length of time since this payment method was added to this shopper's account. Allowed values: * notApplicable * thisTransaction * lessThan30Days * from30To60Days * moreThan60Days
     *
     * @return self
     */
    public function setPaymentAccountIndicator($payment_account_indicator)
    {
        if (is_null($payment_account_indicator)) {
            throw new \InvalidArgumentException('non-nullable payment_account_indicator cannot be null');
        }
        $allowedValues = $this->getPaymentAccountIndicatorAllowableValues();
        if (!in_array($payment_account_indicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_account_indicator', must be one of '%s'",
                    $payment_account_indicator,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_account_indicator'] = $payment_account_indicator;

        return $this;
    }

    /**
     * Gets purchases_last6_months
     *
     * @return int|null
     */
    public function getPurchasesLast6Months()
    {
        return $this->container['purchases_last6_months'];
    }

    /**
     * Sets purchases_last6_months
     *
     * @param int|null $purchases_last6_months Number of successful purchases in the last six months.
     *
     * @return self
     */
    public function setPurchasesLast6Months($purchases_last6_months)
    {
        // Do nothing for nullable integers
        $this->container['purchases_last6_months'] = $purchases_last6_months;

        return $this;
    }

    /**
     * Gets suspicious_activity
     *
     * @return bool|null
     */
    public function getSuspiciousActivity()
    {
        return $this->container['suspicious_activity'];
    }

    /**
     * Sets suspicious_activity
     *
     * @param bool|null $suspicious_activity Whether suspicious activity was recorded on this account.
     *
     * @return self
     */
    public function setSuspiciousActivity($suspicious_activity)
    {
        if (is_null($suspicious_activity)) {
            throw new \InvalidArgumentException('non-nullable suspicious_activity cannot be null');
        }
        $this->container['suspicious_activity'] = $suspicious_activity;

        return $this;
    }

    /**
     * Gets work_phone
     *
     * @return string|null
     * @deprecated
     */
    public function getWorkPhone()
    {
        return $this->container['work_phone'];
    }

    /**
     * Sets work_phone
     *
     * @param string|null $work_phone Shopper's work phone number (including the country code).
     *
     * @return self
     * @deprecated
     */
    public function setWorkPhone($work_phone)
    {
        if (is_null($work_phone)) {
            throw new \InvalidArgumentException('non-nullable work_phone cannot be null');
        }
        $this->container['work_phone'] = $work_phone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
