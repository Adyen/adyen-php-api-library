<?php

/**
 * Adyen Checkout API
 *
 * The version of the OpenAPI document: 71
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Adyen\Model\Checkout;

use \ArrayAccess;
use Adyen\Model\Checkout\ObjectSerializer;

/**
 * DonationCampaign Class Doc Comment
 *
 * @category Class
 * @package  Adyen
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DonationCampaign implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DonationCampaign';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amounts' => '\Adyen\Model\Checkout\Amounts',
        'bannerUrl' => 'string',
        'campaignName' => 'string',
        'causeName' => 'string',
        'donation' => '\Adyen\Model\Checkout\Donation',
        'id' => 'string',
        'logoUrl' => 'string',
        'nonprofitDescription' => 'string',
        'nonprofitName' => 'string',
        'nonprofitUrl' => 'string',
        'termsAndConditionsUrl' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amounts' => null,
        'bannerUrl' => null,
        'campaignName' => null,
        'causeName' => null,
        'donation' => null,
        'id' => null,
        'logoUrl' => null,
        'nonprofitDescription' => null,
        'nonprofitName' => null,
        'nonprofitUrl' => null,
        'termsAndConditionsUrl' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'amounts' => false,
        'bannerUrl' => false,
        'campaignName' => false,
        'causeName' => false,
        'donation' => false,
        'id' => false,
        'logoUrl' => false,
        'nonprofitDescription' => false,
        'nonprofitName' => false,
        'nonprofitUrl' => false,
        'termsAndConditionsUrl' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amounts' => 'amounts',
        'bannerUrl' => 'bannerUrl',
        'campaignName' => 'campaignName',
        'causeName' => 'causeName',
        'donation' => 'donation',
        'id' => 'id',
        'logoUrl' => 'logoUrl',
        'nonprofitDescription' => 'nonprofitDescription',
        'nonprofitName' => 'nonprofitName',
        'nonprofitUrl' => 'nonprofitUrl',
        'termsAndConditionsUrl' => 'termsAndConditionsUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amounts' => 'setAmounts',
        'bannerUrl' => 'setBannerUrl',
        'campaignName' => 'setCampaignName',
        'causeName' => 'setCauseName',
        'donation' => 'setDonation',
        'id' => 'setId',
        'logoUrl' => 'setLogoUrl',
        'nonprofitDescription' => 'setNonprofitDescription',
        'nonprofitName' => 'setNonprofitName',
        'nonprofitUrl' => 'setNonprofitUrl',
        'termsAndConditionsUrl' => 'setTermsAndConditionsUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amounts' => 'getAmounts',
        'bannerUrl' => 'getBannerUrl',
        'campaignName' => 'getCampaignName',
        'causeName' => 'getCauseName',
        'donation' => 'getDonation',
        'id' => 'getId',
        'logoUrl' => 'getLogoUrl',
        'nonprofitDescription' => 'getNonprofitDescription',
        'nonprofitName' => 'getNonprofitName',
        'nonprofitUrl' => 'getNonprofitUrl',
        'termsAndConditionsUrl' => 'getTermsAndConditionsUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('amounts', $data ?? [], null);
        $this->setIfExists('bannerUrl', $data ?? [], null);
        $this->setIfExists('campaignName', $data ?? [], null);
        $this->setIfExists('causeName', $data ?? [], null);
        $this->setIfExists('donation', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('logoUrl', $data ?? [], null);
        $this->setIfExists('nonprofitDescription', $data ?? [], null);
        $this->setIfExists('nonprofitName', $data ?? [], null);
        $this->setIfExists('nonprofitUrl', $data ?? [], null);
        $this->setIfExists('termsAndConditionsUrl', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amounts
     *
     * @return \Adyen\Model\Checkout\Amounts|null
     */
    public function getAmounts()
    {
        return $this->container['amounts'];
    }

    /**
     * Sets amounts
     *
     * @param \Adyen\Model\Checkout\Amounts|null $amounts amounts
     *
     * @return self
     */
    public function setAmounts($amounts)
    {
        $this->container['amounts'] = $amounts;

        return $this;
    }

    /**
     * Gets bannerUrl
     *
     * @return string|null
     */
    public function getBannerUrl()
    {
        return $this->container['bannerUrl'];
    }

    /**
     * Sets bannerUrl
     *
     * @param string|null $bannerUrl The URL for the banner of the nonprofit or campaign.
     *
     * @return self
     */
    public function setBannerUrl($bannerUrl)
    {
        $this->container['bannerUrl'] = $bannerUrl;

        return $this;
    }

    /**
     * Gets campaignName
     *
     * @return string|null
     */
    public function getCampaignName()
    {
        return $this->container['campaignName'];
    }

    /**
     * Sets campaignName
     *
     * @param string|null $campaignName The name of the donation campaign..
     *
     * @return self
     */
    public function setCampaignName($campaignName)
    {
        $this->container['campaignName'] = $campaignName;

        return $this;
    }

    /**
     * Gets causeName
     *
     * @return string|null
     */
    public function getCauseName()
    {
        return $this->container['causeName'];
    }

    /**
     * Sets causeName
     *
     * @param string|null $causeName The cause of the nonprofit.
     *
     * @return self
     */
    public function setCauseName($causeName)
    {
        $this->container['causeName'] = $causeName;

        return $this;
    }

    /**
     * Gets donation
     *
     * @return \Adyen\Model\Checkout\Donation|null
     */
    public function getDonation()
    {
        return $this->container['donation'];
    }

    /**
     * Sets donation
     *
     * @param \Adyen\Model\Checkout\Donation|null $donation donation
     *
     * @return self
     */
    public function setDonation($donation)
    {
        $this->container['donation'] = $donation;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique campaign ID of the donation campaign.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets logoUrl
     *
     * @return string|null
     */
    public function getLogoUrl()
    {
        return $this->container['logoUrl'];
    }

    /**
     * Sets logoUrl
     *
     * @param string|null $logoUrl The URL for the logo of the nonprofit.
     *
     * @return self
     */
    public function setLogoUrl($logoUrl)
    {
        $this->container['logoUrl'] = $logoUrl;

        return $this;
    }

    /**
     * Gets nonprofitDescription
     *
     * @return string|null
     */
    public function getNonprofitDescription()
    {
        return $this->container['nonprofitDescription'];
    }

    /**
     * Sets nonprofitDescription
     *
     * @param string|null $nonprofitDescription The description of the nonprofit.
     *
     * @return self
     */
    public function setNonprofitDescription($nonprofitDescription)
    {
        $this->container['nonprofitDescription'] = $nonprofitDescription;

        return $this;
    }

    /**
     * Gets nonprofitName
     *
     * @return string|null
     */
    public function getNonprofitName()
    {
        return $this->container['nonprofitName'];
    }

    /**
     * Sets nonprofitName
     *
     * @param string|null $nonprofitName The name of the nonprofit organization that receives the donation.
     *
     * @return self
     */
    public function setNonprofitName($nonprofitName)
    {
        $this->container['nonprofitName'] = $nonprofitName;

        return $this;
    }

    /**
     * Gets nonprofitUrl
     *
     * @return string|null
     */
    public function getNonprofitUrl()
    {
        return $this->container['nonprofitUrl'];
    }

    /**
     * Sets nonprofitUrl
     *
     * @param string|null $nonprofitUrl The website URL of the nonprofit.
     *
     * @return self
     */
    public function setNonprofitUrl($nonprofitUrl)
    {
        $this->container['nonprofitUrl'] = $nonprofitUrl;

        return $this;
    }

    /**
     * Gets termsAndConditionsUrl
     *
     * @return string|null
     */
    public function getTermsAndConditionsUrl()
    {
        return $this->container['termsAndConditionsUrl'];
    }

    /**
     * Sets termsAndConditionsUrl
     *
     * @param string|null $termsAndConditionsUrl The URL of the terms and conditions page of the nonprofit and the campaign.
     *
     * @return self
     */
    public function setTermsAndConditionsUrl($termsAndConditionsUrl)
    {
        $this->container['termsAndConditionsUrl'] = $termsAndConditionsUrl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    public function toArray(): array
    {
        $array = [];
        foreach (self::$openAPITypes as $propertyName => $propertyType) {
            $propertyValue = $this[$propertyName];
            if ($propertyValue !== null) {
                // Check if the property value is an object and has a toArray() method
                if (is_object($propertyValue) && method_exists($propertyValue, 'toArray')) {
                    $array[$propertyName] = $propertyValue->toArray();
                // Check if it's type datetime
                } elseif ($propertyValue instanceof \DateTime) {
                    $array[$propertyName] = $propertyValue->format(DATE_ATOM);
                // If it's an array type we should check whether it contains objects and if so call toArray method
                } elseif (is_array($propertyValue)) {
                    $array[$propertyName] = array_map(function ($item) {
                        return $item instanceof ModelInterface ? $item->toArray() : $item;
                    }, $propertyValue);
                } else {
                    // Otherwise, directly assign the property value to the array
                    $array[$propertyName] = $propertyValue;
                }
            }
        }
        return $array;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
