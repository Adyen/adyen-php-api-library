<?php

/**
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 70
 * Contact: developer-experience@adyen.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Adyen\Model\Checkout;

use \ArrayAccess;
use Adyen\Model\Checkout\ObjectSerializer;

/**
 * AdditionalDataAirline Class Doc Comment
 *
 * @category Class
 * @package  Adyen
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AdditionalDataAirline implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AdditionalDataAirline';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'airline_agency_invoice_number' => 'string',
        'airline_agency_plan_name' => 'string',
        'airline_airline_code' => 'string',
        'airline_airline_designator_code' => 'string',
        'airline_boarding_fee' => 'string',
        'airline_computerized_reservation_system' => 'string',
        'airline_customer_reference_number' => 'string',
        'airline_document_type' => 'string',
        'airline_flight_date' => 'string',
        'airline_leg_carrier_code' => 'string',
        'airline_leg_class_of_travel' => 'string',
        'airline_leg_date_of_travel' => 'string',
        'airline_leg_depart_airport' => 'string',
        'airline_leg_depart_tax' => 'string',
        'airline_leg_destination_code' => 'string',
        'airline_leg_fare_base_code' => 'string',
        'airline_leg_flight_number' => 'string',
        'airline_leg_stop_over_code' => 'string',
        'airline_passenger_date_of_birth' => 'string',
        'airline_passenger_first_name' => 'string',
        'airline_passenger_last_name' => 'string',
        'airline_passenger_telephone_number' => 'string',
        'airline_passenger_traveller_type' => 'string',
        'airline_passenger_name' => 'string',
        'airline_ticket_issue_address' => 'string',
        'airline_ticket_number' => 'string',
        'airline_travel_agency_code' => 'string',
        'airline_travel_agency_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'airline_agency_invoice_number' => null,
        'airline_agency_plan_name' => null,
        'airline_airline_code' => null,
        'airline_airline_designator_code' => null,
        'airline_boarding_fee' => null,
        'airline_computerized_reservation_system' => null,
        'airline_customer_reference_number' => null,
        'airline_document_type' => null,
        'airline_flight_date' => null,
        'airline_leg_carrier_code' => null,
        'airline_leg_class_of_travel' => null,
        'airline_leg_date_of_travel' => null,
        'airline_leg_depart_airport' => null,
        'airline_leg_depart_tax' => null,
        'airline_leg_destination_code' => null,
        'airline_leg_fare_base_code' => null,
        'airline_leg_flight_number' => null,
        'airline_leg_stop_over_code' => null,
        'airline_passenger_date_of_birth' => null,
        'airline_passenger_first_name' => null,
        'airline_passenger_last_name' => null,
        'airline_passenger_telephone_number' => null,
        'airline_passenger_traveller_type' => null,
        'airline_passenger_name' => null,
        'airline_ticket_issue_address' => null,
        'airline_ticket_number' => null,
        'airline_travel_agency_code' => null,
        'airline_travel_agency_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'airline_agency_invoice_number' => false,
        'airline_agency_plan_name' => false,
        'airline_airline_code' => false,
        'airline_airline_designator_code' => false,
        'airline_boarding_fee' => false,
        'airline_computerized_reservation_system' => false,
        'airline_customer_reference_number' => false,
        'airline_document_type' => false,
        'airline_flight_date' => false,
        'airline_leg_carrier_code' => false,
        'airline_leg_class_of_travel' => false,
        'airline_leg_date_of_travel' => false,
        'airline_leg_depart_airport' => false,
        'airline_leg_depart_tax' => false,
        'airline_leg_destination_code' => false,
        'airline_leg_fare_base_code' => false,
        'airline_leg_flight_number' => false,
        'airline_leg_stop_over_code' => false,
        'airline_passenger_date_of_birth' => false,
        'airline_passenger_first_name' => false,
        'airline_passenger_last_name' => false,
        'airline_passenger_telephone_number' => false,
        'airline_passenger_traveller_type' => false,
        'airline_passenger_name' => false,
        'airline_ticket_issue_address' => false,
        'airline_ticket_number' => false,
        'airline_travel_agency_code' => false,
        'airline_travel_agency_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'airline_agency_invoice_number' => 'airline.agency_invoice_number',
        'airline_agency_plan_name' => 'airline.agency_plan_name',
        'airline_airline_code' => 'airline.airline_code',
        'airline_airline_designator_code' => 'airline.airline_designator_code',
        'airline_boarding_fee' => 'airline.boarding_fee',
        'airline_computerized_reservation_system' => 'airline.computerized_reservation_system',
        'airline_customer_reference_number' => 'airline.customer_reference_number',
        'airline_document_type' => 'airline.document_type',
        'airline_flight_date' => 'airline.flight_date',
        'airline_leg_carrier_code' => 'airline.leg.carrier_code',
        'airline_leg_class_of_travel' => 'airline.leg.class_of_travel',
        'airline_leg_date_of_travel' => 'airline.leg.date_of_travel',
        'airline_leg_depart_airport' => 'airline.leg.depart_airport',
        'airline_leg_depart_tax' => 'airline.leg.depart_tax',
        'airline_leg_destination_code' => 'airline.leg.destination_code',
        'airline_leg_fare_base_code' => 'airline.leg.fare_base_code',
        'airline_leg_flight_number' => 'airline.leg.flight_number',
        'airline_leg_stop_over_code' => 'airline.leg.stop_over_code',
        'airline_passenger_date_of_birth' => 'airline.passenger.date_of_birth',
        'airline_passenger_first_name' => 'airline.passenger.first_name',
        'airline_passenger_last_name' => 'airline.passenger.last_name',
        'airline_passenger_telephone_number' => 'airline.passenger.telephone_number',
        'airline_passenger_traveller_type' => 'airline.passenger.traveller_type',
        'airline_passenger_name' => 'airline.passenger_name',
        'airline_ticket_issue_address' => 'airline.ticket_issue_address',
        'airline_ticket_number' => 'airline.ticket_number',
        'airline_travel_agency_code' => 'airline.travel_agency_code',
        'airline_travel_agency_name' => 'airline.travel_agency_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'airline_agency_invoice_number' => 'setAirlineAgencyInvoiceNumber',
        'airline_agency_plan_name' => 'setAirlineAgencyPlanName',
        'airline_airline_code' => 'setAirlineAirlineCode',
        'airline_airline_designator_code' => 'setAirlineAirlineDesignatorCode',
        'airline_boarding_fee' => 'setAirlineBoardingFee',
        'airline_computerized_reservation_system' => 'setAirlineComputerizedReservationSystem',
        'airline_customer_reference_number' => 'setAirlineCustomerReferenceNumber',
        'airline_document_type' => 'setAirlineDocumentType',
        'airline_flight_date' => 'setAirlineFlightDate',
        'airline_leg_carrier_code' => 'setAirlineLegCarrierCode',
        'airline_leg_class_of_travel' => 'setAirlineLegClassOfTravel',
        'airline_leg_date_of_travel' => 'setAirlineLegDateOfTravel',
        'airline_leg_depart_airport' => 'setAirlineLegDepartAirport',
        'airline_leg_depart_tax' => 'setAirlineLegDepartTax',
        'airline_leg_destination_code' => 'setAirlineLegDestinationCode',
        'airline_leg_fare_base_code' => 'setAirlineLegFareBaseCode',
        'airline_leg_flight_number' => 'setAirlineLegFlightNumber',
        'airline_leg_stop_over_code' => 'setAirlineLegStopOverCode',
        'airline_passenger_date_of_birth' => 'setAirlinePassengerDateOfBirth',
        'airline_passenger_first_name' => 'setAirlinePassengerFirstName',
        'airline_passenger_last_name' => 'setAirlinePassengerLastName',
        'airline_passenger_telephone_number' => 'setAirlinePassengerTelephoneNumber',
        'airline_passenger_traveller_type' => 'setAirlinePassengerTravellerType',
        'airline_passenger_name' => 'setAirlinePassengerName',
        'airline_ticket_issue_address' => 'setAirlineTicketIssueAddress',
        'airline_ticket_number' => 'setAirlineTicketNumber',
        'airline_travel_agency_code' => 'setAirlineTravelAgencyCode',
        'airline_travel_agency_name' => 'setAirlineTravelAgencyName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'airline_agency_invoice_number' => 'getAirlineAgencyInvoiceNumber',
        'airline_agency_plan_name' => 'getAirlineAgencyPlanName',
        'airline_airline_code' => 'getAirlineAirlineCode',
        'airline_airline_designator_code' => 'getAirlineAirlineDesignatorCode',
        'airline_boarding_fee' => 'getAirlineBoardingFee',
        'airline_computerized_reservation_system' => 'getAirlineComputerizedReservationSystem',
        'airline_customer_reference_number' => 'getAirlineCustomerReferenceNumber',
        'airline_document_type' => 'getAirlineDocumentType',
        'airline_flight_date' => 'getAirlineFlightDate',
        'airline_leg_carrier_code' => 'getAirlineLegCarrierCode',
        'airline_leg_class_of_travel' => 'getAirlineLegClassOfTravel',
        'airline_leg_date_of_travel' => 'getAirlineLegDateOfTravel',
        'airline_leg_depart_airport' => 'getAirlineLegDepartAirport',
        'airline_leg_depart_tax' => 'getAirlineLegDepartTax',
        'airline_leg_destination_code' => 'getAirlineLegDestinationCode',
        'airline_leg_fare_base_code' => 'getAirlineLegFareBaseCode',
        'airline_leg_flight_number' => 'getAirlineLegFlightNumber',
        'airline_leg_stop_over_code' => 'getAirlineLegStopOverCode',
        'airline_passenger_date_of_birth' => 'getAirlinePassengerDateOfBirth',
        'airline_passenger_first_name' => 'getAirlinePassengerFirstName',
        'airline_passenger_last_name' => 'getAirlinePassengerLastName',
        'airline_passenger_telephone_number' => 'getAirlinePassengerTelephoneNumber',
        'airline_passenger_traveller_type' => 'getAirlinePassengerTravellerType',
        'airline_passenger_name' => 'getAirlinePassengerName',
        'airline_ticket_issue_address' => 'getAirlineTicketIssueAddress',
        'airline_ticket_number' => 'getAirlineTicketNumber',
        'airline_travel_agency_code' => 'getAirlineTravelAgencyCode',
        'airline_travel_agency_name' => 'getAirlineTravelAgencyName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('airline_agency_invoice_number', $data ?? [], null);
        $this->setIfExists('airline_agency_plan_name', $data ?? [], null);
        $this->setIfExists('airline_airline_code', $data ?? [], null);
        $this->setIfExists('airline_airline_designator_code', $data ?? [], null);
        $this->setIfExists('airline_boarding_fee', $data ?? [], null);
        $this->setIfExists('airline_computerized_reservation_system', $data ?? [], null);
        $this->setIfExists('airline_customer_reference_number', $data ?? [], null);
        $this->setIfExists('airline_document_type', $data ?? [], null);
        $this->setIfExists('airline_flight_date', $data ?? [], null);
        $this->setIfExists('airline_leg_carrier_code', $data ?? [], null);
        $this->setIfExists('airline_leg_class_of_travel', $data ?? [], null);
        $this->setIfExists('airline_leg_date_of_travel', $data ?? [], null);
        $this->setIfExists('airline_leg_depart_airport', $data ?? [], null);
        $this->setIfExists('airline_leg_depart_tax', $data ?? [], null);
        $this->setIfExists('airline_leg_destination_code', $data ?? [], null);
        $this->setIfExists('airline_leg_fare_base_code', $data ?? [], null);
        $this->setIfExists('airline_leg_flight_number', $data ?? [], null);
        $this->setIfExists('airline_leg_stop_over_code', $data ?? [], null);
        $this->setIfExists('airline_passenger_date_of_birth', $data ?? [], null);
        $this->setIfExists('airline_passenger_first_name', $data ?? [], null);
        $this->setIfExists('airline_passenger_last_name', $data ?? [], null);
        $this->setIfExists('airline_passenger_telephone_number', $data ?? [], null);
        $this->setIfExists('airline_passenger_traveller_type', $data ?? [], null);
        $this->setIfExists('airline_passenger_name', $data ?? [], null);
        $this->setIfExists('airline_ticket_issue_address', $data ?? [], null);
        $this->setIfExists('airline_ticket_number', $data ?? [], null);
        $this->setIfExists('airline_travel_agency_code', $data ?? [], null);
        $this->setIfExists('airline_travel_agency_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['airline_passenger_name'] === null) {
            $invalidProperties[] = "'airline_passenger_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets airline_agency_invoice_number
     *
     * @return string|null
     */
    public function getAirlineAgencyInvoiceNumber()
    {
        return $this->container['airline_agency_invoice_number'];
    }

    /**
     * Sets airline_agency_invoice_number
     *
     * @param string|null $airline_agency_invoice_number Reference number for the invoice, issued by the agency. * minLength: 1 * maxLength: 6
     *
     * @return self
     */
    public function setAirlineAgencyInvoiceNumber($airline_agency_invoice_number)
    {
        if (is_null($airline_agency_invoice_number)) {
            throw new \InvalidArgumentException('non-nullable airline_agency_invoice_number cannot be null');
        }
        $this->container['airline_agency_invoice_number'] = $airline_agency_invoice_number;

        return $this;
    }

    /**
     * Gets airline_agency_plan_name
     *
     * @return string|null
     */
    public function getAirlineAgencyPlanName()
    {
        return $this->container['airline_agency_plan_name'];
    }

    /**
     * Sets airline_agency_plan_name
     *
     * @param string|null $airline_agency_plan_name 2-letter agency plan identifier; alphabetical. * minLength: 2 * maxLength: 2
     *
     * @return self
     */
    public function setAirlineAgencyPlanName($airline_agency_plan_name)
    {
        if (is_null($airline_agency_plan_name)) {
            throw new \InvalidArgumentException('non-nullable airline_agency_plan_name cannot be null');
        }
        $this->container['airline_agency_plan_name'] = $airline_agency_plan_name;

        return $this;
    }

    /**
     * Gets airline_airline_code
     *
     * @return string|null
     */
    public function getAirlineAirlineCode()
    {
        return $this->container['airline_airline_code'];
    }

    /**
     * Sets airline_airline_code
     *
     * @param string|null $airline_airline_code [IATA](https://www.iata.org/services/pages/codes.aspx) 3-digit accounting code (PAX); numeric. It identifies the carrier. * Format: IATA 3-digit accounting code (PAX) * Example: KLM = 074 * minLength: 3 * maxLength: 3
     *
     * @return self
     */
    public function setAirlineAirlineCode($airline_airline_code)
    {
        if (is_null($airline_airline_code)) {
            throw new \InvalidArgumentException('non-nullable airline_airline_code cannot be null');
        }
        $this->container['airline_airline_code'] = $airline_airline_code;

        return $this;
    }

    /**
     * Gets airline_airline_designator_code
     *
     * @return string|null
     */
    public function getAirlineAirlineDesignatorCode()
    {
        return $this->container['airline_airline_designator_code'];
    }

    /**
     * Sets airline_airline_designator_code
     *
     * @param string|null $airline_airline_designator_code [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX); alphabetical. It identifies the carrier. * Format: [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter airline code * Example: KLM = KL * minLength: 2 * maxLength: 2
     *
     * @return self
     */
    public function setAirlineAirlineDesignatorCode($airline_airline_designator_code)
    {
        if (is_null($airline_airline_designator_code)) {
            throw new \InvalidArgumentException('non-nullable airline_airline_designator_code cannot be null');
        }
        $this->container['airline_airline_designator_code'] = $airline_airline_designator_code;

        return $this;
    }

    /**
     * Gets airline_boarding_fee
     *
     * @return string|null
     */
    public function getAirlineBoardingFee()
    {
        return $this->container['airline_boarding_fee'];
    }

    /**
     * Sets airline_boarding_fee
     *
     * @param string|null $airline_boarding_fee Chargeable amount for boarding the plane. The transaction amount needs to be represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes). * minLength: 1 * maxLength: 18
     *
     * @return self
     */
    public function setAirlineBoardingFee($airline_boarding_fee)
    {
        if (is_null($airline_boarding_fee)) {
            throw new \InvalidArgumentException('non-nullable airline_boarding_fee cannot be null');
        }
        $this->container['airline_boarding_fee'] = $airline_boarding_fee;

        return $this;
    }

    /**
     * Gets airline_computerized_reservation_system
     *
     * @return string|null
     */
    public function getAirlineComputerizedReservationSystem()
    {
        return $this->container['airline_computerized_reservation_system'];
    }

    /**
     * Sets airline_computerized_reservation_system
     *
     * @param string|null $airline_computerized_reservation_system The [CRS](https://en.wikipedia.org/wiki/Computer_reservation_system) used to make the reservation and purchase the ticket. * Format: alphanumeric. * minLength: 4 * maxLength: 4
     *
     * @return self
     */
    public function setAirlineComputerizedReservationSystem($airline_computerized_reservation_system)
    {
        if (is_null($airline_computerized_reservation_system)) {
            throw new \InvalidArgumentException('non-nullable airline_computerized_reservation_system cannot be null');
        }
        $this->container['airline_computerized_reservation_system'] = $airline_computerized_reservation_system;

        return $this;
    }

    /**
     * Gets airline_customer_reference_number
     *
     * @return string|null
     */
    public function getAirlineCustomerReferenceNumber()
    {
        return $this->container['airline_customer_reference_number'];
    }

    /**
     * Sets airline_customer_reference_number
     *
     * @param string|null $airline_customer_reference_number Reference number; alphanumeric. * minLength: 0 * maxLength: 20
     *
     * @return self
     */
    public function setAirlineCustomerReferenceNumber($airline_customer_reference_number)
    {
        if (is_null($airline_customer_reference_number)) {
            throw new \InvalidArgumentException('non-nullable airline_customer_reference_number cannot be null');
        }
        $this->container['airline_customer_reference_number'] = $airline_customer_reference_number;

        return $this;
    }

    /**
     * Gets airline_document_type
     *
     * @return string|null
     */
    public function getAirlineDocumentType()
    {
        return $this->container['airline_document_type'];
    }

    /**
     * Sets airline_document_type
     *
     * @param string|null $airline_document_type Optional 2-digit code; alphanumeric. It identifies the type of product of the transaction. The description of the code may appear on credit card statements. * Format: 2-digit code * Example: Passenger ticket = 01 * minLength: 2 * maxLength: 2
     *
     * @return self
     */
    public function setAirlineDocumentType($airline_document_type)
    {
        if (is_null($airline_document_type)) {
            throw new \InvalidArgumentException('non-nullable airline_document_type cannot be null');
        }
        $this->container['airline_document_type'] = $airline_document_type;

        return $this;
    }

    /**
     * Gets airline_flight_date
     *
     * @return string|null
     */
    public function getAirlineFlightDate()
    {
        return $this->container['airline_flight_date'];
    }

    /**
     * Sets airline_flight_date
     *
     * @param string|null $airline_flight_date Flight departure date. Local time `(HH:mm)` is optional. * Date format: `yyyy-MM-dd` * Date and time format: `yyyy-MM-dd HH:mm` * minLength: 10 * maxLength: 16
     *
     * @return self
     */
    public function setAirlineFlightDate($airline_flight_date)
    {
        if (is_null($airline_flight_date)) {
            throw new \InvalidArgumentException('non-nullable airline_flight_date cannot be null');
        }
        $this->container['airline_flight_date'] = $airline_flight_date;

        return $this;
    }

    /**
     * Gets airline_leg_carrier_code
     *
     * @return string|null
     */
    public function getAirlineLegCarrierCode()
    {
        return $this->container['airline_leg_carrier_code'];
    }

    /**
     * Sets airline_leg_carrier_code
     *
     * @param string|null $airline_leg_carrier_code [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX); alphabetical. It identifies the carrier. This field is required/mandatory if the airline data includes leg details. * Format: IATA 2-letter airline code * Example: KLM = KL * minLength: 2 * maxLength: 2
     *
     * @return self
     */
    public function setAirlineLegCarrierCode($airline_leg_carrier_code)
    {
        if (is_null($airline_leg_carrier_code)) {
            throw new \InvalidArgumentException('non-nullable airline_leg_carrier_code cannot be null');
        }
        $this->container['airline_leg_carrier_code'] = $airline_leg_carrier_code;

        return $this;
    }

    /**
     * Gets airline_leg_class_of_travel
     *
     * @return string|null
     */
    public function getAirlineLegClassOfTravel()
    {
        return $this->container['airline_leg_class_of_travel'];
    }

    /**
     * Sets airline_leg_class_of_travel
     *
     * @param string|null $airline_leg_class_of_travel 1-letter travel class identifier; alphabetical. There is no standard; however, the following codes are used rather consistently: * F: first class * J: business class * Y: economy class * W: premium economy  Limitations: * minLength: 1 * maxLength: 1
     *
     * @return self
     */
    public function setAirlineLegClassOfTravel($airline_leg_class_of_travel)
    {
        if (is_null($airline_leg_class_of_travel)) {
            throw new \InvalidArgumentException('non-nullable airline_leg_class_of_travel cannot be null');
        }
        $this->container['airline_leg_class_of_travel'] = $airline_leg_class_of_travel;

        return $this;
    }

    /**
     * Gets airline_leg_date_of_travel
     *
     * @return string|null
     */
    public function getAirlineLegDateOfTravel()
    {
        return $this->container['airline_leg_date_of_travel'];
    }

    /**
     * Sets airline_leg_date_of_travel
     *
     * @param string|null $airline_leg_date_of_travel Date and time of travel. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)-compliant. * Format: `yyyy-MM-dd HH:mm` * minLength: 16 * maxLength: 16
     *
     * @return self
     */
    public function setAirlineLegDateOfTravel($airline_leg_date_of_travel)
    {
        if (is_null($airline_leg_date_of_travel)) {
            throw new \InvalidArgumentException('non-nullable airline_leg_date_of_travel cannot be null');
        }
        $this->container['airline_leg_date_of_travel'] = $airline_leg_date_of_travel;

        return $this;
    }

    /**
     * Gets airline_leg_depart_airport
     *
     * @return string|null
     */
    public function getAirlineLegDepartAirport()
    {
        return $this->container['airline_leg_depart_airport'];
    }

    /**
     * Sets airline_leg_depart_airport
     *
     * @param string|null $airline_leg_depart_airport Alphabetical identifier of the departure airport. This field is required if the airline data includes leg details. * Format: [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code. * Example: Amsterdam = AMS * minLength: 3 * maxLength: 3
     *
     * @return self
     */
    public function setAirlineLegDepartAirport($airline_leg_depart_airport)
    {
        if (is_null($airline_leg_depart_airport)) {
            throw new \InvalidArgumentException('non-nullable airline_leg_depart_airport cannot be null');
        }
        $this->container['airline_leg_depart_airport'] = $airline_leg_depart_airport;

        return $this;
    }

    /**
     * Gets airline_leg_depart_tax
     *
     * @return string|null
     */
    public function getAirlineLegDepartTax()
    {
        return $this->container['airline_leg_depart_tax'];
    }

    /**
     * Sets airline_leg_depart_tax
     *
     * @param string|null $airline_leg_depart_tax [Departure tax](https://en.wikipedia.org/wiki/Departure_tax). Amount charged by a country to an individual upon their leaving. The transaction amount needs to be represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes). * minLength: 1 * maxLength: 12
     *
     * @return self
     */
    public function setAirlineLegDepartTax($airline_leg_depart_tax)
    {
        if (is_null($airline_leg_depart_tax)) {
            throw new \InvalidArgumentException('non-nullable airline_leg_depart_tax cannot be null');
        }
        $this->container['airline_leg_depart_tax'] = $airline_leg_depart_tax;

        return $this;
    }

    /**
     * Gets airline_leg_destination_code
     *
     * @return string|null
     */
    public function getAirlineLegDestinationCode()
    {
        return $this->container['airline_leg_destination_code'];
    }

    /**
     * Sets airline_leg_destination_code
     *
     * @param string|null $airline_leg_destination_code Alphabetical identifier of the destination/arrival airport. This field is required/mandatory if the airline data includes leg details. * Format: [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code. * Example: Amsterdam = AMS * minLength: 3 * maxLength: 3
     *
     * @return self
     */
    public function setAirlineLegDestinationCode($airline_leg_destination_code)
    {
        if (is_null($airline_leg_destination_code)) {
            throw new \InvalidArgumentException('non-nullable airline_leg_destination_code cannot be null');
        }
        $this->container['airline_leg_destination_code'] = $airline_leg_destination_code;

        return $this;
    }

    /**
     * Gets airline_leg_fare_base_code
     *
     * @return string|null
     */
    public function getAirlineLegFareBaseCode()
    {
        return $this->container['airline_leg_fare_base_code'];
    }

    /**
     * Sets airline_leg_fare_base_code
     *
     * @param string|null $airline_leg_fare_base_code [Fare basis code](https://en.wikipedia.org/wiki/Fare_basis_code); alphanumeric. * minLength: 1 * maxLength: 7
     *
     * @return self
     */
    public function setAirlineLegFareBaseCode($airline_leg_fare_base_code)
    {
        if (is_null($airline_leg_fare_base_code)) {
            throw new \InvalidArgumentException('non-nullable airline_leg_fare_base_code cannot be null');
        }
        $this->container['airline_leg_fare_base_code'] = $airline_leg_fare_base_code;

        return $this;
    }

    /**
     * Gets airline_leg_flight_number
     *
     * @return string|null
     */
    public function getAirlineLegFlightNumber()
    {
        return $this->container['airline_leg_flight_number'];
    }

    /**
     * Sets airline_leg_flight_number
     *
     * @param string|null $airline_leg_flight_number The flight identifier. * minLength: 1 * maxLength: 5
     *
     * @return self
     */
    public function setAirlineLegFlightNumber($airline_leg_flight_number)
    {
        if (is_null($airline_leg_flight_number)) {
            throw new \InvalidArgumentException('non-nullable airline_leg_flight_number cannot be null');
        }
        $this->container['airline_leg_flight_number'] = $airline_leg_flight_number;

        return $this;
    }

    /**
     * Gets airline_leg_stop_over_code
     *
     * @return string|null
     */
    public function getAirlineLegStopOverCode()
    {
        return $this->container['airline_leg_stop_over_code'];
    }

    /**
     * Sets airline_leg_stop_over_code
     *
     * @param string|null $airline_leg_stop_over_code 1-letter code that indicates whether the passenger is entitled to make a stopover. Only two types of characters are allowed: * O: Stopover allowed * X: Stopover not allowed  Limitations: * minLength: 1 * maxLength: 1
     *
     * @return self
     */
    public function setAirlineLegStopOverCode($airline_leg_stop_over_code)
    {
        if (is_null($airline_leg_stop_over_code)) {
            throw new \InvalidArgumentException('non-nullable airline_leg_stop_over_code cannot be null');
        }
        $this->container['airline_leg_stop_over_code'] = $airline_leg_stop_over_code;

        return $this;
    }

    /**
     * Gets airline_passenger_date_of_birth
     *
     * @return string|null
     */
    public function getAirlinePassengerDateOfBirth()
    {
        return $this->container['airline_passenger_date_of_birth'];
    }

    /**
     * Sets airline_passenger_date_of_birth
     *
     * @param string|null $airline_passenger_date_of_birth Date of birth of the passenger.  Date format: `yyyy-MM-dd` * minLength: 10 * maxLength: 10
     *
     * @return self
     */
    public function setAirlinePassengerDateOfBirth($airline_passenger_date_of_birth)
    {
        if (is_null($airline_passenger_date_of_birth)) {
            throw new \InvalidArgumentException('non-nullable airline_passenger_date_of_birth cannot be null');
        }
        $this->container['airline_passenger_date_of_birth'] = $airline_passenger_date_of_birth;

        return $this;
    }

    /**
     * Gets airline_passenger_first_name
     *
     * @return string|null
     */
    public function getAirlinePassengerFirstName()
    {
        return $this->container['airline_passenger_first_name'];
    }

    /**
     * Sets airline_passenger_first_name
     *
     * @param string|null $airline_passenger_first_name Passenger first name/given name. > This field is required/mandatory if the airline data includes passenger details or leg details.
     *
     * @return self
     */
    public function setAirlinePassengerFirstName($airline_passenger_first_name)
    {
        if (is_null($airline_passenger_first_name)) {
            throw new \InvalidArgumentException('non-nullable airline_passenger_first_name cannot be null');
        }
        $this->container['airline_passenger_first_name'] = $airline_passenger_first_name;

        return $this;
    }

    /**
     * Gets airline_passenger_last_name
     *
     * @return string|null
     */
    public function getAirlinePassengerLastName()
    {
        return $this->container['airline_passenger_last_name'];
    }

    /**
     * Sets airline_passenger_last_name
     *
     * @param string|null $airline_passenger_last_name Passenger last name/family name. > This field is required/mandatory if the airline data includes passenger details or leg details.
     *
     * @return self
     */
    public function setAirlinePassengerLastName($airline_passenger_last_name)
    {
        if (is_null($airline_passenger_last_name)) {
            throw new \InvalidArgumentException('non-nullable airline_passenger_last_name cannot be null');
        }
        $this->container['airline_passenger_last_name'] = $airline_passenger_last_name;

        return $this;
    }

    /**
     * Gets airline_passenger_telephone_number
     *
     * @return string|null
     */
    public function getAirlinePassengerTelephoneNumber()
    {
        return $this->container['airline_passenger_telephone_number'];
    }

    /**
     * Sets airline_passenger_telephone_number
     *
     * @param string|null $airline_passenger_telephone_number Telephone number of the passenger, including country code. This is an alphanumeric field that can include the '+' and '-' signs. * minLength: 3 * maxLength: 30
     *
     * @return self
     */
    public function setAirlinePassengerTelephoneNumber($airline_passenger_telephone_number)
    {
        if (is_null($airline_passenger_telephone_number)) {
            throw new \InvalidArgumentException('non-nullable airline_passenger_telephone_number cannot be null');
        }
        $this->container['airline_passenger_telephone_number'] = $airline_passenger_telephone_number;

        return $this;
    }

    /**
     * Gets airline_passenger_traveller_type
     *
     * @return string|null
     */
    public function getAirlinePassengerTravellerType()
    {
        return $this->container['airline_passenger_traveller_type'];
    }

    /**
     * Sets airline_passenger_traveller_type
     *
     * @param string|null $airline_passenger_traveller_type Passenger type code (PTC). IATA PTC values are 3-letter alphabetical. Example: ADT, SRC, CNN, INS.  However, several carriers use non-standard codes that can be up to 5 alphanumeric characters. * minLength: 3 * maxLength: 6
     *
     * @return self
     */
    public function setAirlinePassengerTravellerType($airline_passenger_traveller_type)
    {
        if (is_null($airline_passenger_traveller_type)) {
            throw new \InvalidArgumentException('non-nullable airline_passenger_traveller_type cannot be null');
        }
        $this->container['airline_passenger_traveller_type'] = $airline_passenger_traveller_type;

        return $this;
    }

    /**
     * Gets airline_passenger_name
     *
     * @return string
     */
    public function getAirlinePassengerName()
    {
        return $this->container['airline_passenger_name'];
    }

    /**
     * Sets airline_passenger_name
     *
     * @param string $airline_passenger_name Passenger name, initials, and a title. * Format: last name + first name or initials + title. * Example: *FLYER / MARY MS*. * minLength: 1 * maxLength: 49
     *
     * @return self
     */
    public function setAirlinePassengerName($airline_passenger_name)
    {
        if (is_null($airline_passenger_name)) {
            throw new \InvalidArgumentException('non-nullable airline_passenger_name cannot be null');
        }
        $this->container['airline_passenger_name'] = $airline_passenger_name;

        return $this;
    }

    /**
     * Gets airline_ticket_issue_address
     *
     * @return string|null
     */
    public function getAirlineTicketIssueAddress()
    {
        return $this->container['airline_ticket_issue_address'];
    }

    /**
     * Sets airline_ticket_issue_address
     *
     * @param string|null $airline_ticket_issue_address Address of the place/agency that issued the ticket. * minLength: 0 * maxLength: 16
     *
     * @return self
     */
    public function setAirlineTicketIssueAddress($airline_ticket_issue_address)
    {
        if (is_null($airline_ticket_issue_address)) {
            throw new \InvalidArgumentException('non-nullable airline_ticket_issue_address cannot be null');
        }
        $this->container['airline_ticket_issue_address'] = $airline_ticket_issue_address;

        return $this;
    }

    /**
     * Gets airline_ticket_number
     *
     * @return string|null
     */
    public function getAirlineTicketNumber()
    {
        return $this->container['airline_ticket_number'];
    }

    /**
     * Sets airline_ticket_number
     *
     * @param string|null $airline_ticket_number The ticket's unique identifier. * minLength: 1 * maxLength: 150
     *
     * @return self
     */
    public function setAirlineTicketNumber($airline_ticket_number)
    {
        if (is_null($airline_ticket_number)) {
            throw new \InvalidArgumentException('non-nullable airline_ticket_number cannot be null');
        }
        $this->container['airline_ticket_number'] = $airline_ticket_number;

        return $this;
    }

    /**
     * Gets airline_travel_agency_code
     *
     * @return string|null
     */
    public function getAirlineTravelAgencyCode()
    {
        return $this->container['airline_travel_agency_code'];
    }

    /**
     * Sets airline_travel_agency_code
     *
     * @param string|null $airline_travel_agency_code IATA number, also ARC number or ARC/IATA number. Unique identifier number for travel agencies. * minLength: 1 * maxLength: 8
     *
     * @return self
     */
    public function setAirlineTravelAgencyCode($airline_travel_agency_code)
    {
        if (is_null($airline_travel_agency_code)) {
            throw new \InvalidArgumentException('non-nullable airline_travel_agency_code cannot be null');
        }
        $this->container['airline_travel_agency_code'] = $airline_travel_agency_code;

        return $this;
    }

    /**
     * Gets airline_travel_agency_name
     *
     * @return string|null
     */
    public function getAirlineTravelAgencyName()
    {
        return $this->container['airline_travel_agency_name'];
    }

    /**
     * Sets airline_travel_agency_name
     *
     * @param string|null $airline_travel_agency_name The name of the travel agency. * minLength: 1 * maxLength: 25
     *
     * @return self
     */
    public function setAirlineTravelAgencyName($airline_travel_agency_name)
    {
        if (is_null($airline_travel_agency_name)) {
            throw new \InvalidArgumentException('non-nullable airline_travel_agency_name cannot be null');
        }
        $this->container['airline_travel_agency_name'] = $airline_travel_agency_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
