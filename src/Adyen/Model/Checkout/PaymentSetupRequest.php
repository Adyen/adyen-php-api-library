<?php

/**
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 70
 * Contact: developer-experience@adyen.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Adyen\Model\Checkout;

use \ArrayAccess;
use \Adyen\Model\Checkout\ObjectSerializer;

/**
 * PaymentSetupRequest Class Doc Comment
 *
 * @category Class
 * @package  Adyen\Model\Checkout
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentSetupRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentSetupRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'additional_data' => 'array<string,string>',
        'allowed_payment_methods' => 'string[]',
        'amount' => '\Adyen\Model\Checkout\Amount',
        'application_info' => '\Adyen\Model\Checkout\ApplicationInfo',
        'billing_address' => '\Adyen\Model\Checkout\Address',
        'blocked_payment_methods' => 'string[]',
        'capture_delay_hours' => 'int',
        'channel' => 'string',
        'checkout_attempt_id' => 'string',
        'company' => '\Adyen\Model\Checkout\Company',
        'configuration' => '\Adyen\Model\Checkout\Configuration',
        'conversion_id' => 'string',
        'country_code' => 'string',
        'date_of_birth' => '\DateTime',
        'dcc_quote' => '\Adyen\Model\Checkout\ForexQuote',
        'delivery_address' => '\Adyen\Model\Checkout\Address',
        'delivery_date' => '\DateTime',
        'enable_one_click' => 'bool',
        'enable_pay_out' => 'bool',
        'enable_recurring' => 'bool',
        'entity_type' => 'string',
        'fraud_offset' => 'int',
        'installments' => '\Adyen\Model\Checkout\Installments',
        'line_items' => '\Adyen\Model\Checkout\LineItem[]',
        'localized_shopper_statement' => 'array<string,string>',
        'mandate' => '\Adyen\Model\Checkout\Mandate',
        'mcc' => 'string',
        'merchant_account' => 'string',
        'merchant_order_reference' => 'string',
        'metadata' => 'array<string,string>',
        'order_reference' => 'string',
        'origin' => 'string',
        'platform_chargeback_logic' => '\Adyen\Model\Checkout\PlatformChargebackLogic',
        'recurring_expiry' => 'string',
        'recurring_frequency' => 'string',
        'reference' => 'string',
        'return_url' => 'string',
        'risk_data' => '\Adyen\Model\Checkout\RiskData',
        'sdk_version' => 'string',
        'session_validity' => 'string',
        'shopper_email' => 'string',
        'shopper_ip' => 'string',
        'shopper_interaction' => 'string',
        'shopper_locale' => 'string',
        'shopper_name' => '\Adyen\Model\Checkout\Name',
        'shopper_reference' => 'string',
        'shopper_statement' => 'string',
        'social_security_number' => 'string',
        'splits' => '\Adyen\Model\Checkout\Split[]',
        'store' => 'string',
        'store_payment_method' => 'bool',
        'telephone_number' => 'string',
        'three_ds_authentication_only' => 'bool',
        'token' => 'string',
        'trusted_shopper' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'additional_data' => null,
        'allowed_payment_methods' => null,
        'amount' => null,
        'application_info' => null,
        'billing_address' => null,
        'blocked_payment_methods' => null,
        'capture_delay_hours' => 'int32',
        'channel' => null,
        'checkout_attempt_id' => null,
        'company' => null,
        'configuration' => null,
        'conversion_id' => null,
        'country_code' => null,
        'date_of_birth' => 'date',
        'dcc_quote' => null,
        'delivery_address' => null,
        'delivery_date' => 'date-time',
        'enable_one_click' => null,
        'enable_pay_out' => null,
        'enable_recurring' => null,
        'entity_type' => null,
        'fraud_offset' => 'int32',
        'installments' => null,
        'line_items' => null,
        'localized_shopper_statement' => null,
        'mandate' => null,
        'mcc' => null,
        'merchant_account' => null,
        'merchant_order_reference' => null,
        'metadata' => null,
        'order_reference' => null,
        'origin' => null,
        'platform_chargeback_logic' => null,
        'recurring_expiry' => null,
        'recurring_frequency' => null,
        'reference' => null,
        'return_url' => null,
        'risk_data' => null,
        'sdk_version' => null,
        'session_validity' => null,
        'shopper_email' => null,
        'shopper_ip' => null,
        'shopper_interaction' => null,
        'shopper_locale' => null,
        'shopper_name' => null,
        'shopper_reference' => null,
        'shopper_statement' => null,
        'social_security_number' => null,
        'splits' => null,
        'store' => null,
        'store_payment_method' => null,
        'telephone_number' => null,
        'three_ds_authentication_only' => null,
        'token' => null,
        'trusted_shopper' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'additional_data' => false,
		'allowed_payment_methods' => false,
		'amount' => false,
		'application_info' => false,
		'billing_address' => false,
		'blocked_payment_methods' => false,
		'capture_delay_hours' => false,
		'channel' => false,
		'checkout_attempt_id' => false,
		'company' => false,
		'configuration' => false,
		'conversion_id' => false,
		'country_code' => false,
		'date_of_birth' => false,
		'dcc_quote' => false,
		'delivery_address' => false,
		'delivery_date' => false,
		'enable_one_click' => false,
		'enable_pay_out' => false,
		'enable_recurring' => false,
		'entity_type' => false,
		'fraud_offset' => false,
		'installments' => false,
		'line_items' => false,
		'localized_shopper_statement' => false,
		'mandate' => false,
		'mcc' => false,
		'merchant_account' => false,
		'merchant_order_reference' => false,
		'metadata' => false,
		'order_reference' => false,
		'origin' => false,
		'platform_chargeback_logic' => false,
		'recurring_expiry' => false,
		'recurring_frequency' => false,
		'reference' => false,
		'return_url' => false,
		'risk_data' => false,
		'sdk_version' => false,
		'session_validity' => false,
		'shopper_email' => false,
		'shopper_ip' => false,
		'shopper_interaction' => false,
		'shopper_locale' => false,
		'shopper_name' => false,
		'shopper_reference' => false,
		'shopper_statement' => false,
		'social_security_number' => false,
		'splits' => false,
		'store' => false,
		'store_payment_method' => false,
		'telephone_number' => false,
		'three_ds_authentication_only' => false,
		'token' => false,
		'trusted_shopper' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_data' => 'additionalData',
        'allowed_payment_methods' => 'allowedPaymentMethods',
        'amount' => 'amount',
        'application_info' => 'applicationInfo',
        'billing_address' => 'billingAddress',
        'blocked_payment_methods' => 'blockedPaymentMethods',
        'capture_delay_hours' => 'captureDelayHours',
        'channel' => 'channel',
        'checkout_attempt_id' => 'checkoutAttemptId',
        'company' => 'company',
        'configuration' => 'configuration',
        'conversion_id' => 'conversionId',
        'country_code' => 'countryCode',
        'date_of_birth' => 'dateOfBirth',
        'dcc_quote' => 'dccQuote',
        'delivery_address' => 'deliveryAddress',
        'delivery_date' => 'deliveryDate',
        'enable_one_click' => 'enableOneClick',
        'enable_pay_out' => 'enablePayOut',
        'enable_recurring' => 'enableRecurring',
        'entity_type' => 'entityType',
        'fraud_offset' => 'fraudOffset',
        'installments' => 'installments',
        'line_items' => 'lineItems',
        'localized_shopper_statement' => 'localizedShopperStatement',
        'mandate' => 'mandate',
        'mcc' => 'mcc',
        'merchant_account' => 'merchantAccount',
        'merchant_order_reference' => 'merchantOrderReference',
        'metadata' => 'metadata',
        'order_reference' => 'orderReference',
        'origin' => 'origin',
        'platform_chargeback_logic' => 'platformChargebackLogic',
        'recurring_expiry' => 'recurringExpiry',
        'recurring_frequency' => 'recurringFrequency',
        'reference' => 'reference',
        'return_url' => 'returnUrl',
        'risk_data' => 'riskData',
        'sdk_version' => 'sdkVersion',
        'session_validity' => 'sessionValidity',
        'shopper_email' => 'shopperEmail',
        'shopper_ip' => 'shopperIP',
        'shopper_interaction' => 'shopperInteraction',
        'shopper_locale' => 'shopperLocale',
        'shopper_name' => 'shopperName',
        'shopper_reference' => 'shopperReference',
        'shopper_statement' => 'shopperStatement',
        'social_security_number' => 'socialSecurityNumber',
        'splits' => 'splits',
        'store' => 'store',
        'store_payment_method' => 'storePaymentMethod',
        'telephone_number' => 'telephoneNumber',
        'three_ds_authentication_only' => 'threeDSAuthenticationOnly',
        'token' => 'token',
        'trusted_shopper' => 'trustedShopper'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additional_data' => 'setAdditionalData',
        'allowed_payment_methods' => 'setAllowedPaymentMethods',
        'amount' => 'setAmount',
        'application_info' => 'setApplicationInfo',
        'billing_address' => 'setBillingAddress',
        'blocked_payment_methods' => 'setBlockedPaymentMethods',
        'capture_delay_hours' => 'setCaptureDelayHours',
        'channel' => 'setChannel',
        'checkout_attempt_id' => 'setCheckoutAttemptId',
        'company' => 'setCompany',
        'configuration' => 'setConfiguration',
        'conversion_id' => 'setConversionId',
        'country_code' => 'setCountryCode',
        'date_of_birth' => 'setDateOfBirth',
        'dcc_quote' => 'setDccQuote',
        'delivery_address' => 'setDeliveryAddress',
        'delivery_date' => 'setDeliveryDate',
        'enable_one_click' => 'setEnableOneClick',
        'enable_pay_out' => 'setEnablePayOut',
        'enable_recurring' => 'setEnableRecurring',
        'entity_type' => 'setEntityType',
        'fraud_offset' => 'setFraudOffset',
        'installments' => 'setInstallments',
        'line_items' => 'setLineItems',
        'localized_shopper_statement' => 'setLocalizedShopperStatement',
        'mandate' => 'setMandate',
        'mcc' => 'setMcc',
        'merchant_account' => 'setMerchantAccount',
        'merchant_order_reference' => 'setMerchantOrderReference',
        'metadata' => 'setMetadata',
        'order_reference' => 'setOrderReference',
        'origin' => 'setOrigin',
        'platform_chargeback_logic' => 'setPlatformChargebackLogic',
        'recurring_expiry' => 'setRecurringExpiry',
        'recurring_frequency' => 'setRecurringFrequency',
        'reference' => 'setReference',
        'return_url' => 'setReturnUrl',
        'risk_data' => 'setRiskData',
        'sdk_version' => 'setSdkVersion',
        'session_validity' => 'setSessionValidity',
        'shopper_email' => 'setShopperEmail',
        'shopper_ip' => 'setShopperIp',
        'shopper_interaction' => 'setShopperInteraction',
        'shopper_locale' => 'setShopperLocale',
        'shopper_name' => 'setShopperName',
        'shopper_reference' => 'setShopperReference',
        'shopper_statement' => 'setShopperStatement',
        'social_security_number' => 'setSocialSecurityNumber',
        'splits' => 'setSplits',
        'store' => 'setStore',
        'store_payment_method' => 'setStorePaymentMethod',
        'telephone_number' => 'setTelephoneNumber',
        'three_ds_authentication_only' => 'setThreeDsAuthenticationOnly',
        'token' => 'setToken',
        'trusted_shopper' => 'setTrustedShopper'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additional_data' => 'getAdditionalData',
        'allowed_payment_methods' => 'getAllowedPaymentMethods',
        'amount' => 'getAmount',
        'application_info' => 'getApplicationInfo',
        'billing_address' => 'getBillingAddress',
        'blocked_payment_methods' => 'getBlockedPaymentMethods',
        'capture_delay_hours' => 'getCaptureDelayHours',
        'channel' => 'getChannel',
        'checkout_attempt_id' => 'getCheckoutAttemptId',
        'company' => 'getCompany',
        'configuration' => 'getConfiguration',
        'conversion_id' => 'getConversionId',
        'country_code' => 'getCountryCode',
        'date_of_birth' => 'getDateOfBirth',
        'dcc_quote' => 'getDccQuote',
        'delivery_address' => 'getDeliveryAddress',
        'delivery_date' => 'getDeliveryDate',
        'enable_one_click' => 'getEnableOneClick',
        'enable_pay_out' => 'getEnablePayOut',
        'enable_recurring' => 'getEnableRecurring',
        'entity_type' => 'getEntityType',
        'fraud_offset' => 'getFraudOffset',
        'installments' => 'getInstallments',
        'line_items' => 'getLineItems',
        'localized_shopper_statement' => 'getLocalizedShopperStatement',
        'mandate' => 'getMandate',
        'mcc' => 'getMcc',
        'merchant_account' => 'getMerchantAccount',
        'merchant_order_reference' => 'getMerchantOrderReference',
        'metadata' => 'getMetadata',
        'order_reference' => 'getOrderReference',
        'origin' => 'getOrigin',
        'platform_chargeback_logic' => 'getPlatformChargebackLogic',
        'recurring_expiry' => 'getRecurringExpiry',
        'recurring_frequency' => 'getRecurringFrequency',
        'reference' => 'getReference',
        'return_url' => 'getReturnUrl',
        'risk_data' => 'getRiskData',
        'sdk_version' => 'getSdkVersion',
        'session_validity' => 'getSessionValidity',
        'shopper_email' => 'getShopperEmail',
        'shopper_ip' => 'getShopperIp',
        'shopper_interaction' => 'getShopperInteraction',
        'shopper_locale' => 'getShopperLocale',
        'shopper_name' => 'getShopperName',
        'shopper_reference' => 'getShopperReference',
        'shopper_statement' => 'getShopperStatement',
        'social_security_number' => 'getSocialSecurityNumber',
        'splits' => 'getSplits',
        'store' => 'getStore',
        'store_payment_method' => 'getStorePaymentMethod',
        'telephone_number' => 'getTelephoneNumber',
        'three_ds_authentication_only' => 'getThreeDsAuthenticationOnly',
        'token' => 'getToken',
        'trusted_shopper' => 'getTrustedShopper'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CHANNEL_I_OS = 'iOS';
    public const CHANNEL_ANDROID = 'Android';
    public const CHANNEL_WEB = 'Web';
    public const ENTITY_TYPE_NATURAL_PERSON = 'NaturalPerson';
    public const ENTITY_TYPE_COMPANY_NAME = 'CompanyName';
    public const SHOPPER_INTERACTION_ECOMMERCE = 'Ecommerce';
    public const SHOPPER_INTERACTION_CONT_AUTH = 'ContAuth';
    public const SHOPPER_INTERACTION_MOTO = 'Moto';
    public const SHOPPER_INTERACTION_POS = 'POS';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChannelAllowableValues()
    {
        return [
            self::CHANNEL_I_OS,
            self::CHANNEL_ANDROID,
            self::CHANNEL_WEB,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEntityTypeAllowableValues()
    {
        return [
            self::ENTITY_TYPE_NATURAL_PERSON,
            self::ENTITY_TYPE_COMPANY_NAME,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShopperInteractionAllowableValues()
    {
        return [
            self::SHOPPER_INTERACTION_ECOMMERCE,
            self::SHOPPER_INTERACTION_CONT_AUTH,
            self::SHOPPER_INTERACTION_MOTO,
            self::SHOPPER_INTERACTION_POS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('additional_data', $data ?? [], null);
        $this->setIfExists('allowed_payment_methods', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('application_info', $data ?? [], null);
        $this->setIfExists('billing_address', $data ?? [], null);
        $this->setIfExists('blocked_payment_methods', $data ?? [], null);
        $this->setIfExists('capture_delay_hours', $data ?? [], null);
        $this->setIfExists('channel', $data ?? [], null);
        $this->setIfExists('checkout_attempt_id', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('configuration', $data ?? [], null);
        $this->setIfExists('conversion_id', $data ?? [], null);
        $this->setIfExists('country_code', $data ?? [], null);
        $this->setIfExists('date_of_birth', $data ?? [], null);
        $this->setIfExists('dcc_quote', $data ?? [], null);
        $this->setIfExists('delivery_address', $data ?? [], null);
        $this->setIfExists('delivery_date', $data ?? [], null);
        $this->setIfExists('enable_one_click', $data ?? [], null);
        $this->setIfExists('enable_pay_out', $data ?? [], null);
        $this->setIfExists('enable_recurring', $data ?? [], null);
        $this->setIfExists('entity_type', $data ?? [], null);
        $this->setIfExists('fraud_offset', $data ?? [], null);
        $this->setIfExists('installments', $data ?? [], null);
        $this->setIfExists('line_items', $data ?? [], null);
        $this->setIfExists('localized_shopper_statement', $data ?? [], null);
        $this->setIfExists('mandate', $data ?? [], null);
        $this->setIfExists('mcc', $data ?? [], null);
        $this->setIfExists('merchant_account', $data ?? [], null);
        $this->setIfExists('merchant_order_reference', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('order_reference', $data ?? [], null);
        $this->setIfExists('origin', $data ?? [], null);
        $this->setIfExists('platform_chargeback_logic', $data ?? [], null);
        $this->setIfExists('recurring_expiry', $data ?? [], null);
        $this->setIfExists('recurring_frequency', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('return_url', $data ?? [], null);
        $this->setIfExists('risk_data', $data ?? [], null);
        $this->setIfExists('sdk_version', $data ?? [], null);
        $this->setIfExists('session_validity', $data ?? [], null);
        $this->setIfExists('shopper_email', $data ?? [], null);
        $this->setIfExists('shopper_ip', $data ?? [], null);
        $this->setIfExists('shopper_interaction', $data ?? [], null);
        $this->setIfExists('shopper_locale', $data ?? [], null);
        $this->setIfExists('shopper_name', $data ?? [], null);
        $this->setIfExists('shopper_reference', $data ?? [], null);
        $this->setIfExists('shopper_statement', $data ?? [], null);
        $this->setIfExists('social_security_number', $data ?? [], null);
        $this->setIfExists('splits', $data ?? [], null);
        $this->setIfExists('store', $data ?? [], null);
        $this->setIfExists('store_payment_method', $data ?? [], null);
        $this->setIfExists('telephone_number', $data ?? [], null);
        $this->setIfExists('three_ds_authentication_only', $data ?? [], false);
        $this->setIfExists('token', $data ?? [], null);
        $this->setIfExists('trusted_shopper', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        $allowedValues = $this->getChannelAllowableValues();
        if (!is_null($this->container['channel']) && !in_array($this->container['channel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'channel', must be one of '%s'",
                $this->container['channel'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['country_code'] === null) {
            $invalidProperties[] = "'country_code' can't be null";
        }
        $allowedValues = $this->getEntityTypeAllowableValues();
        if (!is_null($this->container['entity_type']) && !in_array($this->container['entity_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'entity_type', must be one of '%s'",
                $this->container['entity_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['merchant_account'] === null) {
            $invalidProperties[] = "'merchant_account' can't be null";
        }
        if ($this->container['reference'] === null) {
            $invalidProperties[] = "'reference' can't be null";
        }
        if ($this->container['return_url'] === null) {
            $invalidProperties[] = "'return_url' can't be null";
        }
        if ((mb_strlen($this->container['return_url']) > 8000)) {
            $invalidProperties[] = "invalid value for 'return_url', the character length must be smaller than or equal to 8000.";
        }

        $allowedValues = $this->getShopperInteractionAllowableValues();
        if (!is_null($this->container['shopper_interaction']) && !in_array($this->container['shopper_interaction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shopper_interaction', must be one of '%s'",
                $this->container['shopper_interaction'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['store']) && (mb_strlen($this->container['store']) > 16)) {
            $invalidProperties[] = "invalid value for 'store', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['store']) && (mb_strlen($this->container['store']) < 1)) {
            $invalidProperties[] = "invalid value for 'store', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additional_data
     *
     * @return array<string,string>|null
     */
    public function getAdditionalData()
    {
        return $this->container['additional_data'];
    }

    /**
     * Sets additional_data
     *
     * @param array<string,string>|null $additional_data This field contains additional data, which may be required for a particular payment request.  The `additionalData` object consists of entries, each of which includes the key and value.
     *
     * @return self
     */
    public function setAdditionalData($additional_data)
    {
        if (is_null($additional_data)) {
            throw new \InvalidArgumentException('non-nullable additional_data cannot be null');
        }
        $this->container['additional_data'] = $additional_data;

        return $this;
    }

    /**
     * Gets allowed_payment_methods
     *
     * @return string[]|null
     */
    public function getAllowedPaymentMethods()
    {
        return $this->container['allowed_payment_methods'];
    }

    /**
     * Sets allowed_payment_methods
     *
     * @param string[]|null $allowed_payment_methods List of payment methods to be presented to the shopper. To refer to payment methods, use their `paymentMethod.type`from [Payment methods overview](https://docs.adyen.com/payment-methods).  Example: `\"allowedPaymentMethods\":[\"ideal\",\"giropay\"]`
     *
     * @return self
     */
    public function setAllowedPaymentMethods($allowed_payment_methods)
    {
        if (is_null($allowed_payment_methods)) {
            throw new \InvalidArgumentException('non-nullable allowed_payment_methods cannot be null');
        }
        $this->container['allowed_payment_methods'] = $allowed_payment_methods;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \Adyen\Model\Checkout\Amount
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \Adyen\Model\Checkout\Amount $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets application_info
     *
     * @return \Adyen\Model\Checkout\ApplicationInfo|null
     */
    public function getApplicationInfo()
    {
        return $this->container['application_info'];
    }

    /**
     * Sets application_info
     *
     * @param \Adyen\Model\Checkout\ApplicationInfo|null $application_info application_info
     *
     * @return self
     */
    public function setApplicationInfo($application_info)
    {
        if (is_null($application_info)) {
            throw new \InvalidArgumentException('non-nullable application_info cannot be null');
        }
        $this->container['application_info'] = $application_info;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return \Adyen\Model\Checkout\Address|null
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param \Adyen\Model\Checkout\Address|null $billing_address billing_address
     *
     * @return self
     */
    public function setBillingAddress($billing_address)
    {
        if (is_null($billing_address)) {
            throw new \InvalidArgumentException('non-nullable billing_address cannot be null');
        }
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets blocked_payment_methods
     *
     * @return string[]|null
     */
    public function getBlockedPaymentMethods()
    {
        return $this->container['blocked_payment_methods'];
    }

    /**
     * Sets blocked_payment_methods
     *
     * @param string[]|null $blocked_payment_methods List of payment methods to be hidden from the shopper. To refer to payment methods, use their `paymentMethod.type`from [Payment methods overview](https://docs.adyen.com/payment-methods).  Example: `\"blockedPaymentMethods\":[\"ideal\",\"giropay\"]`
     *
     * @return self
     */
    public function setBlockedPaymentMethods($blocked_payment_methods)
    {
        if (is_null($blocked_payment_methods)) {
            throw new \InvalidArgumentException('non-nullable blocked_payment_methods cannot be null');
        }
        $this->container['blocked_payment_methods'] = $blocked_payment_methods;

        return $this;
    }

    /**
     * Gets capture_delay_hours
     *
     * @return int|null
     */
    public function getCaptureDelayHours()
    {
        return $this->container['capture_delay_hours'];
    }

    /**
     * Sets capture_delay_hours
     *
     * @param int|null $capture_delay_hours The delay between the authorisation and scheduled auto-capture, specified in hours.
     *
     * @return self
     */
    public function setCaptureDelayHours($capture_delay_hours)
    {
        if (is_null($capture_delay_hours)) {
            throw new \InvalidArgumentException('non-nullable capture_delay_hours cannot be null');
        }
        $this->container['capture_delay_hours'] = $capture_delay_hours;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string|null $channel The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the `sdkVersion` or `token`.  Possible values: * iOS * Android * Web
     *
     * @return self
     */
    public function setChannel($channel)
    {
        if (is_null($channel)) {
            throw new \InvalidArgumentException('non-nullable channel cannot be null');
        }
        $allowedValues = $this->getChannelAllowableValues();
        if (!in_array($channel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'channel', must be one of '%s'",
                    $channel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets checkout_attempt_id
     *
     * @return string|null
     */
    public function getCheckoutAttemptId()
    {
        return $this->container['checkout_attempt_id'];
    }

    /**
     * Sets checkout_attempt_id
     *
     * @param string|null $checkout_attempt_id Checkout attempt ID that corresponds to the Id generated for tracking user payment journey.
     *
     * @return self
     */
    public function setCheckoutAttemptId($checkout_attempt_id)
    {
        if (is_null($checkout_attempt_id)) {
            throw new \InvalidArgumentException('non-nullable checkout_attempt_id cannot be null');
        }
        $this->container['checkout_attempt_id'] = $checkout_attempt_id;

        return $this;
    }

    /**
     * Gets company
     *
     * @return \Adyen\Model\Checkout\Company|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param \Adyen\Model\Checkout\Company|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets configuration
     *
     * @return \Adyen\Model\Checkout\Configuration|null
     */
    public function getConfiguration()
    {
        return $this->container['configuration'];
    }

    /**
     * Sets configuration
     *
     * @param \Adyen\Model\Checkout\Configuration|null $configuration configuration
     *
     * @return self
     */
    public function setConfiguration($configuration)
    {
        if (is_null($configuration)) {
            throw new \InvalidArgumentException('non-nullable configuration cannot be null');
        }
        $this->container['configuration'] = $configuration;

        return $this;
    }

    /**
     * Gets conversion_id
     *
     * @return string|null
     */
    public function getConversionId()
    {
        return $this->container['conversion_id'];
    }

    /**
     * Sets conversion_id
     *
     * @param string|null $conversion_id Conversion ID that corresponds to the Id generated for tracking user payment journey.
     *
     * @return self
     */
    public function setConversionId($conversion_id)
    {
        if (is_null($conversion_id)) {
            throw new \InvalidArgumentException('non-nullable conversion_id cannot be null');
        }
        $this->container['conversion_id'] = $conversion_id;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code The shopper country.  Format: [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) Example: NL or DE
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        if (is_null($country_code)) {
            throw new \InvalidArgumentException('non-nullable country_code cannot be null');
        }
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return \DateTime|null
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \DateTime|null $date_of_birth The shopper's date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD
     *
     * @return self
     */
    public function setDateOfBirth($date_of_birth)
    {
        if (is_null($date_of_birth)) {
            throw new \InvalidArgumentException('non-nullable date_of_birth cannot be null');
        }
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets dcc_quote
     *
     * @return \Adyen\Model\Checkout\ForexQuote|null
     */
    public function getDccQuote()
    {
        return $this->container['dcc_quote'];
    }

    /**
     * Sets dcc_quote
     *
     * @param \Adyen\Model\Checkout\ForexQuote|null $dcc_quote dcc_quote
     *
     * @return self
     */
    public function setDccQuote($dcc_quote)
    {
        if (is_null($dcc_quote)) {
            throw new \InvalidArgumentException('non-nullable dcc_quote cannot be null');
        }
        $this->container['dcc_quote'] = $dcc_quote;

        return $this;
    }

    /**
     * Gets delivery_address
     *
     * @return \Adyen\Model\Checkout\Address|null
     */
    public function getDeliveryAddress()
    {
        return $this->container['delivery_address'];
    }

    /**
     * Sets delivery_address
     *
     * @param \Adyen\Model\Checkout\Address|null $delivery_address delivery_address
     *
     * @return self
     */
    public function setDeliveryAddress($delivery_address)
    {
        if (is_null($delivery_address)) {
            throw new \InvalidArgumentException('non-nullable delivery_address cannot be null');
        }
        $this->container['delivery_address'] = $delivery_address;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return \DateTime|null
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param \DateTime|null $delivery_date The date and time the purchased goods should be delivered.  Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD  Example: 2017-07-17T13:42:40.428+01:00
     *
     * @return self
     */
    public function setDeliveryDate($delivery_date)
    {
        if (is_null($delivery_date)) {
            throw new \InvalidArgumentException('non-nullable delivery_date cannot be null');
        }
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets enable_one_click
     *
     * @return bool|null
     */
    public function getEnableOneClick()
    {
        return $this->container['enable_one_click'];
    }

    /**
     * Sets enable_one_click
     *
     * @param bool|null $enable_one_click When true and `shopperReference` is provided, the shopper will be asked if the payment details should be stored for future one-click payments.
     *
     * @return self
     */
    public function setEnableOneClick($enable_one_click)
    {
        if (is_null($enable_one_click)) {
            throw new \InvalidArgumentException('non-nullable enable_one_click cannot be null');
        }
        $this->container['enable_one_click'] = $enable_one_click;

        return $this;
    }

    /**
     * Gets enable_pay_out
     *
     * @return bool|null
     */
    public function getEnablePayOut()
    {
        return $this->container['enable_pay_out'];
    }

    /**
     * Sets enable_pay_out
     *
     * @param bool|null $enable_pay_out When true and `shopperReference` is provided, the payment details will be tokenized for payouts.
     *
     * @return self
     */
    public function setEnablePayOut($enable_pay_out)
    {
        if (is_null($enable_pay_out)) {
            throw new \InvalidArgumentException('non-nullable enable_pay_out cannot be null');
        }
        $this->container['enable_pay_out'] = $enable_pay_out;

        return $this;
    }

    /**
     * Gets enable_recurring
     *
     * @return bool|null
     */
    public function getEnableRecurring()
    {
        return $this->container['enable_recurring'];
    }

    /**
     * Sets enable_recurring
     *
     * @param bool|null $enable_recurring When true and `shopperReference` is provided, the payment details will be tokenized for recurring payments.
     *
     * @return self
     */
    public function setEnableRecurring($enable_recurring)
    {
        if (is_null($enable_recurring)) {
            throw new \InvalidArgumentException('non-nullable enable_recurring cannot be null');
        }
        $this->container['enable_recurring'] = $enable_recurring;

        return $this;
    }

    /**
     * Gets entity_type
     *
     * @return string|null
     */
    public function getEntityType()
    {
        return $this->container['entity_type'];
    }

    /**
     * Sets entity_type
     *
     * @param string|null $entity_type The type of the entity the payment is processed for.
     *
     * @return self
     */
    public function setEntityType($entity_type)
    {
        if (is_null($entity_type)) {
            throw new \InvalidArgumentException('non-nullable entity_type cannot be null');
        }
        $allowedValues = $this->getEntityTypeAllowableValues();
        if (!in_array($entity_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'entity_type', must be one of '%s'",
                    $entity_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['entity_type'] = $entity_type;

        return $this;
    }

    /**
     * Gets fraud_offset
     *
     * @return int|null
     */
    public function getFraudOffset()
    {
        return $this->container['fraud_offset'];
    }

    /**
     * Sets fraud_offset
     *
     * @param int|null $fraud_offset An integer value that is added to the normal fraud score. The value can be either positive or negative.
     *
     * @return self
     */
    public function setFraudOffset($fraud_offset)
    {
        if (is_null($fraud_offset)) {
            throw new \InvalidArgumentException('non-nullable fraud_offset cannot be null');
        }
        $this->container['fraud_offset'] = $fraud_offset;

        return $this;
    }

    /**
     * Gets installments
     *
     * @return \Adyen\Model\Checkout\Installments|null
     */
    public function getInstallments()
    {
        return $this->container['installments'];
    }

    /**
     * Sets installments
     *
     * @param \Adyen\Model\Checkout\Installments|null $installments installments
     *
     * @return self
     */
    public function setInstallments($installments)
    {
        if (is_null($installments)) {
            throw new \InvalidArgumentException('non-nullable installments cannot be null');
        }
        $this->container['installments'] = $installments;

        return $this;
    }

    /**
     * Gets line_items
     *
     * @return \Adyen\Model\Checkout\LineItem[]|null
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param \Adyen\Model\Checkout\LineItem[]|null $line_items Price and product information about the purchased items, to be included on the invoice sent to the shopper. > This field is required for 3x 4x Oney, Affirm, Afterpay, Clearpay, Klarna, Ratepay, Zip and Atome.
     *
     * @return self
     */
    public function setLineItems($line_items)
    {
        if (is_null($line_items)) {
            throw new \InvalidArgumentException('non-nullable line_items cannot be null');
        }
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets localized_shopper_statement
     *
     * @return array<string,string>|null
     */
    public function getLocalizedShopperStatement()
    {
        return $this->container['localized_shopper_statement'];
    }

    /**
     * Sets localized_shopper_statement
     *
     * @param array<string,string>|null $localized_shopper_statement This field allows merchants to use dynamic shopper statement in local character sets. The local shopper statement field can be supplied in markets where localized merchant descriptors are used. Currently, Adyen only supports this in the Japanese market .The available character sets at the moment are: * Processing in Japan: **ja-Kana** The character set **ja-Kana** supports UTF-8 based Katakana and alphanumeric and special characters. Merchants should send the Katakana shopperStatement in full-width characters.  An example request would be: > {   \"shopperStatement\" : \"ADYEN - SELLER-A\",   \"localizedShopperStatement\" : {     \"ja-Kana\" : \"ADYEN - セラーA\"   } } We recommend merchants to always supply the field localizedShopperStatement in addition to the field shopperStatement.It is issuer dependent whether the localized shopper statement field is supported. In the case of non-domestic transactions (e.g. US-issued cards processed in JP) the field `shopperStatement` is used to modify the statement of the shopper. Adyen handles the complexity of ensuring the correct descriptors are assigned.
     *
     * @return self
     */
    public function setLocalizedShopperStatement($localized_shopper_statement)
    {
        if (is_null($localized_shopper_statement)) {
            throw new \InvalidArgumentException('non-nullable localized_shopper_statement cannot be null');
        }
        $this->container['localized_shopper_statement'] = $localized_shopper_statement;

        return $this;
    }

    /**
     * Gets mandate
     *
     * @return \Adyen\Model\Checkout\Mandate|null
     */
    public function getMandate()
    {
        return $this->container['mandate'];
    }

    /**
     * Sets mandate
     *
     * @param \Adyen\Model\Checkout\Mandate|null $mandate mandate
     *
     * @return self
     */
    public function setMandate($mandate)
    {
        if (is_null($mandate)) {
            throw new \InvalidArgumentException('non-nullable mandate cannot be null');
        }
        $this->container['mandate'] = $mandate;

        return $this;
    }

    /**
     * Gets mcc
     *
     * @return string|null
     */
    public function getMcc()
    {
        return $this->container['mcc'];
    }

    /**
     * Sets mcc
     *
     * @param string|null $mcc The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.
     *
     * @return self
     */
    public function setMcc($mcc)
    {
        if (is_null($mcc)) {
            throw new \InvalidArgumentException('non-nullable mcc cannot be null');
        }
        $this->container['mcc'] = $mcc;

        return $this;
    }

    /**
     * Gets merchant_account
     *
     * @return string
     */
    public function getMerchantAccount()
    {
        return $this->container['merchant_account'];
    }

    /**
     * Sets merchant_account
     *
     * @param string $merchant_account The merchant account identifier, with which you want to process the transaction.
     *
     * @return self
     */
    public function setMerchantAccount($merchant_account)
    {
        if (is_null($merchant_account)) {
            throw new \InvalidArgumentException('non-nullable merchant_account cannot be null');
        }
        $this->container['merchant_account'] = $merchant_account;

        return $this;
    }

    /**
     * Gets merchant_order_reference
     *
     * @return string|null
     */
    public function getMerchantOrderReference()
    {
        return $this->container['merchant_order_reference'];
    }

    /**
     * Sets merchant_order_reference
     *
     * @param string|null $merchant_order_reference This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle. The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations. > We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.
     *
     * @return self
     */
    public function setMerchantOrderReference($merchant_order_reference)
    {
        if (is_null($merchant_order_reference)) {
            throw new \InvalidArgumentException('non-nullable merchant_order_reference cannot be null');
        }
        $this->container['merchant_order_reference'] = $merchant_order_reference;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,string>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string>|null $metadata Metadata consists of entries, each of which includes a key and a value. Limits: * Maximum 20 key-value pairs per request. When exceeding, the \"177\" error occurs: \"Metadata size exceeds limit\". * Maximum 20 characters per key. * Maximum 80 characters per value.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets order_reference
     *
     * @return string|null
     */
    public function getOrderReference()
    {
        return $this->container['order_reference'];
    }

    /**
     * Sets order_reference
     *
     * @param string|null $order_reference When you are doing multiple partial (gift card) payments, this is the `pspReference` of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the `merchantOrderReference`instead.
     *
     * @return self
     */
    public function setOrderReference($order_reference)
    {
        if (is_null($order_reference)) {
            throw new \InvalidArgumentException('non-nullable order_reference cannot be null');
        }
        $this->container['order_reference'] = $order_reference;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string|null
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string|null $origin Required for the Web integration.  Set this parameter to the origin URL of the page that you are loading the SDK from.
     *
     * @return self
     */
    public function setOrigin($origin)
    {
        if (is_null($origin)) {
            throw new \InvalidArgumentException('non-nullable origin cannot be null');
        }
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets platform_chargeback_logic
     *
     * @return \Adyen\Model\Checkout\PlatformChargebackLogic|null
     */
    public function getPlatformChargebackLogic()
    {
        return $this->container['platform_chargeback_logic'];
    }

    /**
     * Sets platform_chargeback_logic
     *
     * @param \Adyen\Model\Checkout\PlatformChargebackLogic|null $platform_chargeback_logic platform_chargeback_logic
     *
     * @return self
     */
    public function setPlatformChargebackLogic($platform_chargeback_logic)
    {
        if (is_null($platform_chargeback_logic)) {
            throw new \InvalidArgumentException('non-nullable platform_chargeback_logic cannot be null');
        }
        $this->container['platform_chargeback_logic'] = $platform_chargeback_logic;

        return $this;
    }

    /**
     * Gets recurring_expiry
     *
     * @return string|null
     */
    public function getRecurringExpiry()
    {
        return $this->container['recurring_expiry'];
    }

    /**
     * Sets recurring_expiry
     *
     * @param string|null $recurring_expiry Date after which no further authorisations shall be performed. Only for 3D Secure 2.
     *
     * @return self
     */
    public function setRecurringExpiry($recurring_expiry)
    {
        if (is_null($recurring_expiry)) {
            throw new \InvalidArgumentException('non-nullable recurring_expiry cannot be null');
        }
        $this->container['recurring_expiry'] = $recurring_expiry;

        return $this;
    }

    /**
     * Gets recurring_frequency
     *
     * @return string|null
     */
    public function getRecurringFrequency()
    {
        return $this->container['recurring_frequency'];
    }

    /**
     * Sets recurring_frequency
     *
     * @param string|null $recurring_frequency Minimum number of days between authorisations. Only for 3D Secure 2.
     *
     * @return self
     */
    public function setRecurringFrequency($recurring_frequency)
    {
        if (is_null($recurring_frequency)) {
            throw new \InvalidArgumentException('non-nullable recurring_frequency cannot be null');
        }
        $this->container['recurring_frequency'] = $recurring_frequency;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). Maximum length: 80 characters.
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets return_url
     *
     * @return string
     */
    public function getReturnUrl()
    {
        return $this->container['return_url'];
    }

    /**
     * Sets return_url
     *
     * @param string $return_url The URL to return to in case of a redirection. The format depends on the channel. This URL can have a maximum of 1024 characters. * For web, include the protocol `http://` or `https://`. You can also include your own additional query parameters, for example, shopper ID or order reference number. Example: `https://your-company.com/checkout?shopperOrder=12xy` * For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app). Example: `my-app://` * For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters). Example: `my-app://your.package.name`
     *
     * @return self
     */
    public function setReturnUrl($return_url)
    {
        if (is_null($return_url)) {
            throw new \InvalidArgumentException('non-nullable return_url cannot be null');
        }
        if ((mb_strlen($return_url) > 8000)) {
            throw new \InvalidArgumentException('invalid length for $return_url when calling PaymentSetupRequest., must be smaller than or equal to 8000.');
        }

        $this->container['return_url'] = $return_url;

        return $this;
    }

    /**
     * Gets risk_data
     *
     * @return \Adyen\Model\Checkout\RiskData|null
     */
    public function getRiskData()
    {
        return $this->container['risk_data'];
    }

    /**
     * Sets risk_data
     *
     * @param \Adyen\Model\Checkout\RiskData|null $risk_data risk_data
     *
     * @return self
     */
    public function setRiskData($risk_data)
    {
        if (is_null($risk_data)) {
            throw new \InvalidArgumentException('non-nullable risk_data cannot be null');
        }
        $this->container['risk_data'] = $risk_data;

        return $this;
    }

    /**
     * Gets sdk_version
     *
     * @return string|null
     */
    public function getSdkVersion()
    {
        return $this->container['sdk_version'];
    }

    /**
     * Sets sdk_version
     *
     * @param string|null $sdk_version The version of the SDK you are using (for Web SDK integrations only).
     *
     * @return self
     */
    public function setSdkVersion($sdk_version)
    {
        if (is_null($sdk_version)) {
            throw new \InvalidArgumentException('non-nullable sdk_version cannot be null');
        }
        $this->container['sdk_version'] = $sdk_version;

        return $this;
    }

    /**
     * Gets session_validity
     *
     * @return string|null
     */
    public function getSessionValidity()
    {
        return $this->container['session_validity'];
    }

    /**
     * Sets session_validity
     *
     * @param string|null $session_validity The date and time until when the session remains valid, in [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format.  For example: 2020-07-18T15:42:40.428+01:00
     *
     * @return self
     */
    public function setSessionValidity($session_validity)
    {
        if (is_null($session_validity)) {
            throw new \InvalidArgumentException('non-nullable session_validity cannot be null');
        }
        $this->container['session_validity'] = $session_validity;

        return $this;
    }

    /**
     * Gets shopper_email
     *
     * @return string|null
     */
    public function getShopperEmail()
    {
        return $this->container['shopper_email'];
    }

    /**
     * Sets shopper_email
     *
     * @param string|null $shopper_email The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks. > For 3D Secure 2 transactions, schemes require `shopperEmail` for all browser-based and mobile implementations.
     *
     * @return self
     */
    public function setShopperEmail($shopper_email)
    {
        if (is_null($shopper_email)) {
            throw new \InvalidArgumentException('non-nullable shopper_email cannot be null');
        }
        $this->container['shopper_email'] = $shopper_email;

        return $this;
    }

    /**
     * Gets shopper_ip
     *
     * @return string|null
     */
    public function getShopperIp()
    {
        return $this->container['shopper_ip'];
    }

    /**
     * Sets shopper_ip
     *
     * @param string|null $shopper_ip The shopper's IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). > For 3D Secure 2 transactions, schemes require `shopperIP` for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).
     *
     * @return self
     */
    public function setShopperIp($shopper_ip)
    {
        if (is_null($shopper_ip)) {
            throw new \InvalidArgumentException('non-nullable shopper_ip cannot be null');
        }
        $this->container['shopper_ip'] = $shopper_ip;

        return $this;
    }

    /**
     * Gets shopper_interaction
     *
     * @return string|null
     */
    public function getShopperInteraction()
    {
        return $this->container['shopper_interaction'];
    }

    /**
     * Sets shopper_interaction
     *
     * @param string|null $shopper_interaction Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
     *
     * @return self
     */
    public function setShopperInteraction($shopper_interaction)
    {
        if (is_null($shopper_interaction)) {
            throw new \InvalidArgumentException('non-nullable shopper_interaction cannot be null');
        }
        $allowedValues = $this->getShopperInteractionAllowableValues();
        if (!in_array($shopper_interaction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shopper_interaction', must be one of '%s'",
                    $shopper_interaction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shopper_interaction'] = $shopper_interaction;

        return $this;
    }

    /**
     * Gets shopper_locale
     *
     * @return string|null
     */
    public function getShopperLocale()
    {
        return $this->container['shopper_locale'];
    }

    /**
     * Sets shopper_locale
     *
     * @param string|null $shopper_locale The combination of a language code and a country code to specify the language to be used in the payment.
     *
     * @return self
     */
    public function setShopperLocale($shopper_locale)
    {
        if (is_null($shopper_locale)) {
            throw new \InvalidArgumentException('non-nullable shopper_locale cannot be null');
        }
        $this->container['shopper_locale'] = $shopper_locale;

        return $this;
    }

    /**
     * Gets shopper_name
     *
     * @return \Adyen\Model\Checkout\Name|null
     */
    public function getShopperName()
    {
        return $this->container['shopper_name'];
    }

    /**
     * Sets shopper_name
     *
     * @param \Adyen\Model\Checkout\Name|null $shopper_name shopper_name
     *
     * @return self
     */
    public function setShopperName($shopper_name)
    {
        if (is_null($shopper_name)) {
            throw new \InvalidArgumentException('non-nullable shopper_name cannot be null');
        }
        $this->container['shopper_name'] = $shopper_name;

        return $this;
    }

    /**
     * Gets shopper_reference
     *
     * @return string|null
     */
    public function getShopperReference()
    {
        return $this->container['shopper_reference'];
    }

    /**
     * Sets shopper_reference
     *
     * @param string|null $shopper_reference Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.
     *
     * @return self
     */
    public function setShopperReference($shopper_reference)
    {
        if (is_null($shopper_reference)) {
            throw new \InvalidArgumentException('non-nullable shopper_reference cannot be null');
        }
        $this->container['shopper_reference'] = $shopper_reference;

        return $this;
    }

    /**
     * Gets shopper_statement
     *
     * @return string|null
     */
    public function getShopperStatement()
    {
        return $this->container['shopper_statement'];
    }

    /**
     * Sets shopper_statement
     *
     * @param string|null $shopper_statement The text to be shown on the shopper's bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /_**.
     *
     * @return self
     */
    public function setShopperStatement($shopper_statement)
    {
        if (is_null($shopper_statement)) {
            throw new \InvalidArgumentException('non-nullable shopper_statement cannot be null');
        }
        $this->container['shopper_statement'] = $shopper_statement;

        return $this;
    }

    /**
     * Gets social_security_number
     *
     * @return string|null
     */
    public function getSocialSecurityNumber()
    {
        return $this->container['social_security_number'];
    }

    /**
     * Sets social_security_number
     *
     * @param string|null $social_security_number The shopper's social security number.
     *
     * @return self
     */
    public function setSocialSecurityNumber($social_security_number)
    {
        if (is_null($social_security_number)) {
            throw new \InvalidArgumentException('non-nullable social_security_number cannot be null');
        }
        $this->container['social_security_number'] = $social_security_number;

        return $this;
    }

    /**
     * Gets splits
     *
     * @return \Adyen\Model\Checkout\Split[]|null
     */
    public function getSplits()
    {
        return $this->container['splits'];
    }

    /**
     * Sets splits
     *
     * @param \Adyen\Model\Checkout\Split[]|null $splits An array of objects specifying how the payment should be split when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information) or [Issuing](https://docs.adyen.com/issuing/add-manage-funds#split).
     *
     * @return self
     */
    public function setSplits($splits)
    {
        if (is_null($splits)) {
            throw new \InvalidArgumentException('non-nullable splits cannot be null');
        }
        $this->container['splits'] = $splits;

        return $this;
    }

    /**
     * Gets store
     *
     * @return string|null
     */
    public function getStore()
    {
        return $this->container['store'];
    }

    /**
     * Sets store
     *
     * @param string|null $store The ecommerce or point-of-sale store that is processing the payment. Used in [partner model integrations](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners#route-payments) for Adyen for Platforms.
     *
     * @return self
     */
    public function setStore($store)
    {
        if (is_null($store)) {
            throw new \InvalidArgumentException('non-nullable store cannot be null');
        }
        if ((mb_strlen($store) > 16)) {
            throw new \InvalidArgumentException('invalid length for $store when calling PaymentSetupRequest., must be smaller than or equal to 16.');
        }
        if ((mb_strlen($store) < 1)) {
            throw new \InvalidArgumentException('invalid length for $store when calling PaymentSetupRequest., must be bigger than or equal to 1.');
        }

        $this->container['store'] = $store;

        return $this;
    }

    /**
     * Gets store_payment_method
     *
     * @return bool|null
     */
    public function getStorePaymentMethod()
    {
        return $this->container['store_payment_method'];
    }

    /**
     * Sets store_payment_method
     *
     * @param bool|null $store_payment_method When true and `shopperReference` is provided, the payment details will be stored.
     *
     * @return self
     */
    public function setStorePaymentMethod($store_payment_method)
    {
        if (is_null($store_payment_method)) {
            throw new \InvalidArgumentException('non-nullable store_payment_method cannot be null');
        }
        $this->container['store_payment_method'] = $store_payment_method;

        return $this;
    }

    /**
     * Gets telephone_number
     *
     * @return string|null
     */
    public function getTelephoneNumber()
    {
        return $this->container['telephone_number'];
    }

    /**
     * Sets telephone_number
     *
     * @param string|null $telephone_number The shopper's telephone number.
     *
     * @return self
     */
    public function setTelephoneNumber($telephone_number)
    {
        if (is_null($telephone_number)) {
            throw new \InvalidArgumentException('non-nullable telephone_number cannot be null');
        }
        $this->container['telephone_number'] = $telephone_number;

        return $this;
    }

    /**
     * Gets three_ds_authentication_only
     *
     * @return bool|null
     * @deprecated
     */
    public function getThreeDsAuthenticationOnly()
    {
        return $this->container['three_ds_authentication_only'];
    }

    /**
     * Sets three_ds_authentication_only
     *
     * @param bool|null $three_ds_authentication_only If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.
     *
     * @return self
     * @deprecated
     */
    public function setThreeDsAuthenticationOnly($three_ds_authentication_only)
    {
        if (is_null($three_ds_authentication_only)) {
            throw new \InvalidArgumentException('non-nullable three_ds_authentication_only cannot be null');
        }
        $this->container['three_ds_authentication_only'] = $three_ds_authentication_only;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token The token obtained when initializing the SDK.  > This parameter is required for iOS and Android; not required for Web.
     *
     * @return self
     */
    public function setToken($token)
    {
        if (is_null($token)) {
            throw new \InvalidArgumentException('non-nullable token cannot be null');
        }
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets trusted_shopper
     *
     * @return bool|null
     */
    public function getTrustedShopper()
    {
        return $this->container['trusted_shopper'];
    }

    /**
     * Sets trusted_shopper
     *
     * @param bool|null $trusted_shopper Set to true if the payment should be routed to a trusted MID.
     *
     * @return self
     */
    public function setTrustedShopper($trusted_shopper)
    {
        if (is_null($trusted_shopper)) {
            throw new \InvalidArgumentException('non-nullable trusted_shopper cannot be null');
        }
        $this->container['trusted_shopper'] = $trusted_shopper;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


