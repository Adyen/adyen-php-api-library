<?php

/**
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 70
 * Contact: developer-experience@adyen.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Adyen\Model\Checkout;

use \ArrayAccess;
use Adyen\Model\Checkout\ObjectSerializer;

/**
 * AdditionalDataLodging Class Doc Comment
 *
 * @category Class
 * @package  Adyen
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AdditionalDataLodging implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AdditionalDataLodging';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'lodging_check_in_date' => 'string',
        'lodging_check_out_date' => 'string',
        'lodging_customer_service_toll_free_number' => 'string',
        'lodging_fire_safety_act_indicator' => 'string',
        'lodging_folio_cash_advances' => 'string',
        'lodging_folio_number' => 'string',
        'lodging_food_beverage_charges' => 'string',
        'lodging_no_show_indicator' => 'string',
        'lodging_prepaid_expenses' => 'string',
        'lodging_property_phone_number' => 'string',
        'lodging_room1_number_of_nights' => 'string',
        'lodging_room1_rate' => 'string',
        'lodging_room1_tax' => 'string',
        'lodging_total_room_tax' => 'string',
        'lodging_total_tax' => 'string',
        'travel_entertainment_auth_data_duration' => 'string',
        'travel_entertainment_auth_data_market' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'lodging_check_in_date' => null,
        'lodging_check_out_date' => null,
        'lodging_customer_service_toll_free_number' => null,
        'lodging_fire_safety_act_indicator' => null,
        'lodging_folio_cash_advances' => null,
        'lodging_folio_number' => null,
        'lodging_food_beverage_charges' => null,
        'lodging_no_show_indicator' => null,
        'lodging_prepaid_expenses' => null,
        'lodging_property_phone_number' => null,
        'lodging_room1_number_of_nights' => null,
        'lodging_room1_rate' => null,
        'lodging_room1_tax' => null,
        'lodging_total_room_tax' => null,
        'lodging_total_tax' => null,
        'travel_entertainment_auth_data_duration' => null,
        'travel_entertainment_auth_data_market' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'lodging_check_in_date' => false,
		'lodging_check_out_date' => false,
		'lodging_customer_service_toll_free_number' => false,
		'lodging_fire_safety_act_indicator' => false,
		'lodging_folio_cash_advances' => false,
		'lodging_folio_number' => false,
		'lodging_food_beverage_charges' => false,
		'lodging_no_show_indicator' => false,
		'lodging_prepaid_expenses' => false,
		'lodging_property_phone_number' => false,
		'lodging_room1_number_of_nights' => false,
		'lodging_room1_rate' => false,
		'lodging_room1_tax' => false,
		'lodging_total_room_tax' => false,
		'lodging_total_tax' => false,
		'travel_entertainment_auth_data_duration' => false,
		'travel_entertainment_auth_data_market' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lodging_check_in_date' => 'lodging.checkInDate',
        'lodging_check_out_date' => 'lodging.checkOutDate',
        'lodging_customer_service_toll_free_number' => 'lodging.customerServiceTollFreeNumber',
        'lodging_fire_safety_act_indicator' => 'lodging.fireSafetyActIndicator',
        'lodging_folio_cash_advances' => 'lodging.folioCashAdvances',
        'lodging_folio_number' => 'lodging.folioNumber',
        'lodging_food_beverage_charges' => 'lodging.foodBeverageCharges',
        'lodging_no_show_indicator' => 'lodging.noShowIndicator',
        'lodging_prepaid_expenses' => 'lodging.prepaidExpenses',
        'lodging_property_phone_number' => 'lodging.propertyPhoneNumber',
        'lodging_room1_number_of_nights' => 'lodging.room1.numberOfNights',
        'lodging_room1_rate' => 'lodging.room1.rate',
        'lodging_room1_tax' => 'lodging.room1.tax',
        'lodging_total_room_tax' => 'lodging.totalRoomTax',
        'lodging_total_tax' => 'lodging.totalTax',
        'travel_entertainment_auth_data_duration' => 'travelEntertainmentAuthData.duration',
        'travel_entertainment_auth_data_market' => 'travelEntertainmentAuthData.market'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lodging_check_in_date' => 'setLodgingCheckInDate',
        'lodging_check_out_date' => 'setLodgingCheckOutDate',
        'lodging_customer_service_toll_free_number' => 'setLodgingCustomerServiceTollFreeNumber',
        'lodging_fire_safety_act_indicator' => 'setLodgingFireSafetyActIndicator',
        'lodging_folio_cash_advances' => 'setLodgingFolioCashAdvances',
        'lodging_folio_number' => 'setLodgingFolioNumber',
        'lodging_food_beverage_charges' => 'setLodgingFoodBeverageCharges',
        'lodging_no_show_indicator' => 'setLodgingNoShowIndicator',
        'lodging_prepaid_expenses' => 'setLodgingPrepaidExpenses',
        'lodging_property_phone_number' => 'setLodgingPropertyPhoneNumber',
        'lodging_room1_number_of_nights' => 'setLodgingRoom1NumberOfNights',
        'lodging_room1_rate' => 'setLodgingRoom1Rate',
        'lodging_room1_tax' => 'setLodgingRoom1Tax',
        'lodging_total_room_tax' => 'setLodgingTotalRoomTax',
        'lodging_total_tax' => 'setLodgingTotalTax',
        'travel_entertainment_auth_data_duration' => 'setTravelEntertainmentAuthDataDuration',
        'travel_entertainment_auth_data_market' => 'setTravelEntertainmentAuthDataMarket'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lodging_check_in_date' => 'getLodgingCheckInDate',
        'lodging_check_out_date' => 'getLodgingCheckOutDate',
        'lodging_customer_service_toll_free_number' => 'getLodgingCustomerServiceTollFreeNumber',
        'lodging_fire_safety_act_indicator' => 'getLodgingFireSafetyActIndicator',
        'lodging_folio_cash_advances' => 'getLodgingFolioCashAdvances',
        'lodging_folio_number' => 'getLodgingFolioNumber',
        'lodging_food_beverage_charges' => 'getLodgingFoodBeverageCharges',
        'lodging_no_show_indicator' => 'getLodgingNoShowIndicator',
        'lodging_prepaid_expenses' => 'getLodgingPrepaidExpenses',
        'lodging_property_phone_number' => 'getLodgingPropertyPhoneNumber',
        'lodging_room1_number_of_nights' => 'getLodgingRoom1NumberOfNights',
        'lodging_room1_rate' => 'getLodgingRoom1Rate',
        'lodging_room1_tax' => 'getLodgingRoom1Tax',
        'lodging_total_room_tax' => 'getLodgingTotalRoomTax',
        'lodging_total_tax' => 'getLodgingTotalTax',
        'travel_entertainment_auth_data_duration' => 'getTravelEntertainmentAuthDataDuration',
        'travel_entertainment_auth_data_market' => 'getTravelEntertainmentAuthDataMarket'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('lodging_check_in_date', $data ?? [], null);
        $this->setIfExists('lodging_check_out_date', $data ?? [], null);
        $this->setIfExists('lodging_customer_service_toll_free_number', $data ?? [], null);
        $this->setIfExists('lodging_fire_safety_act_indicator', $data ?? [], null);
        $this->setIfExists('lodging_folio_cash_advances', $data ?? [], null);
        $this->setIfExists('lodging_folio_number', $data ?? [], null);
        $this->setIfExists('lodging_food_beverage_charges', $data ?? [], null);
        $this->setIfExists('lodging_no_show_indicator', $data ?? [], null);
        $this->setIfExists('lodging_prepaid_expenses', $data ?? [], null);
        $this->setIfExists('lodging_property_phone_number', $data ?? [], null);
        $this->setIfExists('lodging_room1_number_of_nights', $data ?? [], null);
        $this->setIfExists('lodging_room1_rate', $data ?? [], null);
        $this->setIfExists('lodging_room1_tax', $data ?? [], null);
        $this->setIfExists('lodging_total_room_tax', $data ?? [], null);
        $this->setIfExists('lodging_total_tax', $data ?? [], null);
        $this->setIfExists('travel_entertainment_auth_data_duration', $data ?? [], null);
        $this->setIfExists('travel_entertainment_auth_data_market', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lodging_check_in_date
     *
     * @return string|null
     */
    public function getLodgingCheckInDate()
    {
        return $this->container['lodging_check_in_date'];
    }

    /**
     * Sets lodging_check_in_date
     *
     * @param string|null $lodging_check_in_date The arrival date. * Date format: `yyyyMMdd`
     *
     * @return self
     */
    public function setLodgingCheckInDate($lodging_check_in_date)
    {
        if (is_null($lodging_check_in_date)) {
            throw new \InvalidArgumentException('non-nullable lodging_check_in_date cannot be null');
        }
        $this->container['lodging_check_in_date'] = $lodging_check_in_date;

        return $this;
    }

    /**
     * Gets lodging_check_out_date
     *
     * @return string|null
     */
    public function getLodgingCheckOutDate()
    {
        return $this->container['lodging_check_out_date'];
    }

    /**
     * Sets lodging_check_out_date
     *
     * @param string|null $lodging_check_out_date The departure date. * Date format: `yyyyMMdd`
     *
     * @return self
     */
    public function setLodgingCheckOutDate($lodging_check_out_date)
    {
        if (is_null($lodging_check_out_date)) {
            throw new \InvalidArgumentException('non-nullable lodging_check_out_date cannot be null');
        }
        $this->container['lodging_check_out_date'] = $lodging_check_out_date;

        return $this;
    }

    /**
     * Gets lodging_customer_service_toll_free_number
     *
     * @return string|null
     */
    public function getLodgingCustomerServiceTollFreeNumber()
    {
        return $this->container['lodging_customer_service_toll_free_number'];
    }

    /**
     * Sets lodging_customer_service_toll_free_number
     *
     * @param string|null $lodging_customer_service_toll_free_number The toll free phone number for the hotel/lodgings. * Format: Alphanumeric * maxLength: 17
     *
     * @return self
     */
    public function setLodgingCustomerServiceTollFreeNumber($lodging_customer_service_toll_free_number)
    {
        if (is_null($lodging_customer_service_toll_free_number)) {
            throw new \InvalidArgumentException('non-nullable lodging_customer_service_toll_free_number cannot be null');
        }
        $this->container['lodging_customer_service_toll_free_number'] = $lodging_customer_service_toll_free_number;

        return $this;
    }

    /**
     * Gets lodging_fire_safety_act_indicator
     *
     * @return string|null
     */
    public function getLodgingFireSafetyActIndicator()
    {
        return $this->container['lodging_fire_safety_act_indicator'];
    }

    /**
     * Sets lodging_fire_safety_act_indicator
     *
     * @param string|null $lodging_fire_safety_act_indicator Identifies that the facility complies with the Hotel and Motel Fire Safety Act of 1990. Values can be: 'Y' or 'N'. * Format: Alphabetic * maxLength: 1
     *
     * @return self
     */
    public function setLodgingFireSafetyActIndicator($lodging_fire_safety_act_indicator)
    {
        if (is_null($lodging_fire_safety_act_indicator)) {
            throw new \InvalidArgumentException('non-nullable lodging_fire_safety_act_indicator cannot be null');
        }
        $this->container['lodging_fire_safety_act_indicator'] = $lodging_fire_safety_act_indicator;

        return $this;
    }

    /**
     * Gets lodging_folio_cash_advances
     *
     * @return string|null
     */
    public function getLodgingFolioCashAdvances()
    {
        return $this->container['lodging_folio_cash_advances'];
    }

    /**
     * Sets lodging_folio_cash_advances
     *
     * @param string|null $lodging_folio_cash_advances The folio cash advances. * Format: Numeric * maxLength: 12
     *
     * @return self
     */
    public function setLodgingFolioCashAdvances($lodging_folio_cash_advances)
    {
        if (is_null($lodging_folio_cash_advances)) {
            throw new \InvalidArgumentException('non-nullable lodging_folio_cash_advances cannot be null');
        }
        $this->container['lodging_folio_cash_advances'] = $lodging_folio_cash_advances;

        return $this;
    }

    /**
     * Gets lodging_folio_number
     *
     * @return string|null
     */
    public function getLodgingFolioNumber()
    {
        return $this->container['lodging_folio_number'];
    }

    /**
     * Sets lodging_folio_number
     *
     * @param string|null $lodging_folio_number Card acceptor’s internal invoice or billing ID reference number. * Format: Alphanumeric * maxLength: 25
     *
     * @return self
     */
    public function setLodgingFolioNumber($lodging_folio_number)
    {
        if (is_null($lodging_folio_number)) {
            throw new \InvalidArgumentException('non-nullable lodging_folio_number cannot be null');
        }
        $this->container['lodging_folio_number'] = $lodging_folio_number;

        return $this;
    }

    /**
     * Gets lodging_food_beverage_charges
     *
     * @return string|null
     */
    public function getLodgingFoodBeverageCharges()
    {
        return $this->container['lodging_food_beverage_charges'];
    }

    /**
     * Sets lodging_food_beverage_charges
     *
     * @param string|null $lodging_food_beverage_charges Any charges for food and beverages associated with the booking. * Format: Numeric * maxLength: 12
     *
     * @return self
     */
    public function setLodgingFoodBeverageCharges($lodging_food_beverage_charges)
    {
        if (is_null($lodging_food_beverage_charges)) {
            throw new \InvalidArgumentException('non-nullable lodging_food_beverage_charges cannot be null');
        }
        $this->container['lodging_food_beverage_charges'] = $lodging_food_beverage_charges;

        return $this;
    }

    /**
     * Gets lodging_no_show_indicator
     *
     * @return string|null
     */
    public function getLodgingNoShowIndicator()
    {
        return $this->container['lodging_no_show_indicator'];
    }

    /**
     * Sets lodging_no_show_indicator
     *
     * @param string|null $lodging_no_show_indicator Indicates if the customer was a \"no-show\" (neither keeps nor cancels their booking).  Value should be Y or N. * Format: Numeric * maxLength: 1
     *
     * @return self
     */
    public function setLodgingNoShowIndicator($lodging_no_show_indicator)
    {
        if (is_null($lodging_no_show_indicator)) {
            throw new \InvalidArgumentException('non-nullable lodging_no_show_indicator cannot be null');
        }
        $this->container['lodging_no_show_indicator'] = $lodging_no_show_indicator;

        return $this;
    }

    /**
     * Gets lodging_prepaid_expenses
     *
     * @return string|null
     */
    public function getLodgingPrepaidExpenses()
    {
        return $this->container['lodging_prepaid_expenses'];
    }

    /**
     * Sets lodging_prepaid_expenses
     *
     * @param string|null $lodging_prepaid_expenses Prepaid expenses for the booking. * Format: Numeric * maxLength: 12
     *
     * @return self
     */
    public function setLodgingPrepaidExpenses($lodging_prepaid_expenses)
    {
        if (is_null($lodging_prepaid_expenses)) {
            throw new \InvalidArgumentException('non-nullable lodging_prepaid_expenses cannot be null');
        }
        $this->container['lodging_prepaid_expenses'] = $lodging_prepaid_expenses;

        return $this;
    }

    /**
     * Gets lodging_property_phone_number
     *
     * @return string|null
     */
    public function getLodgingPropertyPhoneNumber()
    {
        return $this->container['lodging_property_phone_number'];
    }

    /**
     * Sets lodging_property_phone_number
     *
     * @param string|null $lodging_property_phone_number Identifies specific lodging property location by its local phone number. * Format: Alphanumeric * maxLength: 17
     *
     * @return self
     */
    public function setLodgingPropertyPhoneNumber($lodging_property_phone_number)
    {
        if (is_null($lodging_property_phone_number)) {
            throw new \InvalidArgumentException('non-nullable lodging_property_phone_number cannot be null');
        }
        $this->container['lodging_property_phone_number'] = $lodging_property_phone_number;

        return $this;
    }

    /**
     * Gets lodging_room1_number_of_nights
     *
     * @return string|null
     */
    public function getLodgingRoom1NumberOfNights()
    {
        return $this->container['lodging_room1_number_of_nights'];
    }

    /**
     * Sets lodging_room1_number_of_nights
     *
     * @param string|null $lodging_room1_number_of_nights Total number of nights the room will be rented. * Format: Numeric * maxLength: 4
     *
     * @return self
     */
    public function setLodgingRoom1NumberOfNights($lodging_room1_number_of_nights)
    {
        if (is_null($lodging_room1_number_of_nights)) {
            throw new \InvalidArgumentException('non-nullable lodging_room1_number_of_nights cannot be null');
        }
        $this->container['lodging_room1_number_of_nights'] = $lodging_room1_number_of_nights;

        return $this;
    }

    /**
     * Gets lodging_room1_rate
     *
     * @return string|null
     */
    public function getLodgingRoom1Rate()
    {
        return $this->container['lodging_room1_rate'];
    }

    /**
     * Sets lodging_room1_rate
     *
     * @param string|null $lodging_room1_rate The rate of the room. * Format: Numeric * maxLength: 12
     *
     * @return self
     */
    public function setLodgingRoom1Rate($lodging_room1_rate)
    {
        if (is_null($lodging_room1_rate)) {
            throw new \InvalidArgumentException('non-nullable lodging_room1_rate cannot be null');
        }
        $this->container['lodging_room1_rate'] = $lodging_room1_rate;

        return $this;
    }

    /**
     * Gets lodging_room1_tax
     *
     * @return string|null
     */
    public function getLodgingRoom1Tax()
    {
        return $this->container['lodging_room1_tax'];
    }

    /**
     * Sets lodging_room1_tax
     *
     * @param string|null $lodging_room1_tax The total amount of tax to be paid. * Format: Numeric * maxLength: 12
     *
     * @return self
     */
    public function setLodgingRoom1Tax($lodging_room1_tax)
    {
        if (is_null($lodging_room1_tax)) {
            throw new \InvalidArgumentException('non-nullable lodging_room1_tax cannot be null');
        }
        $this->container['lodging_room1_tax'] = $lodging_room1_tax;

        return $this;
    }

    /**
     * Gets lodging_total_room_tax
     *
     * @return string|null
     */
    public function getLodgingTotalRoomTax()
    {
        return $this->container['lodging_total_room_tax'];
    }

    /**
     * Sets lodging_total_room_tax
     *
     * @param string|null $lodging_total_room_tax Total room tax amount. * Format: Numeric * maxLength: 12
     *
     * @return self
     */
    public function setLodgingTotalRoomTax($lodging_total_room_tax)
    {
        if (is_null($lodging_total_room_tax)) {
            throw new \InvalidArgumentException('non-nullable lodging_total_room_tax cannot be null');
        }
        $this->container['lodging_total_room_tax'] = $lodging_total_room_tax;

        return $this;
    }

    /**
     * Gets lodging_total_tax
     *
     * @return string|null
     */
    public function getLodgingTotalTax()
    {
        return $this->container['lodging_total_tax'];
    }

    /**
     * Sets lodging_total_tax
     *
     * @param string|null $lodging_total_tax Total tax amount. * Format: Numeric * maxLength: 12
     *
     * @return self
     */
    public function setLodgingTotalTax($lodging_total_tax)
    {
        if (is_null($lodging_total_tax)) {
            throw new \InvalidArgumentException('non-nullable lodging_total_tax cannot be null');
        }
        $this->container['lodging_total_tax'] = $lodging_total_tax;

        return $this;
    }

    /**
     * Gets travel_entertainment_auth_data_duration
     *
     * @return string|null
     */
    public function getTravelEntertainmentAuthDataDuration()
    {
        return $this->container['travel_entertainment_auth_data_duration'];
    }

    /**
     * Sets travel_entertainment_auth_data_duration
     *
     * @param string|null $travel_entertainment_auth_data_duration Number of nights. This should be included in the auth message. * Format: Numeric * maxLength: 2
     *
     * @return self
     */
    public function setTravelEntertainmentAuthDataDuration($travel_entertainment_auth_data_duration)
    {
        if (is_null($travel_entertainment_auth_data_duration)) {
            throw new \InvalidArgumentException('non-nullable travel_entertainment_auth_data_duration cannot be null');
        }
        $this->container['travel_entertainment_auth_data_duration'] = $travel_entertainment_auth_data_duration;

        return $this;
    }

    /**
     * Gets travel_entertainment_auth_data_market
     *
     * @return string|null
     */
    public function getTravelEntertainmentAuthDataMarket()
    {
        return $this->container['travel_entertainment_auth_data_market'];
    }

    /**
     * Sets travel_entertainment_auth_data_market
     *
     * @param string|null $travel_entertainment_auth_data_market Indicates what market-specific dataset will be submitted or is being submitted. Value should be \"H\" for Hotel. This should be included in the auth message.  * Format: Alphanumeric * maxLength: 1
     *
     * @return self
     */
    public function setTravelEntertainmentAuthDataMarket($travel_entertainment_auth_data_market)
    {
        if (is_null($travel_entertainment_auth_data_market)) {
            throw new \InvalidArgumentException('non-nullable travel_entertainment_auth_data_market cannot be null');
        }
        $this->container['travel_entertainment_auth_data_market'] = $travel_entertainment_auth_data_market;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


