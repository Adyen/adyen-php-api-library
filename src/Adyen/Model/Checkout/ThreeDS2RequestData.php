<?php

/**
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 70
 * Contact: developer-experience@adyen.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Adyen\Model\Checkout;

use \ArrayAccess;
use Adyen\Model\Checkout\ObjectSerializer;

/**
 * ThreeDS2RequestData Class Doc Comment
 *
 * @category Class
 * @package  Adyen
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ThreeDS2RequestData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ThreeDS2RequestData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'acct_info' => '\Adyen\Model\Checkout\AcctInfo',
        'acct_type' => 'string',
        'acquirer_bin' => 'string',
        'acquirer_merchant_id' => 'string',
        'addr_match' => 'string',
        'authentication_only' => 'bool',
        'challenge_indicator' => 'string',
        'device_channel' => 'string',
        'device_render_options' => '\Adyen\Model\Checkout\DeviceRenderOptions',
        'home_phone' => '\Adyen\Model\Checkout\Phone',
        'mcc' => 'string',
        'merchant_name' => 'string',
        'message_version' => 'string',
        'mobile_phone' => '\Adyen\Model\Checkout\Phone',
        'notification_url' => 'string',
        'pay_token_ind' => 'bool',
        'payment_authentication_use_case' => 'string',
        'purchase_instal_data' => 'string',
        'recurring_expiry' => 'string',
        'recurring_frequency' => 'string',
        'sdk_app_id' => 'string',
        'sdk_enc_data' => 'string',
        'sdk_ephem_pub_key' => '\Adyen\Model\Checkout\SDKEphemPubKey',
        'sdk_max_timeout' => 'int',
        'sdk_reference_number' => 'string',
        'sdk_trans_id' => 'string',
        'sdk_version' => 'string',
        'three_ds_comp_ind' => 'string',
        'three_ds_requestor_authentication_ind' => 'string',
        'three_ds_requestor_authentication_info' => '\Adyen\Model\Checkout\ThreeDSRequestorAuthenticationInfo',
        'three_ds_requestor_challenge_ind' => 'string',
        'three_ds_requestor_id' => 'string',
        'three_ds_requestor_name' => 'string',
        'three_ds_requestor_prior_authentication_info' => '\Adyen\Model\Checkout\ThreeDSRequestorPriorAuthenticationInfo',
        'three_ds_requestor_url' => 'string',
        'trans_type' => 'string',
        'transaction_type' => 'string',
        'white_list_status' => 'string',
        'work_phone' => '\Adyen\Model\Checkout\Phone'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'acct_info' => null,
        'acct_type' => null,
        'acquirer_bin' => null,
        'acquirer_merchant_id' => null,
        'addr_match' => null,
        'authentication_only' => null,
        'challenge_indicator' => null,
        'device_channel' => null,
        'device_render_options' => null,
        'home_phone' => null,
        'mcc' => null,
        'merchant_name' => null,
        'message_version' => null,
        'mobile_phone' => null,
        'notification_url' => null,
        'pay_token_ind' => null,
        'payment_authentication_use_case' => null,
        'purchase_instal_data' => null,
        'recurring_expiry' => null,
        'recurring_frequency' => null,
        'sdk_app_id' => null,
        'sdk_enc_data' => null,
        'sdk_ephem_pub_key' => null,
        'sdk_max_timeout' => 'int32',
        'sdk_reference_number' => null,
        'sdk_trans_id' => null,
        'sdk_version' => null,
        'three_ds_comp_ind' => null,
        'three_ds_requestor_authentication_ind' => null,
        'three_ds_requestor_authentication_info' => null,
        'three_ds_requestor_challenge_ind' => null,
        'three_ds_requestor_id' => null,
        'three_ds_requestor_name' => null,
        'three_ds_requestor_prior_authentication_info' => null,
        'three_ds_requestor_url' => null,
        'trans_type' => null,
        'transaction_type' => null,
        'white_list_status' => null,
        'work_phone' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'acct_info' => false,
        'acct_type' => false,
        'acquirer_bin' => false,
        'acquirer_merchant_id' => false,
        'addr_match' => false,
        'authentication_only' => false,
        'challenge_indicator' => false,
        'device_channel' => false,
        'device_render_options' => false,
        'home_phone' => false,
        'mcc' => false,
        'merchant_name' => false,
        'message_version' => false,
        'mobile_phone' => false,
        'notification_url' => false,
        'pay_token_ind' => false,
        'payment_authentication_use_case' => false,
        'purchase_instal_data' => false,
        'recurring_expiry' => false,
        'recurring_frequency' => false,
        'sdk_app_id' => false,
        'sdk_enc_data' => false,
        'sdk_ephem_pub_key' => false,
        'sdk_max_timeout' => true,
        'sdk_reference_number' => false,
        'sdk_trans_id' => false,
        'sdk_version' => false,
        'three_ds_comp_ind' => false,
        'three_ds_requestor_authentication_ind' => false,
        'three_ds_requestor_authentication_info' => false,
        'three_ds_requestor_challenge_ind' => false,
        'three_ds_requestor_id' => false,
        'three_ds_requestor_name' => false,
        'three_ds_requestor_prior_authentication_info' => false,
        'three_ds_requestor_url' => false,
        'trans_type' => false,
        'transaction_type' => false,
        'white_list_status' => false,
        'work_phone' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'acct_info' => 'acctInfo',
        'acct_type' => 'acctType',
        'acquirer_bin' => 'acquirerBIN',
        'acquirer_merchant_id' => 'acquirerMerchantID',
        'addr_match' => 'addrMatch',
        'authentication_only' => 'authenticationOnly',
        'challenge_indicator' => 'challengeIndicator',
        'device_channel' => 'deviceChannel',
        'device_render_options' => 'deviceRenderOptions',
        'home_phone' => 'homePhone',
        'mcc' => 'mcc',
        'merchant_name' => 'merchantName',
        'message_version' => 'messageVersion',
        'mobile_phone' => 'mobilePhone',
        'notification_url' => 'notificationURL',
        'pay_token_ind' => 'payTokenInd',
        'payment_authentication_use_case' => 'paymentAuthenticationUseCase',
        'purchase_instal_data' => 'purchaseInstalData',
        'recurring_expiry' => 'recurringExpiry',
        'recurring_frequency' => 'recurringFrequency',
        'sdk_app_id' => 'sdkAppID',
        'sdk_enc_data' => 'sdkEncData',
        'sdk_ephem_pub_key' => 'sdkEphemPubKey',
        'sdk_max_timeout' => 'sdkMaxTimeout',
        'sdk_reference_number' => 'sdkReferenceNumber',
        'sdk_trans_id' => 'sdkTransID',
        'sdk_version' => 'sdkVersion',
        'three_ds_comp_ind' => 'threeDSCompInd',
        'three_ds_requestor_authentication_ind' => 'threeDSRequestorAuthenticationInd',
        'three_ds_requestor_authentication_info' => 'threeDSRequestorAuthenticationInfo',
        'three_ds_requestor_challenge_ind' => 'threeDSRequestorChallengeInd',
        'three_ds_requestor_id' => 'threeDSRequestorID',
        'three_ds_requestor_name' => 'threeDSRequestorName',
        'three_ds_requestor_prior_authentication_info' => 'threeDSRequestorPriorAuthenticationInfo',
        'three_ds_requestor_url' => 'threeDSRequestorURL',
        'trans_type' => 'transType',
        'transaction_type' => 'transactionType',
        'white_list_status' => 'whiteListStatus',
        'work_phone' => 'workPhone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'acct_info' => 'setAcctInfo',
        'acct_type' => 'setAcctType',
        'acquirer_bin' => 'setAcquirerBin',
        'acquirer_merchant_id' => 'setAcquirerMerchantId',
        'addr_match' => 'setAddrMatch',
        'authentication_only' => 'setAuthenticationOnly',
        'challenge_indicator' => 'setChallengeIndicator',
        'device_channel' => 'setDeviceChannel',
        'device_render_options' => 'setDeviceRenderOptions',
        'home_phone' => 'setHomePhone',
        'mcc' => 'setMcc',
        'merchant_name' => 'setMerchantName',
        'message_version' => 'setMessageVersion',
        'mobile_phone' => 'setMobilePhone',
        'notification_url' => 'setNotificationUrl',
        'pay_token_ind' => 'setPayTokenInd',
        'payment_authentication_use_case' => 'setPaymentAuthenticationUseCase',
        'purchase_instal_data' => 'setPurchaseInstalData',
        'recurring_expiry' => 'setRecurringExpiry',
        'recurring_frequency' => 'setRecurringFrequency',
        'sdk_app_id' => 'setSdkAppId',
        'sdk_enc_data' => 'setSdkEncData',
        'sdk_ephem_pub_key' => 'setSdkEphemPubKey',
        'sdk_max_timeout' => 'setSdkMaxTimeout',
        'sdk_reference_number' => 'setSdkReferenceNumber',
        'sdk_trans_id' => 'setSdkTransId',
        'sdk_version' => 'setSdkVersion',
        'three_ds_comp_ind' => 'setThreeDsCompInd',
        'three_ds_requestor_authentication_ind' => 'setThreeDsRequestorAuthenticationInd',
        'three_ds_requestor_authentication_info' => 'setThreeDsRequestorAuthenticationInfo',
        'three_ds_requestor_challenge_ind' => 'setThreeDsRequestorChallengeInd',
        'three_ds_requestor_id' => 'setThreeDsRequestorId',
        'three_ds_requestor_name' => 'setThreeDsRequestorName',
        'three_ds_requestor_prior_authentication_info' => 'setThreeDsRequestorPriorAuthenticationInfo',
        'three_ds_requestor_url' => 'setThreeDsRequestorUrl',
        'trans_type' => 'setTransType',
        'transaction_type' => 'setTransactionType',
        'white_list_status' => 'setWhiteListStatus',
        'work_phone' => 'setWorkPhone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'acct_info' => 'getAcctInfo',
        'acct_type' => 'getAcctType',
        'acquirer_bin' => 'getAcquirerBin',
        'acquirer_merchant_id' => 'getAcquirerMerchantId',
        'addr_match' => 'getAddrMatch',
        'authentication_only' => 'getAuthenticationOnly',
        'challenge_indicator' => 'getChallengeIndicator',
        'device_channel' => 'getDeviceChannel',
        'device_render_options' => 'getDeviceRenderOptions',
        'home_phone' => 'getHomePhone',
        'mcc' => 'getMcc',
        'merchant_name' => 'getMerchantName',
        'message_version' => 'getMessageVersion',
        'mobile_phone' => 'getMobilePhone',
        'notification_url' => 'getNotificationUrl',
        'pay_token_ind' => 'getPayTokenInd',
        'payment_authentication_use_case' => 'getPaymentAuthenticationUseCase',
        'purchase_instal_data' => 'getPurchaseInstalData',
        'recurring_expiry' => 'getRecurringExpiry',
        'recurring_frequency' => 'getRecurringFrequency',
        'sdk_app_id' => 'getSdkAppId',
        'sdk_enc_data' => 'getSdkEncData',
        'sdk_ephem_pub_key' => 'getSdkEphemPubKey',
        'sdk_max_timeout' => 'getSdkMaxTimeout',
        'sdk_reference_number' => 'getSdkReferenceNumber',
        'sdk_trans_id' => 'getSdkTransId',
        'sdk_version' => 'getSdkVersion',
        'three_ds_comp_ind' => 'getThreeDsCompInd',
        'three_ds_requestor_authentication_ind' => 'getThreeDsRequestorAuthenticationInd',
        'three_ds_requestor_authentication_info' => 'getThreeDsRequestorAuthenticationInfo',
        'three_ds_requestor_challenge_ind' => 'getThreeDsRequestorChallengeInd',
        'three_ds_requestor_id' => 'getThreeDsRequestorId',
        'three_ds_requestor_name' => 'getThreeDsRequestorName',
        'three_ds_requestor_prior_authentication_info' => 'getThreeDsRequestorPriorAuthenticationInfo',
        'three_ds_requestor_url' => 'getThreeDsRequestorUrl',
        'trans_type' => 'getTransType',
        'transaction_type' => 'getTransactionType',
        'white_list_status' => 'getWhiteListStatus',
        'work_phone' => 'getWorkPhone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ACCT_TYPE__01 = '01';
    public const ACCT_TYPE__02 = '02';
    public const ACCT_TYPE__03 = '03';
    public const ADDR_MATCH_Y = 'Y';
    public const ADDR_MATCH_N = 'N';
    public const CHALLENGE_INDICATOR_NO_PREFERENCE = 'noPreference';
    public const CHALLENGE_INDICATOR_REQUEST_NO_CHALLENGE = 'requestNoChallenge';
    public const CHALLENGE_INDICATOR_REQUEST_CHALLENGE = 'requestChallenge';
    public const CHALLENGE_INDICATOR_REQUEST_CHALLENGE_AS_MANDATE = 'requestChallengeAsMandate';
    public const THREE_DS_REQUESTOR_CHALLENGE_IND__01 = '01';
    public const THREE_DS_REQUESTOR_CHALLENGE_IND__02 = '02';
    public const THREE_DS_REQUESTOR_CHALLENGE_IND__03 = '03';
    public const THREE_DS_REQUESTOR_CHALLENGE_IND__04 = '04';
    public const THREE_DS_REQUESTOR_CHALLENGE_IND__05 = '05';
    public const THREE_DS_REQUESTOR_CHALLENGE_IND__06 = '06';
    public const TRANS_TYPE__01 = '01';
    public const TRANS_TYPE__03 = '03';
    public const TRANS_TYPE__10 = '10';
    public const TRANS_TYPE__11 = '11';
    public const TRANS_TYPE__28 = '28';
    public const TRANSACTION_TYPE_GOODS_OR_SERVICE_PURCHASE = 'goodsOrServicePurchase';
    public const TRANSACTION_TYPE_CHECK_ACCEPTANCE = 'checkAcceptance';
    public const TRANSACTION_TYPE_ACCOUNT_FUNDING = 'accountFunding';
    public const TRANSACTION_TYPE_QUASI_CASH_TRANSACTION = 'quasiCashTransaction';
    public const TRANSACTION_TYPE_PREPAID_ACTIVATION_AND_LOAD = 'prepaidActivationAndLoad';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAcctTypeAllowableValues()
    {
        return [
            self::ACCT_TYPE__01,
            self::ACCT_TYPE__02,
            self::ACCT_TYPE__03,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddrMatchAllowableValues()
    {
        return [
            self::ADDR_MATCH_Y,
            self::ADDR_MATCH_N,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChallengeIndicatorAllowableValues()
    {
        return [
            self::CHALLENGE_INDICATOR_NO_PREFERENCE,
            self::CHALLENGE_INDICATOR_REQUEST_NO_CHALLENGE,
            self::CHALLENGE_INDICATOR_REQUEST_CHALLENGE,
            self::CHALLENGE_INDICATOR_REQUEST_CHALLENGE_AS_MANDATE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getThreeDsRequestorChallengeIndAllowableValues()
    {
        return [
            self::THREE_DS_REQUESTOR_CHALLENGE_IND__01,
            self::THREE_DS_REQUESTOR_CHALLENGE_IND__02,
            self::THREE_DS_REQUESTOR_CHALLENGE_IND__03,
            self::THREE_DS_REQUESTOR_CHALLENGE_IND__04,
            self::THREE_DS_REQUESTOR_CHALLENGE_IND__05,
            self::THREE_DS_REQUESTOR_CHALLENGE_IND__06,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransTypeAllowableValues()
    {
        return [
            self::TRANS_TYPE__01,
            self::TRANS_TYPE__03,
            self::TRANS_TYPE__10,
            self::TRANS_TYPE__11,
            self::TRANS_TYPE__28,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionTypeAllowableValues()
    {
        return [
            self::TRANSACTION_TYPE_GOODS_OR_SERVICE_PURCHASE,
            self::TRANSACTION_TYPE_CHECK_ACCEPTANCE,
            self::TRANSACTION_TYPE_ACCOUNT_FUNDING,
            self::TRANSACTION_TYPE_QUASI_CASH_TRANSACTION,
            self::TRANSACTION_TYPE_PREPAID_ACTIVATION_AND_LOAD,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('acct_info', $data ?? [], null);
        $this->setIfExists('acct_type', $data ?? [], null);
        $this->setIfExists('acquirer_bin', $data ?? [], null);
        $this->setIfExists('acquirer_merchant_id', $data ?? [], null);
        $this->setIfExists('addr_match', $data ?? [], null);
        $this->setIfExists('authentication_only', $data ?? [], false);
        $this->setIfExists('challenge_indicator', $data ?? [], null);
        $this->setIfExists('device_channel', $data ?? [], null);
        $this->setIfExists('device_render_options', $data ?? [], null);
        $this->setIfExists('home_phone', $data ?? [], null);
        $this->setIfExists('mcc', $data ?? [], null);
        $this->setIfExists('merchant_name', $data ?? [], null);
        $this->setIfExists('message_version', $data ?? [], '2.1.0');
        $this->setIfExists('mobile_phone', $data ?? [], null);
        $this->setIfExists('notification_url', $data ?? [], null);
        $this->setIfExists('pay_token_ind', $data ?? [], null);
        $this->setIfExists('payment_authentication_use_case', $data ?? [], null);
        $this->setIfExists('purchase_instal_data', $data ?? [], null);
        $this->setIfExists('recurring_expiry', $data ?? [], null);
        $this->setIfExists('recurring_frequency', $data ?? [], null);
        $this->setIfExists('sdk_app_id', $data ?? [], null);
        $this->setIfExists('sdk_enc_data', $data ?? [], null);
        $this->setIfExists('sdk_ephem_pub_key', $data ?? [], null);
        $this->setIfExists('sdk_max_timeout', $data ?? [], 60);
        $this->setIfExists('sdk_reference_number', $data ?? [], null);
        $this->setIfExists('sdk_trans_id', $data ?? [], null);
        $this->setIfExists('sdk_version', $data ?? [], null);
        $this->setIfExists('three_ds_comp_ind', $data ?? [], null);
        $this->setIfExists('three_ds_requestor_authentication_ind', $data ?? [], null);
        $this->setIfExists('three_ds_requestor_authentication_info', $data ?? [], null);
        $this->setIfExists('three_ds_requestor_challenge_ind', $data ?? [], null);
        $this->setIfExists('three_ds_requestor_id', $data ?? [], null);
        $this->setIfExists('three_ds_requestor_name', $data ?? [], null);
        $this->setIfExists('three_ds_requestor_prior_authentication_info', $data ?? [], null);
        $this->setIfExists('three_ds_requestor_url', $data ?? [], null);
        $this->setIfExists('trans_type', $data ?? [], null);
        $this->setIfExists('transaction_type', $data ?? [], null);
        $this->setIfExists('white_list_status', $data ?? [], null);
        $this->setIfExists('work_phone', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAcctTypeAllowableValues();
        if (!is_null($this->container['acct_type']) && !in_array($this->container['acct_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'acct_type', must be one of '%s'",
                $this->container['acct_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAddrMatchAllowableValues();
        if (!is_null($this->container['addr_match']) && !in_array($this->container['addr_match'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'addr_match', must be one of '%s'",
                $this->container['addr_match'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getChallengeIndicatorAllowableValues();
        if (!is_null($this->container['challenge_indicator']) && !in_array($this->container['challenge_indicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'challenge_indicator', must be one of '%s'",
                $this->container['challenge_indicator'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['device_channel'] === null) {
            $invalidProperties[] = "'device_channel' can't be null";
        }
        $allowedValues = $this->getThreeDsRequestorChallengeIndAllowableValues();
        if (!is_null($this->container['three_ds_requestor_challenge_ind']) && !in_array($this->container['three_ds_requestor_challenge_ind'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'three_ds_requestor_challenge_ind', must be one of '%s'",
                $this->container['three_ds_requestor_challenge_ind'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTransTypeAllowableValues();
        if (!is_null($this->container['trans_type']) && !in_array($this->container['trans_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'trans_type', must be one of '%s'",
                $this->container['trans_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTransactionTypeAllowableValues();
        if (!is_null($this->container['transaction_type']) && !in_array($this->container['transaction_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transaction_type', must be one of '%s'",
                $this->container['transaction_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets acct_info
     *
     * @return \Adyen\Model\Checkout\AcctInfo|null
     */
    public function getAcctInfo()
    {
        return $this->container['acct_info'];
    }

    /**
     * Sets acct_info
     *
     * @param \Adyen\Model\Checkout\AcctInfo|null $acct_info acct_info
     *
     * @return self
     */
    public function setAcctInfo($acct_info)
    {
        if (is_null($acct_info)) {
            throw new \InvalidArgumentException('non-nullable acct_info cannot be null');
        }
        $this->container['acct_info'] = $acct_info;

        return $this;
    }

    /**
     * Gets acct_type
     *
     * @return string|null
     */
    public function getAcctType()
    {
        return $this->container['acct_type'];
    }

    /**
     * Sets acct_type
     *
     * @param string|null $acct_type Indicates the type of account. For example, for a multi-account card product. Length: 2 characters. Allowed values: * **01** — Not applicable * **02** — Credit * **03** — Debit
     *
     * @return self
     */
    public function setAcctType($acct_type)
    {
        if (is_null($acct_type)) {
            throw new \InvalidArgumentException('non-nullable acct_type cannot be null');
        }
        $allowedValues = $this->getAcctTypeAllowableValues();
        if (!in_array($acct_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'acct_type', must be one of '%s'",
                    $acct_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['acct_type'] = $acct_type;

        return $this;
    }

    /**
     * Gets acquirer_bin
     *
     * @return string|null
     */
    public function getAcquirerBin()
    {
        return $this->container['acquirer_bin'];
    }

    /**
     * Sets acquirer_bin
     *
     * @param string|null $acquirer_bin Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The acquiring BIN enrolled for 3D Secure 2. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.
     *
     * @return self
     */
    public function setAcquirerBin($acquirer_bin)
    {
        if (is_null($acquirer_bin)) {
            throw new \InvalidArgumentException('non-nullable acquirer_bin cannot be null');
        }
        $this->container['acquirer_bin'] = $acquirer_bin;

        return $this;
    }

    /**
     * Gets acquirer_merchant_id
     *
     * @return string|null
     */
    public function getAcquirerMerchantId()
    {
        return $this->container['acquirer_merchant_id'];
    }

    /**
     * Sets acquirer_merchant_id
     *
     * @param string|null $acquirer_merchant_id Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchantId that is enrolled for 3D Secure 2 by the merchant's acquirer. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.
     *
     * @return self
     */
    public function setAcquirerMerchantId($acquirer_merchant_id)
    {
        if (is_null($acquirer_merchant_id)) {
            throw new \InvalidArgumentException('non-nullable acquirer_merchant_id cannot be null');
        }
        $this->container['acquirer_merchant_id'] = $acquirer_merchant_id;

        return $this;
    }

    /**
     * Gets addr_match
     *
     * @return string|null
     */
    public function getAddrMatch()
    {
        return $this->container['addr_match'];
    }

    /**
     * Sets addr_match
     *
     * @param string|null $addr_match Indicates whether the Cardholder Shipping Address and Cardholder Billing Address are the same. Allowed values: * **Y** — Shipping Address matches Billing Address. * **N** — Shipping Address does not match Billing Address.
     *
     * @return self
     */
    public function setAddrMatch($addr_match)
    {
        if (is_null($addr_match)) {
            throw new \InvalidArgumentException('non-nullable addr_match cannot be null');
        }
        $allowedValues = $this->getAddrMatchAllowableValues();
        if (!in_array($addr_match, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'addr_match', must be one of '%s'",
                    $addr_match,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['addr_match'] = $addr_match;

        return $this;
    }

    /**
     * Gets authentication_only
     *
     * @return bool|null
     * @deprecated
     */
    public function getAuthenticationOnly()
    {
        return $this->container['authentication_only'];
    }

    /**
     * Sets authentication_only
     *
     * @param bool|null $authentication_only If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.
     *
     * @return self
     * @deprecated
     */
    public function setAuthenticationOnly($authentication_only)
    {
        if (is_null($authentication_only)) {
            throw new \InvalidArgumentException('non-nullable authentication_only cannot be null');
        }
        $this->container['authentication_only'] = $authentication_only;

        return $this;
    }

    /**
     * Gets challenge_indicator
     *
     * @return string|null
     * @deprecated
     */
    public function getChallengeIndicator()
    {
        return $this->container['challenge_indicator'];
    }

    /**
     * Sets challenge_indicator
     *
     * @param string|null $challenge_indicator Possibility to specify a preference for receiving a challenge from the issuer. Allowed values: * `noPreference` * `requestNoChallenge` * `requestChallenge` * `requestChallengeAsMandate`
     *
     * @return self
     * @deprecated
     */
    public function setChallengeIndicator($challenge_indicator)
    {
        if (is_null($challenge_indicator)) {
            throw new \InvalidArgumentException('non-nullable challenge_indicator cannot be null');
        }
        $allowedValues = $this->getChallengeIndicatorAllowableValues();
        if (!in_array($challenge_indicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'challenge_indicator', must be one of '%s'",
                    $challenge_indicator,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['challenge_indicator'] = $challenge_indicator;

        return $this;
    }

    /**
     * Gets device_channel
     *
     * @return string
     */
    public function getDeviceChannel()
    {
        return $this->container['device_channel'];
    }

    /**
     * Sets device_channel
     *
     * @param string $device_channel The environment of the shopper. Allowed values: * `app` * `browser`
     *
     * @return self
     */
    public function setDeviceChannel($device_channel)
    {
        if (is_null($device_channel)) {
            throw new \InvalidArgumentException('non-nullable device_channel cannot be null');
        }
        $this->container['device_channel'] = $device_channel;

        return $this;
    }

    /**
     * Gets device_render_options
     *
     * @return \Adyen\Model\Checkout\DeviceRenderOptions|null
     */
    public function getDeviceRenderOptions()
    {
        return $this->container['device_render_options'];
    }

    /**
     * Sets device_render_options
     *
     * @param \Adyen\Model\Checkout\DeviceRenderOptions|null $device_render_options device_render_options
     *
     * @return self
     */
    public function setDeviceRenderOptions($device_render_options)
    {
        if (is_null($device_render_options)) {
            throw new \InvalidArgumentException('non-nullable device_render_options cannot be null');
        }
        $this->container['device_render_options'] = $device_render_options;

        return $this;
    }

    /**
     * Gets home_phone
     *
     * @return \Adyen\Model\Checkout\Phone|null
     */
    public function getHomePhone()
    {
        return $this->container['home_phone'];
    }

    /**
     * Sets home_phone
     *
     * @param \Adyen\Model\Checkout\Phone|null $home_phone home_phone
     *
     * @return self
     */
    public function setHomePhone($home_phone)
    {
        if (is_null($home_phone)) {
            throw new \InvalidArgumentException('non-nullable home_phone cannot be null');
        }
        $this->container['home_phone'] = $home_phone;

        return $this;
    }

    /**
     * Gets mcc
     *
     * @return string|null
     */
    public function getMcc()
    {
        return $this->container['mcc'];
    }

    /**
     * Sets mcc
     *
     * @param string|null $mcc Required for merchants that have been enrolled for 3D Secure 2 by another party than Adyen, mostly [authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The `mcc` is a four-digit code with which the previously given `acquirerMerchantID` is registered at the scheme.
     *
     * @return self
     */
    public function setMcc($mcc)
    {
        if (is_null($mcc)) {
            throw new \InvalidArgumentException('non-nullable mcc cannot be null');
        }
        $this->container['mcc'] = $mcc;

        return $this;
    }

    /**
     * Gets merchant_name
     *
     * @return string|null
     */
    public function getMerchantName()
    {
        return $this->container['merchant_name'];
    }

    /**
     * Sets merchant_name
     *
     * @param string|null $merchant_name Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchant name that the issuer presents to the shopper if they get a challenge. We recommend to use the same value that you will use in the authorization. Maximum length is 40 characters. > Optional for a [full 3D Secure 2 integration](https://docs.adyen.com/online-payments/3d-secure/native-3ds2/api-integration). Use this field if you are enrolled for 3D Secure 2 with us and want to override the merchant name already configured on your account.
     *
     * @return self
     */
    public function setMerchantName($merchant_name)
    {
        if (is_null($merchant_name)) {
            throw new \InvalidArgumentException('non-nullable merchant_name cannot be null');
        }
        $this->container['merchant_name'] = $merchant_name;

        return $this;
    }

    /**
     * Gets message_version
     *
     * @return string|null
     */
    public function getMessageVersion()
    {
        return $this->container['message_version'];
    }

    /**
     * Sets message_version
     *
     * @param string|null $message_version The `messageVersion` value indicating the 3D Secure 2 protocol version.
     *
     * @return self
     */
    public function setMessageVersion($message_version)
    {
        if (is_null($message_version)) {
            throw new \InvalidArgumentException('non-nullable message_version cannot be null');
        }
        $this->container['message_version'] = $message_version;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return \Adyen\Model\Checkout\Phone|null
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param \Adyen\Model\Checkout\Phone|null $mobile_phone mobile_phone
     *
     * @return self
     */
    public function setMobilePhone($mobile_phone)
    {
        if (is_null($mobile_phone)) {
            throw new \InvalidArgumentException('non-nullable mobile_phone cannot be null');
        }
        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets notification_url
     *
     * @return string|null
     */
    public function getNotificationUrl()
    {
        return $this->container['notification_url'];
    }

    /**
     * Sets notification_url
     *
     * @param string|null $notification_url URL to where the issuer should send the `CRes`. Required if you are not using components for `channel` **Web** or if you are using classic integration `deviceChannel` **browser**.
     *
     * @return self
     */
    public function setNotificationUrl($notification_url)
    {
        if (is_null($notification_url)) {
            throw new \InvalidArgumentException('non-nullable notification_url cannot be null');
        }
        $this->container['notification_url'] = $notification_url;

        return $this;
    }

    /**
     * Gets pay_token_ind
     *
     * @return bool|null
     */
    public function getPayTokenInd()
    {
        return $this->container['pay_token_ind'];
    }

    /**
     * Sets pay_token_ind
     *
     * @param bool|null $pay_token_ind Value **true** indicates that the transaction was de-tokenised prior to being received by the ACS.
     *
     * @return self
     */
    public function setPayTokenInd($pay_token_ind)
    {
        if (is_null($pay_token_ind)) {
            throw new \InvalidArgumentException('non-nullable pay_token_ind cannot be null');
        }
        $this->container['pay_token_ind'] = $pay_token_ind;

        return $this;
    }

    /**
     * Gets payment_authentication_use_case
     *
     * @return string|null
     */
    public function getPaymentAuthenticationUseCase()
    {
        return $this->container['payment_authentication_use_case'];
    }

    /**
     * Sets payment_authentication_use_case
     *
     * @param string|null $payment_authentication_use_case Indicates the type of payment for which an authentication is requested (message extension)
     *
     * @return self
     */
    public function setPaymentAuthenticationUseCase($payment_authentication_use_case)
    {
        if (is_null($payment_authentication_use_case)) {
            throw new \InvalidArgumentException('non-nullable payment_authentication_use_case cannot be null');
        }
        $this->container['payment_authentication_use_case'] = $payment_authentication_use_case;

        return $this;
    }

    /**
     * Gets purchase_instal_data
     *
     * @return string|null
     */
    public function getPurchaseInstalData()
    {
        return $this->container['purchase_instal_data'];
    }

    /**
     * Sets purchase_instal_data
     *
     * @param string|null $purchase_instal_data Indicates the maximum number of authorisations permitted for instalment payments. Length: 1–3 characters.
     *
     * @return self
     */
    public function setPurchaseInstalData($purchase_instal_data)
    {
        if (is_null($purchase_instal_data)) {
            throw new \InvalidArgumentException('non-nullable purchase_instal_data cannot be null');
        }
        $this->container['purchase_instal_data'] = $purchase_instal_data;

        return $this;
    }

    /**
     * Gets recurring_expiry
     *
     * @return string|null
     */
    public function getRecurringExpiry()
    {
        return $this->container['recurring_expiry'];
    }

    /**
     * Sets recurring_expiry
     *
     * @param string|null $recurring_expiry Date after which no further authorisations shall be performed. Format: YYYYMMDD
     *
     * @return self
     */
    public function setRecurringExpiry($recurring_expiry)
    {
        if (is_null($recurring_expiry)) {
            throw new \InvalidArgumentException('non-nullable recurring_expiry cannot be null');
        }
        $this->container['recurring_expiry'] = $recurring_expiry;

        return $this;
    }

    /**
     * Gets recurring_frequency
     *
     * @return string|null
     */
    public function getRecurringFrequency()
    {
        return $this->container['recurring_frequency'];
    }

    /**
     * Sets recurring_frequency
     *
     * @param string|null $recurring_frequency Indicates the minimum number of days between authorisations. Maximum length: 4 characters.
     *
     * @return self
     */
    public function setRecurringFrequency($recurring_frequency)
    {
        if (is_null($recurring_frequency)) {
            throw new \InvalidArgumentException('non-nullable recurring_frequency cannot be null');
        }
        $this->container['recurring_frequency'] = $recurring_frequency;

        return $this;
    }

    /**
     * Gets sdk_app_id
     *
     * @return string|null
     */
    public function getSdkAppId()
    {
        return $this->container['sdk_app_id'];
    }

    /**
     * Sets sdk_app_id
     *
     * @param string|null $sdk_app_id The `sdkAppID` value as received from the 3D Secure 2 SDK. Required for `deviceChannel` set to **app**.
     *
     * @return self
     */
    public function setSdkAppId($sdk_app_id)
    {
        if (is_null($sdk_app_id)) {
            throw new \InvalidArgumentException('non-nullable sdk_app_id cannot be null');
        }
        $this->container['sdk_app_id'] = $sdk_app_id;

        return $this;
    }

    /**
     * Gets sdk_enc_data
     *
     * @return string|null
     */
    public function getSdkEncData()
    {
        return $this->container['sdk_enc_data'];
    }

    /**
     * Sets sdk_enc_data
     *
     * @param string|null $sdk_enc_data The `sdkEncData` value as received from the 3D Secure 2 SDK. Required for `deviceChannel` set to **app**.
     *
     * @return self
     */
    public function setSdkEncData($sdk_enc_data)
    {
        if (is_null($sdk_enc_data)) {
            throw new \InvalidArgumentException('non-nullable sdk_enc_data cannot be null');
        }
        $this->container['sdk_enc_data'] = $sdk_enc_data;

        return $this;
    }

    /**
     * Gets sdk_ephem_pub_key
     *
     * @return \Adyen\Model\Checkout\SDKEphemPubKey|null
     */
    public function getSdkEphemPubKey()
    {
        return $this->container['sdk_ephem_pub_key'];
    }

    /**
     * Sets sdk_ephem_pub_key
     *
     * @param \Adyen\Model\Checkout\SDKEphemPubKey|null $sdk_ephem_pub_key sdk_ephem_pub_key
     *
     * @return self
     */
    public function setSdkEphemPubKey($sdk_ephem_pub_key)
    {
        if (is_null($sdk_ephem_pub_key)) {
            throw new \InvalidArgumentException('non-nullable sdk_ephem_pub_key cannot be null');
        }
        $this->container['sdk_ephem_pub_key'] = $sdk_ephem_pub_key;

        return $this;
    }

    /**
     * Gets sdk_max_timeout
     *
     * @return int|null
     */
    public function getSdkMaxTimeout()
    {
        return $this->container['sdk_max_timeout'];
    }

    /**
     * Sets sdk_max_timeout
     *
     * @param int|null $sdk_max_timeout The maximum amount of time in minutes for the 3D Secure 2 authentication process. Optional and only for `deviceChannel` set to **app**. Defaults to **60** minutes.
     *
     * @return self
     */
    public function setSdkMaxTimeout($sdk_max_timeout)
    {
        // Do nothing for nullable integers
        $this->container['sdk_max_timeout'] = $sdk_max_timeout;

        return $this;
    }

    /**
     * Gets sdk_reference_number
     *
     * @return string|null
     */
    public function getSdkReferenceNumber()
    {
        return $this->container['sdk_reference_number'];
    }

    /**
     * Sets sdk_reference_number
     *
     * @param string|null $sdk_reference_number The `sdkReferenceNumber` value as received from the 3D Secure 2 SDK. Only for `deviceChannel` set to **app**.
     *
     * @return self
     */
    public function setSdkReferenceNumber($sdk_reference_number)
    {
        if (is_null($sdk_reference_number)) {
            throw new \InvalidArgumentException('non-nullable sdk_reference_number cannot be null');
        }
        $this->container['sdk_reference_number'] = $sdk_reference_number;

        return $this;
    }

    /**
     * Gets sdk_trans_id
     *
     * @return string|null
     */
    public function getSdkTransId()
    {
        return $this->container['sdk_trans_id'];
    }

    /**
     * Sets sdk_trans_id
     *
     * @param string|null $sdk_trans_id The `sdkTransID` value as received from the 3D Secure 2 SDK. Only for `deviceChannel` set to **app**.
     *
     * @return self
     */
    public function setSdkTransId($sdk_trans_id)
    {
        if (is_null($sdk_trans_id)) {
            throw new \InvalidArgumentException('non-nullable sdk_trans_id cannot be null');
        }
        $this->container['sdk_trans_id'] = $sdk_trans_id;

        return $this;
    }

    /**
     * Gets sdk_version
     *
     * @return string|null
     */
    public function getSdkVersion()
    {
        return $this->container['sdk_version'];
    }

    /**
     * Sets sdk_version
     *
     * @param string|null $sdk_version Version of the 3D Secure 2 mobile SDK.  Only for `deviceChannel` set to **app**.
     *
     * @return self
     */
    public function setSdkVersion($sdk_version)
    {
        if (is_null($sdk_version)) {
            throw new \InvalidArgumentException('non-nullable sdk_version cannot be null');
        }
        $this->container['sdk_version'] = $sdk_version;

        return $this;
    }

    /**
     * Gets three_ds_comp_ind
     *
     * @return string|null
     */
    public function getThreeDsCompInd()
    {
        return $this->container['three_ds_comp_ind'];
    }

    /**
     * Sets three_ds_comp_ind
     *
     * @param string|null $three_ds_comp_ind Completion indicator for the device fingerprinting.
     *
     * @return self
     */
    public function setThreeDsCompInd($three_ds_comp_ind)
    {
        if (is_null($three_ds_comp_ind)) {
            throw new \InvalidArgumentException('non-nullable three_ds_comp_ind cannot be null');
        }
        $this->container['three_ds_comp_ind'] = $three_ds_comp_ind;

        return $this;
    }

    /**
     * Gets three_ds_requestor_authentication_ind
     *
     * @return string|null
     */
    public function getThreeDsRequestorAuthenticationInd()
    {
        return $this->container['three_ds_requestor_authentication_ind'];
    }

    /**
     * Sets three_ds_requestor_authentication_ind
     *
     * @param string|null $three_ds_requestor_authentication_ind Indicates the type of Authentication request.
     *
     * @return self
     */
    public function setThreeDsRequestorAuthenticationInd($three_ds_requestor_authentication_ind)
    {
        if (is_null($three_ds_requestor_authentication_ind)) {
            throw new \InvalidArgumentException('non-nullable three_ds_requestor_authentication_ind cannot be null');
        }
        $this->container['three_ds_requestor_authentication_ind'] = $three_ds_requestor_authentication_ind;

        return $this;
    }

    /**
     * Gets three_ds_requestor_authentication_info
     *
     * @return \Adyen\Model\Checkout\ThreeDSRequestorAuthenticationInfo|null
     */
    public function getThreeDsRequestorAuthenticationInfo()
    {
        return $this->container['three_ds_requestor_authentication_info'];
    }

    /**
     * Sets three_ds_requestor_authentication_info
     *
     * @param \Adyen\Model\Checkout\ThreeDSRequestorAuthenticationInfo|null $three_ds_requestor_authentication_info three_ds_requestor_authentication_info
     *
     * @return self
     */
    public function setThreeDsRequestorAuthenticationInfo($three_ds_requestor_authentication_info)
    {
        if (is_null($three_ds_requestor_authentication_info)) {
            throw new \InvalidArgumentException('non-nullable three_ds_requestor_authentication_info cannot be null');
        }
        $this->container['three_ds_requestor_authentication_info'] = $three_ds_requestor_authentication_info;

        return $this;
    }

    /**
     * Gets three_ds_requestor_challenge_ind
     *
     * @return string|null
     */
    public function getThreeDsRequestorChallengeInd()
    {
        return $this->container['three_ds_requestor_challenge_ind'];
    }

    /**
     * Sets three_ds_requestor_challenge_ind
     *
     * @param string|null $three_ds_requestor_challenge_ind Indicates whether a challenge is requested for this transaction. Possible values: * **01** — No preference * **02** — No challenge requested * **03** — Challenge requested (3DS Requestor preference) * **04** — Challenge requested (Mandate) * **05** — No challenge (transactional risk analysis is already performed) * **06** — Data Only
     *
     * @return self
     */
    public function setThreeDsRequestorChallengeInd($three_ds_requestor_challenge_ind)
    {
        if (is_null($three_ds_requestor_challenge_ind)) {
            throw new \InvalidArgumentException('non-nullable three_ds_requestor_challenge_ind cannot be null');
        }
        $allowedValues = $this->getThreeDsRequestorChallengeIndAllowableValues();
        if (!in_array($three_ds_requestor_challenge_ind, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'three_ds_requestor_challenge_ind', must be one of '%s'",
                    $three_ds_requestor_challenge_ind,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['three_ds_requestor_challenge_ind'] = $three_ds_requestor_challenge_ind;

        return $this;
    }

    /**
     * Gets three_ds_requestor_id
     *
     * @return string|null
     */
    public function getThreeDsRequestorId()
    {
        return $this->container['three_ds_requestor_id'];
    }

    /**
     * Sets three_ds_requestor_id
     *
     * @param string|null $three_ds_requestor_id Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor identifier assigned by the Directory Server when you enrol for 3D Secure 2.
     *
     * @return self
     */
    public function setThreeDsRequestorId($three_ds_requestor_id)
    {
        if (is_null($three_ds_requestor_id)) {
            throw new \InvalidArgumentException('non-nullable three_ds_requestor_id cannot be null');
        }
        $this->container['three_ds_requestor_id'] = $three_ds_requestor_id;

        return $this;
    }

    /**
     * Gets three_ds_requestor_name
     *
     * @return string|null
     */
    public function getThreeDsRequestorName()
    {
        return $this->container['three_ds_requestor_name'];
    }

    /**
     * Sets three_ds_requestor_name
     *
     * @param string|null $three_ds_requestor_name Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor name assigned by the Directory Server when you enrol for 3D Secure 2.
     *
     * @return self
     */
    public function setThreeDsRequestorName($three_ds_requestor_name)
    {
        if (is_null($three_ds_requestor_name)) {
            throw new \InvalidArgumentException('non-nullable three_ds_requestor_name cannot be null');
        }
        $this->container['three_ds_requestor_name'] = $three_ds_requestor_name;

        return $this;
    }

    /**
     * Gets three_ds_requestor_prior_authentication_info
     *
     * @return \Adyen\Model\Checkout\ThreeDSRequestorPriorAuthenticationInfo|null
     */
    public function getThreeDsRequestorPriorAuthenticationInfo()
    {
        return $this->container['three_ds_requestor_prior_authentication_info'];
    }

    /**
     * Sets three_ds_requestor_prior_authentication_info
     *
     * @param \Adyen\Model\Checkout\ThreeDSRequestorPriorAuthenticationInfo|null $three_ds_requestor_prior_authentication_info three_ds_requestor_prior_authentication_info
     *
     * @return self
     */
    public function setThreeDsRequestorPriorAuthenticationInfo($three_ds_requestor_prior_authentication_info)
    {
        if (is_null($three_ds_requestor_prior_authentication_info)) {
            throw new \InvalidArgumentException('non-nullable three_ds_requestor_prior_authentication_info cannot be null');
        }
        $this->container['three_ds_requestor_prior_authentication_info'] = $three_ds_requestor_prior_authentication_info;

        return $this;
    }

    /**
     * Gets three_ds_requestor_url
     *
     * @return string|null
     */
    public function getThreeDsRequestorUrl()
    {
        return $this->container['three_ds_requestor_url'];
    }

    /**
     * Sets three_ds_requestor_url
     *
     * @param string|null $three_ds_requestor_url URL of the (customer service) website that will be shown to the shopper in case of technical errors during the 3D Secure 2 process.
     *
     * @return self
     */
    public function setThreeDsRequestorUrl($three_ds_requestor_url)
    {
        if (is_null($three_ds_requestor_url)) {
            throw new \InvalidArgumentException('non-nullable three_ds_requestor_url cannot be null');
        }
        $this->container['three_ds_requestor_url'] = $three_ds_requestor_url;

        return $this;
    }

    /**
     * Gets trans_type
     *
     * @return string|null
     */
    public function getTransType()
    {
        return $this->container['trans_type'];
    }

    /**
     * Sets trans_type
     *
     * @param string|null $trans_type Identifies the type of transaction being authenticated. Length: 2 characters. Allowed values: * **01** — Goods/Service Purchase * **03** — Check Acceptance * **10** — Account Funding * **11** — Quasi-Cash Transaction * **28** — Prepaid Activation and Load
     *
     * @return self
     */
    public function setTransType($trans_type)
    {
        if (is_null($trans_type)) {
            throw new \InvalidArgumentException('non-nullable trans_type cannot be null');
        }
        $allowedValues = $this->getTransTypeAllowableValues();
        if (!in_array($trans_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'trans_type', must be one of '%s'",
                    $trans_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['trans_type'] = $trans_type;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string|null
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string|null $transaction_type Identify the type of the transaction being authenticated.
     *
     * @return self
     */
    public function setTransactionType($transaction_type)
    {
        if (is_null($transaction_type)) {
            throw new \InvalidArgumentException('non-nullable transaction_type cannot be null');
        }
        $allowedValues = $this->getTransactionTypeAllowableValues();
        if (!in_array($transaction_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transaction_type', must be one of '%s'",
                    $transaction_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets white_list_status
     *
     * @return string|null
     */
    public function getWhiteListStatus()
    {
        return $this->container['white_list_status'];
    }

    /**
     * Sets white_list_status
     *
     * @param string|null $white_list_status The `whiteListStatus` value returned from a previous 3D Secure 2 transaction, only applicable for 3D Secure 2 protocol version 2.2.0.
     *
     * @return self
     */
    public function setWhiteListStatus($white_list_status)
    {
        if (is_null($white_list_status)) {
            throw new \InvalidArgumentException('non-nullable white_list_status cannot be null');
        }
        $this->container['white_list_status'] = $white_list_status;

        return $this;
    }

    /**
     * Gets work_phone
     *
     * @return \Adyen\Model\Checkout\Phone|null
     */
    public function getWorkPhone()
    {
        return $this->container['work_phone'];
    }

    /**
     * Sets work_phone
     *
     * @param \Adyen\Model\Checkout\Phone|null $work_phone work_phone
     *
     * @return self
     */
    public function setWorkPhone($work_phone)
    {
        if (is_null($work_phone)) {
            throw new \InvalidArgumentException('non-nullable work_phone cannot be null');
        }
        $this->container['work_phone'] = $work_phone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
