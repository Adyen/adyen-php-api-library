<?php

/**
 * Adyen Checkout API
 *
 * The version of the OpenAPI document: 70
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Adyen\Model\Checkout;

use \ArrayAccess;
use Adyen\Model\Checkout\ObjectSerializer;

/**
 * CheckoutPaymentMethod Class Doc Comment
 *
 * @category Class
 * @description The type and required details of a payment method to use.
 * @package  Adyen
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CheckoutPaymentMethod implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CheckoutPaymentMethod';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bankAccountNumber' => 'string',
        'bankAccountType' => 'string',
        'bankLocationId' => 'string',
        'checkoutAttemptId' => 'string',
        'encryptedBankAccountNumber' => 'string',
        'encryptedBankLocationId' => 'string',
        'ownerName' => 'string',
        'recurringDetailReference' => 'string',
        'storedPaymentMethodId' => 'string',
        'type' => 'string',
        'billingAddress' => 'string',
        'deliveryAddress' => 'string',
        'personalDetails' => 'string',
        'amazonPayToken' => 'string',
        'checkoutSessionId' => 'string',
        'applePayToken' => 'string',
        'fundingSource' => 'string',
        'holderName' => 'string',
        'issuer' => 'string',
        'blikCode' => 'string',
        'brand' => 'string',
        'cupsecureplusSmscode' => 'string',
        'cvc' => 'string',
        'encryptedCardNumber' => 'string',
        'encryptedExpiryMonth' => 'string',
        'encryptedExpiryYear' => 'string',
        'encryptedSecurityCode' => 'string',
        'expiryMonth' => 'string',
        'expiryYear' => 'string',
        'networkPaymentReference' => 'string',
        'number' => 'string',
        'shopperNotificationReference' => 'string',
        'threeDS2SdkVersion' => 'string',
        'firstName' => 'string',
        'lastName' => 'string',
        'shopperEmail' => 'string',
        'telephoneNumber' => 'string',
        'googlePayToken' => 'string',
        'subtype' => 'string',
        'masterpassTransactionId' => 'string',
        'orderID' => 'string',
        'payeePreferred' => 'string',
        'payerID' => 'string',
        'payerSelected' => 'string',
        'virtualPaymentAddress' => 'string',
        'samsungPayToken' => 'string',
        'iban' => 'string',
        'billingSequenceNumber' => 'string',
        'visaCheckoutCallId' => 'string',
        'appId' => 'string',
        'openid' => 'string',
        'clickAndCollect' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bankAccountNumber' => null,
        'bankAccountType' => null,
        'bankLocationId' => null,
        'checkoutAttemptId' => null,
        'encryptedBankAccountNumber' => null,
        'encryptedBankLocationId' => null,
        'ownerName' => null,
        'recurringDetailReference' => null,
        'storedPaymentMethodId' => null,
        'type' => null,
        'billingAddress' => null,
        'deliveryAddress' => null,
        'personalDetails' => null,
        'amazonPayToken' => null,
        'checkoutSessionId' => null,
        'applePayToken' => null,
        'fundingSource' => null,
        'holderName' => null,
        'issuer' => null,
        'blikCode' => null,
        'brand' => null,
        'cupsecureplusSmscode' => null,
        'cvc' => null,
        'encryptedCardNumber' => null,
        'encryptedExpiryMonth' => null,
        'encryptedExpiryYear' => null,
        'encryptedSecurityCode' => null,
        'expiryMonth' => null,
        'expiryYear' => null,
        'networkPaymentReference' => null,
        'number' => null,
        'shopperNotificationReference' => null,
        'threeDS2SdkVersion' => null,
        'firstName' => null,
        'lastName' => null,
        'shopperEmail' => null,
        'telephoneNumber' => null,
        'googlePayToken' => null,
        'subtype' => null,
        'masterpassTransactionId' => null,
        'orderID' => null,
        'payeePreferred' => null,
        'payerID' => null,
        'payerSelected' => null,
        'virtualPaymentAddress' => null,
        'samsungPayToken' => null,
        'iban' => null,
        'billingSequenceNumber' => null,
        'visaCheckoutCallId' => null,
        'appId' => null,
        'openid' => null,
        'clickAndCollect' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'bankAccountNumber' => false,
        'bankAccountType' => false,
        'bankLocationId' => false,
        'checkoutAttemptId' => false,
        'encryptedBankAccountNumber' => false,
        'encryptedBankLocationId' => false,
        'ownerName' => false,
        'recurringDetailReference' => false,
        'storedPaymentMethodId' => false,
        'type' => false,
        'billingAddress' => false,
        'deliveryAddress' => false,
        'personalDetails' => false,
        'amazonPayToken' => false,
        'checkoutSessionId' => false,
        'applePayToken' => false,
        'fundingSource' => false,
        'holderName' => false,
        'issuer' => false,
        'blikCode' => false,
        'brand' => false,
        'cupsecureplusSmscode' => false,
        'cvc' => false,
        'encryptedCardNumber' => false,
        'encryptedExpiryMonth' => false,
        'encryptedExpiryYear' => false,
        'encryptedSecurityCode' => false,
        'expiryMonth' => false,
        'expiryYear' => false,
        'networkPaymentReference' => false,
        'number' => false,
        'shopperNotificationReference' => false,
        'threeDS2SdkVersion' => false,
        'firstName' => false,
        'lastName' => false,
        'shopperEmail' => false,
        'telephoneNumber' => false,
        'googlePayToken' => false,
        'subtype' => false,
        'masterpassTransactionId' => false,
        'orderID' => false,
        'payeePreferred' => false,
        'payerID' => false,
        'payerSelected' => false,
        'virtualPaymentAddress' => false,
        'samsungPayToken' => false,
        'iban' => false,
        'billingSequenceNumber' => false,
        'visaCheckoutCallId' => false,
        'appId' => false,
        'openid' => false,
        'clickAndCollect' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bankAccountNumber' => 'bankAccountNumber',
        'bankAccountType' => 'bankAccountType',
        'bankLocationId' => 'bankLocationId',
        'checkoutAttemptId' => 'checkoutAttemptId',
        'encryptedBankAccountNumber' => 'encryptedBankAccountNumber',
        'encryptedBankLocationId' => 'encryptedBankLocationId',
        'ownerName' => 'ownerName',
        'recurringDetailReference' => 'recurringDetailReference',
        'storedPaymentMethodId' => 'storedPaymentMethodId',
        'type' => 'type',
        'billingAddress' => 'billingAddress',
        'deliveryAddress' => 'deliveryAddress',
        'personalDetails' => 'personalDetails',
        'amazonPayToken' => 'amazonPayToken',
        'checkoutSessionId' => 'checkoutSessionId',
        'applePayToken' => 'applePayToken',
        'fundingSource' => 'fundingSource',
        'holderName' => 'holderName',
        'issuer' => 'issuer',
        'blikCode' => 'blikCode',
        'brand' => 'brand',
        'cupsecureplusSmscode' => 'cupsecureplus.smscode',
        'cvc' => 'cvc',
        'encryptedCardNumber' => 'encryptedCardNumber',
        'encryptedExpiryMonth' => 'encryptedExpiryMonth',
        'encryptedExpiryYear' => 'encryptedExpiryYear',
        'encryptedSecurityCode' => 'encryptedSecurityCode',
        'expiryMonth' => 'expiryMonth',
        'expiryYear' => 'expiryYear',
        'networkPaymentReference' => 'networkPaymentReference',
        'number' => 'number',
        'shopperNotificationReference' => 'shopperNotificationReference',
        'threeDS2SdkVersion' => 'threeDS2SdkVersion',
        'firstName' => 'firstName',
        'lastName' => 'lastName',
        'shopperEmail' => 'shopperEmail',
        'telephoneNumber' => 'telephoneNumber',
        'googlePayToken' => 'googlePayToken',
        'subtype' => 'subtype',
        'masterpassTransactionId' => 'masterpassTransactionId',
        'orderID' => 'orderID',
        'payeePreferred' => 'payeePreferred',
        'payerID' => 'payerID',
        'payerSelected' => 'payerSelected',
        'virtualPaymentAddress' => 'virtualPaymentAddress',
        'samsungPayToken' => 'samsungPayToken',
        'iban' => 'iban',
        'billingSequenceNumber' => 'billingSequenceNumber',
        'visaCheckoutCallId' => 'visaCheckoutCallId',
        'appId' => 'appId',
        'openid' => 'openid',
        'clickAndCollect' => 'clickAndCollect'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bankAccountNumber' => 'setBankAccountNumber',
        'bankAccountType' => 'setBankAccountType',
        'bankLocationId' => 'setBankLocationId',
        'checkoutAttemptId' => 'setCheckoutAttemptId',
        'encryptedBankAccountNumber' => 'setEncryptedBankAccountNumber',
        'encryptedBankLocationId' => 'setEncryptedBankLocationId',
        'ownerName' => 'setOwnerName',
        'recurringDetailReference' => 'setRecurringDetailReference',
        'storedPaymentMethodId' => 'setStoredPaymentMethodId',
        'type' => 'setType',
        'billingAddress' => 'setBillingAddress',
        'deliveryAddress' => 'setDeliveryAddress',
        'personalDetails' => 'setPersonalDetails',
        'amazonPayToken' => 'setAmazonPayToken',
        'checkoutSessionId' => 'setCheckoutSessionId',
        'applePayToken' => 'setApplePayToken',
        'fundingSource' => 'setFundingSource',
        'holderName' => 'setHolderName',
        'issuer' => 'setIssuer',
        'blikCode' => 'setBlikCode',
        'brand' => 'setBrand',
        'cupsecureplusSmscode' => 'setCupsecureplusSmscode',
        'cvc' => 'setCvc',
        'encryptedCardNumber' => 'setEncryptedCardNumber',
        'encryptedExpiryMonth' => 'setEncryptedExpiryMonth',
        'encryptedExpiryYear' => 'setEncryptedExpiryYear',
        'encryptedSecurityCode' => 'setEncryptedSecurityCode',
        'expiryMonth' => 'setExpiryMonth',
        'expiryYear' => 'setExpiryYear',
        'networkPaymentReference' => 'setNetworkPaymentReference',
        'number' => 'setNumber',
        'shopperNotificationReference' => 'setShopperNotificationReference',
        'threeDS2SdkVersion' => 'setThreeDS2SdkVersion',
        'firstName' => 'setFirstName',
        'lastName' => 'setLastName',
        'shopperEmail' => 'setShopperEmail',
        'telephoneNumber' => 'setTelephoneNumber',
        'googlePayToken' => 'setGooglePayToken',
        'subtype' => 'setSubtype',
        'masterpassTransactionId' => 'setMasterpassTransactionId',
        'orderID' => 'setOrderID',
        'payeePreferred' => 'setPayeePreferred',
        'payerID' => 'setPayerID',
        'payerSelected' => 'setPayerSelected',
        'virtualPaymentAddress' => 'setVirtualPaymentAddress',
        'samsungPayToken' => 'setSamsungPayToken',
        'iban' => 'setIban',
        'billingSequenceNumber' => 'setBillingSequenceNumber',
        'visaCheckoutCallId' => 'setVisaCheckoutCallId',
        'appId' => 'setAppId',
        'openid' => 'setOpenid',
        'clickAndCollect' => 'setClickAndCollect'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bankAccountNumber' => 'getBankAccountNumber',
        'bankAccountType' => 'getBankAccountType',
        'bankLocationId' => 'getBankLocationId',
        'checkoutAttemptId' => 'getCheckoutAttemptId',
        'encryptedBankAccountNumber' => 'getEncryptedBankAccountNumber',
        'encryptedBankLocationId' => 'getEncryptedBankLocationId',
        'ownerName' => 'getOwnerName',
        'recurringDetailReference' => 'getRecurringDetailReference',
        'storedPaymentMethodId' => 'getStoredPaymentMethodId',
        'type' => 'getType',
        'billingAddress' => 'getBillingAddress',
        'deliveryAddress' => 'getDeliveryAddress',
        'personalDetails' => 'getPersonalDetails',
        'amazonPayToken' => 'getAmazonPayToken',
        'checkoutSessionId' => 'getCheckoutSessionId',
        'applePayToken' => 'getApplePayToken',
        'fundingSource' => 'getFundingSource',
        'holderName' => 'getHolderName',
        'issuer' => 'getIssuer',
        'blikCode' => 'getBlikCode',
        'brand' => 'getBrand',
        'cupsecureplusSmscode' => 'getCupsecureplusSmscode',
        'cvc' => 'getCvc',
        'encryptedCardNumber' => 'getEncryptedCardNumber',
        'encryptedExpiryMonth' => 'getEncryptedExpiryMonth',
        'encryptedExpiryYear' => 'getEncryptedExpiryYear',
        'encryptedSecurityCode' => 'getEncryptedSecurityCode',
        'expiryMonth' => 'getExpiryMonth',
        'expiryYear' => 'getExpiryYear',
        'networkPaymentReference' => 'getNetworkPaymentReference',
        'number' => 'getNumber',
        'shopperNotificationReference' => 'getShopperNotificationReference',
        'threeDS2SdkVersion' => 'getThreeDS2SdkVersion',
        'firstName' => 'getFirstName',
        'lastName' => 'getLastName',
        'shopperEmail' => 'getShopperEmail',
        'telephoneNumber' => 'getTelephoneNumber',
        'googlePayToken' => 'getGooglePayToken',
        'subtype' => 'getSubtype',
        'masterpassTransactionId' => 'getMasterpassTransactionId',
        'orderID' => 'getOrderID',
        'payeePreferred' => 'getPayeePreferred',
        'payerID' => 'getPayerID',
        'payerSelected' => 'getPayerSelected',
        'virtualPaymentAddress' => 'getVirtualPaymentAddress',
        'samsungPayToken' => 'getSamsungPayToken',
        'iban' => 'getIban',
        'billingSequenceNumber' => 'getBillingSequenceNumber',
        'visaCheckoutCallId' => 'getVisaCheckoutCallId',
        'appId' => 'getAppId',
        'openid' => 'getOpenid',
        'clickAndCollect' => 'getClickAndCollect'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('bankAccountNumber', $data ?? [], null);
        $this->setIfExists('bankAccountType', $data ?? [], null);
        $this->setIfExists('bankLocationId', $data ?? [], null);
        $this->setIfExists('checkoutAttemptId', $data ?? [], null);
        $this->setIfExists('encryptedBankAccountNumber', $data ?? [], null);
        $this->setIfExists('encryptedBankLocationId', $data ?? [], null);
        $this->setIfExists('ownerName', $data ?? [], null);
        $this->setIfExists('recurringDetailReference', $data ?? [], null);
        $this->setIfExists('storedPaymentMethodId', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], 'zip');
        $this->setIfExists('billingAddress', $data ?? [], null);
        $this->setIfExists('deliveryAddress', $data ?? [], null);
        $this->setIfExists('personalDetails', $data ?? [], null);
        $this->setIfExists('amazonPayToken', $data ?? [], null);
        $this->setIfExists('checkoutSessionId', $data ?? [], null);
        $this->setIfExists('applePayToken', $data ?? [], null);
        $this->setIfExists('fundingSource', $data ?? [], null);
        $this->setIfExists('holderName', $data ?? [], null);
        $this->setIfExists('issuer', $data ?? [], null);
        $this->setIfExists('blikCode', $data ?? [], null);
        $this->setIfExists('brand', $data ?? [], null);
        $this->setIfExists('cupsecureplusSmscode', $data ?? [], null);
        $this->setIfExists('cvc', $data ?? [], null);
        $this->setIfExists('encryptedCardNumber', $data ?? [], null);
        $this->setIfExists('encryptedExpiryMonth', $data ?? [], null);
        $this->setIfExists('encryptedExpiryYear', $data ?? [], null);
        $this->setIfExists('encryptedSecurityCode', $data ?? [], null);
        $this->setIfExists('expiryMonth', $data ?? [], null);
        $this->setIfExists('expiryYear', $data ?? [], null);
        $this->setIfExists('networkPaymentReference', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('shopperNotificationReference', $data ?? [], null);
        $this->setIfExists('threeDS2SdkVersion', $data ?? [], null);
        $this->setIfExists('firstName', $data ?? [], null);
        $this->setIfExists('lastName', $data ?? [], null);
        $this->setIfExists('shopperEmail', $data ?? [], null);
        $this->setIfExists('telephoneNumber', $data ?? [], null);
        $this->setIfExists('googlePayToken', $data ?? [], null);
        $this->setIfExists('subtype', $data ?? [], null);
        $this->setIfExists('masterpassTransactionId', $data ?? [], null);
        $this->setIfExists('orderID', $data ?? [], null);
        $this->setIfExists('payeePreferred', $data ?? [], null);
        $this->setIfExists('payerID', $data ?? [], null);
        $this->setIfExists('payerSelected', $data ?? [], null);
        $this->setIfExists('virtualPaymentAddress', $data ?? [], null);
        $this->setIfExists('samsungPayToken', $data ?? [], null);
        $this->setIfExists('iban', $data ?? [], null);
        $this->setIfExists('billingSequenceNumber', $data ?? [], null);
        $this->setIfExists('visaCheckoutCallId', $data ?? [], null);
        $this->setIfExists('appId', $data ?? [], null);
        $this->setIfExists('openid', $data ?? [], null);
        $this->setIfExists('clickAndCollect', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['bankAccountNumber'] === null) {
            $invalidProperties[] = "'bankAccountNumber' can't be null";
        }

        if ($this->container['ownerName'] === null) {
            $invalidProperties[] = "'ownerName' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }

        if ($this->container['applePayToken'] === null) {
            $invalidProperties[] = "'applePayToken' can't be null";
        }

        if ($this->container['issuer'] === null) {
            $invalidProperties[] = "'issuer' can't be null";
        }
        if ($this->container['firstName'] === null) {
            $invalidProperties[] = "'firstName' can't be null";
        }
        if ($this->container['lastName'] === null) {
            $invalidProperties[] = "'lastName' can't be null";
        }
        if ($this->container['shopperEmail'] === null) {
            $invalidProperties[] = "'shopperEmail' can't be null";
        }
        if ($this->container['telephoneNumber'] === null) {
            $invalidProperties[] = "'telephoneNumber' can't be null";
        }
        if ($this->container['googlePayToken'] === null) {
            $invalidProperties[] = "'googlePayToken' can't be null";
        }

        if ($this->container['masterpassTransactionId'] === null) {
            $invalidProperties[] = "'masterpassTransactionId' can't be null";
        }
        if ($this->container['samsungPayToken'] === null) {
            $invalidProperties[] = "'samsungPayToken' can't be null";
        }
        if ($this->container['iban'] === null) {
            $invalidProperties[] = "'iban' can't be null";
        }
        if ($this->container['billingSequenceNumber'] === null) {
            $invalidProperties[] = "'billingSequenceNumber' can't be null";
        }
        if ($this->container['visaCheckoutCallId'] === null) {
            $invalidProperties[] = "'visaCheckoutCallId' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bankAccountNumber
     *
     * @return string
     */
    public function getBankAccountNumber()
    {
        return $this->container['bankAccountNumber'];
    }

    /**
     * Sets bankAccountNumber
     *
     * @param string $bankAccountNumber The bank account number (without separators).
     *
     * @return self
     */
    public function setBankAccountNumber($bankAccountNumber)
    {
        if (is_null($bankAccountNumber)) {
            throw new \InvalidArgumentException('non-nullable bankAccountNumber cannot be null');
        }
        $this->container['bankAccountNumber'] = $bankAccountNumber;

        return $this;
    }

    /**
     * Gets bankAccountType
     *
     * @return string|null
     */
    public function getBankAccountType()
    {
        return $this->container['bankAccountType'];
    }

    /**
     * Sets bankAccountType
     *
     * @param string|null $bankAccountType The bank account type (checking, savings...).
     *
     * @return self
     */
    public function setBankAccountType($bankAccountType)
    {
        if (is_null($bankAccountType)) {
            throw new \InvalidArgumentException('non-nullable bankAccountType cannot be null');
        }
        $this->container['bankAccountType'] = $bankAccountType;

        return $this;
    }

    /**
     * Gets bankLocationId
     *
     * @return string|null
     */
    public function getBankLocationId()
    {
        return $this->container['bankLocationId'];
    }

    /**
     * Sets bankLocationId
     *
     * @param string|null $bankLocationId The bank routing number of the account.
     *
     * @return self
     */
    public function setBankLocationId($bankLocationId)
    {
        if (is_null($bankLocationId)) {
            throw new \InvalidArgumentException('non-nullable bankLocationId cannot be null');
        }
        $this->container['bankLocationId'] = $bankLocationId;

        return $this;
    }

    /**
     * Gets checkoutAttemptId
     *
     * @return string|null
     */
    public function getCheckoutAttemptId()
    {
        return $this->container['checkoutAttemptId'];
    }

    /**
     * Sets checkoutAttemptId
     *
     * @param string|null $checkoutAttemptId The checkout attempt identifier.
     *
     * @return self
     */
    public function setCheckoutAttemptId($checkoutAttemptId)
    {
        if (is_null($checkoutAttemptId)) {
            throw new \InvalidArgumentException('non-nullable checkoutAttemptId cannot be null');
        }
        $this->container['checkoutAttemptId'] = $checkoutAttemptId;

        return $this;
    }

    /**
     * Gets encryptedBankAccountNumber
     *
     * @return string|null
     */
    public function getEncryptedBankAccountNumber()
    {
        return $this->container['encryptedBankAccountNumber'];
    }

    /**
     * Sets encryptedBankAccountNumber
     *
     * @param string|null $encryptedBankAccountNumber Encrypted bank account number. The bank account number (without separators).
     *
     * @return self
     */
    public function setEncryptedBankAccountNumber($encryptedBankAccountNumber)
    {
        if (is_null($encryptedBankAccountNumber)) {
            throw new \InvalidArgumentException('non-nullable encryptedBankAccountNumber cannot be null');
        }
        $this->container['encryptedBankAccountNumber'] = $encryptedBankAccountNumber;

        return $this;
    }

    /**
     * Gets encryptedBankLocationId
     *
     * @return string|null
     */
    public function getEncryptedBankLocationId()
    {
        return $this->container['encryptedBankLocationId'];
    }

    /**
     * Sets encryptedBankLocationId
     *
     * @param string|null $encryptedBankLocationId Encrypted location id. The bank routing number of the account. The field value is `nil` in most cases.
     *
     * @return self
     */
    public function setEncryptedBankLocationId($encryptedBankLocationId)
    {
        if (is_null($encryptedBankLocationId)) {
            throw new \InvalidArgumentException('non-nullable encryptedBankLocationId cannot be null');
        }
        $this->container['encryptedBankLocationId'] = $encryptedBankLocationId;

        return $this;
    }

    /**
     * Gets ownerName
     *
     * @return string
     */
    public function getOwnerName()
    {
        return $this->container['ownerName'];
    }

    /**
     * Sets ownerName
     *
     * @param string $ownerName The name of the bank account holder.
     *
     * @return self
     */
    public function setOwnerName($ownerName)
    {
        if (is_null($ownerName)) {
            throw new \InvalidArgumentException('non-nullable ownerName cannot be null');
        }
        $this->container['ownerName'] = $ownerName;

        return $this;
    }

    /**
     * Gets recurringDetailReference
     *
     * @return string|null
     * @deprecated
     */
    public function getRecurringDetailReference()
    {
        return $this->container['recurringDetailReference'];
    }

    /**
     * Sets recurringDetailReference
     *
     * @param string|null $recurringDetailReference This is the `recurringDetailReference` returned in the response when you created the token.
     *
     * @return self
     * @deprecated
     */
    public function setRecurringDetailReference($recurringDetailReference)
    {
        if (is_null($recurringDetailReference)) {
            throw new \InvalidArgumentException('non-nullable recurringDetailReference cannot be null');
        }
        $this->container['recurringDetailReference'] = $recurringDetailReference;

        return $this;
    }

    /**
     * Gets storedPaymentMethodId
     *
     * @return string|null
     */
    public function getStoredPaymentMethodId()
    {
        return $this->container['storedPaymentMethodId'];
    }

    /**
     * Sets storedPaymentMethodId
     *
     * @param string|null $storedPaymentMethodId This is the `recurringDetailReference` returned in the response when you created the token.
     *
     * @return self
     */
    public function setStoredPaymentMethodId($storedPaymentMethodId)
    {
        if (is_null($storedPaymentMethodId)) {
            throw new \InvalidArgumentException('non-nullable storedPaymentMethodId cannot be null');
        }
        $this->container['storedPaymentMethodId'] = $storedPaymentMethodId;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type **zip**
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets billingAddress
     *
     * @return string|null
     */
    public function getBillingAddress()
    {
        return $this->container['billingAddress'];
    }

    /**
     * Sets billingAddress
     *
     * @param string|null $billingAddress The address where to send the invoice.
     *
     * @return self
     */
    public function setBillingAddress($billingAddress)
    {
        if (is_null($billingAddress)) {
            throw new \InvalidArgumentException('non-nullable billingAddress cannot be null');
        }
        $this->container['billingAddress'] = $billingAddress;

        return $this;
    }

    /**
     * Gets deliveryAddress
     *
     * @return string|null
     */
    public function getDeliveryAddress()
    {
        return $this->container['deliveryAddress'];
    }

    /**
     * Sets deliveryAddress
     *
     * @param string|null $deliveryAddress The address where the goods should be delivered.
     *
     * @return self
     */
    public function setDeliveryAddress($deliveryAddress)
    {
        if (is_null($deliveryAddress)) {
            throw new \InvalidArgumentException('non-nullable deliveryAddress cannot be null');
        }
        $this->container['deliveryAddress'] = $deliveryAddress;

        return $this;
    }

    /**
     * Gets personalDetails
     *
     * @return string|null
     */
    public function getPersonalDetails()
    {
        return $this->container['personalDetails'];
    }

    /**
     * Sets personalDetails
     *
     * @param string|null $personalDetails Shopper name, date of birth, phone number, and email address.
     *
     * @return self
     */
    public function setPersonalDetails($personalDetails)
    {
        if (is_null($personalDetails)) {
            throw new \InvalidArgumentException('non-nullable personalDetails cannot be null');
        }
        $this->container['personalDetails'] = $personalDetails;

        return $this;
    }

    /**
     * Gets amazonPayToken
     *
     * @return string|null
     */
    public function getAmazonPayToken()
    {
        return $this->container['amazonPayToken'];
    }

    /**
     * Sets amazonPayToken
     *
     * @param string|null $amazonPayToken This is the `amazonPayToken` that you obtained from the [Get Checkout Session](https://amazon-pay-acquirer-guide.s3-eu-west-1.amazonaws.com/v1/amazon-pay-api-v2/checkout-session.html#get-checkout-session) response. This token is used for API only integration specifically.
     *
     * @return self
     */
    public function setAmazonPayToken($amazonPayToken)
    {
        if (is_null($amazonPayToken)) {
            throw new \InvalidArgumentException('non-nullable amazonPayToken cannot be null');
        }
        $this->container['amazonPayToken'] = $amazonPayToken;

        return $this;
    }

    /**
     * Gets checkoutSessionId
     *
     * @return string|null
     */
    public function getCheckoutSessionId()
    {
        return $this->container['checkoutSessionId'];
    }

    /**
     * Sets checkoutSessionId
     *
     * @param string|null $checkoutSessionId The `checkoutSessionId` is used to identify the checkout session at the Amazon Pay side. This field is required only for drop-in and components integration, where it replaces the amazonPayToken.
     *
     * @return self
     */
    public function setCheckoutSessionId($checkoutSessionId)
    {
        if (is_null($checkoutSessionId)) {
            throw new \InvalidArgumentException('non-nullable checkoutSessionId cannot be null');
        }
        $this->container['checkoutSessionId'] = $checkoutSessionId;

        return $this;
    }

    /**
     * Gets applePayToken
     *
     * @return string
     */
    public function getApplePayToken()
    {
        return $this->container['applePayToken'];
    }

    /**
     * Sets applePayToken
     *
     * @param string $applePayToken The stringified and base64 encoded `paymentData` you retrieved from the Apple framework.
     *
     * @return self
     */
    public function setApplePayToken($applePayToken)
    {
        if (is_null($applePayToken)) {
            throw new \InvalidArgumentException('non-nullable applePayToken cannot be null');
        }
        $this->container['applePayToken'] = $applePayToken;

        return $this;
    }

    /**
     * Gets fundingSource
     *
     * @return string|null
     */
    public function getFundingSource()
    {
        return $this->container['fundingSource'];
    }

    /**
     * Sets fundingSource
     *
     * @param string|null $fundingSource The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.
     *
     * @return self
     */
    public function setFundingSource($fundingSource)
    {
        if (is_null($fundingSource)) {
            throw new \InvalidArgumentException('non-nullable fundingSource cannot be null');
        }
        $this->container['fundingSource'] = $fundingSource;

        return $this;
    }

    /**
     * Gets holderName
     *
     * @return string|null
     */
    public function getHolderName()
    {
        return $this->container['holderName'];
    }

    /**
     * Sets holderName
     *
     * @param string|null $holderName The name of the card holder.
     *
     * @return self
     */
    public function setHolderName($holderName)
    {
        if (is_null($holderName)) {
            throw new \InvalidArgumentException('non-nullable holderName cannot be null');
        }
        $this->container['holderName'] = $holderName;

        return $this;
    }

    /**
     * Gets issuer
     *
     * @return string
     */
    public function getIssuer()
    {
        return $this->container['issuer'];
    }

    /**
     * Sets issuer
     *
     * @param string $issuer The shopper's bank. Specify this with the issuer value that corresponds to this bank.
     *
     * @return self
     */
    public function setIssuer($issuer)
    {
        if (is_null($issuer)) {
            throw new \InvalidArgumentException('non-nullable issuer cannot be null');
        }
        $this->container['issuer'] = $issuer;

        return $this;
    }

    /**
     * Gets blikCode
     *
     * @return string|null
     */
    public function getBlikCode()
    {
        return $this->container['blikCode'];
    }

    /**
     * Sets blikCode
     *
     * @param string|null $blikCode BLIK code consisting of 6 digits.
     *
     * @return self
     */
    public function setBlikCode($blikCode)
    {
        if (is_null($blikCode)) {
            throw new \InvalidArgumentException('non-nullable blikCode cannot be null');
        }
        $this->container['blikCode'] = $blikCode;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return string|null
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string|null $brand Secondary brand of the card. For example: **plastix**, **hmclub**.
     *
     * @return self
     */
    public function setBrand($brand)
    {
        if (is_null($brand)) {
            throw new \InvalidArgumentException('non-nullable brand cannot be null');
        }
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets cupsecureplusSmscode
     *
     * @return string|null
     * @deprecated
     */
    public function getCupsecureplusSmscode()
    {
        return $this->container['cupsecureplusSmscode'];
    }

    /**
     * Sets cupsecureplusSmscode
     *
     * @param string|null $cupsecureplusSmscode cupsecureplusSmscode
     *
     * @return self
     * @deprecated
     */
    public function setCupsecureplusSmscode($cupsecureplusSmscode)
    {
        if (is_null($cupsecureplusSmscode)) {
            throw new \InvalidArgumentException('non-nullable cupsecureplusSmscode cannot be null');
        }
        $this->container['cupsecureplusSmscode'] = $cupsecureplusSmscode;

        return $this;
    }

    /**
     * Gets cvc
     *
     * @return string|null
     */
    public function getCvc()
    {
        return $this->container['cvc'];
    }

    /**
     * Sets cvc
     *
     * @param string|null $cvc The card verification code. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
     *
     * @return self
     */
    public function setCvc($cvc)
    {
        if (is_null($cvc)) {
            throw new \InvalidArgumentException('non-nullable cvc cannot be null');
        }
        $this->container['cvc'] = $cvc;

        return $this;
    }

    /**
     * Gets encryptedCardNumber
     *
     * @return string|null
     */
    public function getEncryptedCardNumber()
    {
        return $this->container['encryptedCardNumber'];
    }

    /**
     * Sets encryptedCardNumber
     *
     * @param string|null $encryptedCardNumber The encrypted card number.
     *
     * @return self
     */
    public function setEncryptedCardNumber($encryptedCardNumber)
    {
        if (is_null($encryptedCardNumber)) {
            throw new \InvalidArgumentException('non-nullable encryptedCardNumber cannot be null');
        }
        $this->container['encryptedCardNumber'] = $encryptedCardNumber;

        return $this;
    }

    /**
     * Gets encryptedExpiryMonth
     *
     * @return string|null
     */
    public function getEncryptedExpiryMonth()
    {
        return $this->container['encryptedExpiryMonth'];
    }

    /**
     * Sets encryptedExpiryMonth
     *
     * @param string|null $encryptedExpiryMonth The encrypted card expiry month.
     *
     * @return self
     */
    public function setEncryptedExpiryMonth($encryptedExpiryMonth)
    {
        if (is_null($encryptedExpiryMonth)) {
            throw new \InvalidArgumentException('non-nullable encryptedExpiryMonth cannot be null');
        }
        $this->container['encryptedExpiryMonth'] = $encryptedExpiryMonth;

        return $this;
    }

    /**
     * Gets encryptedExpiryYear
     *
     * @return string|null
     */
    public function getEncryptedExpiryYear()
    {
        return $this->container['encryptedExpiryYear'];
    }

    /**
     * Sets encryptedExpiryYear
     *
     * @param string|null $encryptedExpiryYear The encrypted card expiry year.
     *
     * @return self
     */
    public function setEncryptedExpiryYear($encryptedExpiryYear)
    {
        if (is_null($encryptedExpiryYear)) {
            throw new \InvalidArgumentException('non-nullable encryptedExpiryYear cannot be null');
        }
        $this->container['encryptedExpiryYear'] = $encryptedExpiryYear;

        return $this;
    }

    /**
     * Gets encryptedSecurityCode
     *
     * @return string|null
     */
    public function getEncryptedSecurityCode()
    {
        return $this->container['encryptedSecurityCode'];
    }

    /**
     * Sets encryptedSecurityCode
     *
     * @param string|null $encryptedSecurityCode The encrypted card verification code.
     *
     * @return self
     */
    public function setEncryptedSecurityCode($encryptedSecurityCode)
    {
        if (is_null($encryptedSecurityCode)) {
            throw new \InvalidArgumentException('non-nullable encryptedSecurityCode cannot be null');
        }
        $this->container['encryptedSecurityCode'] = $encryptedSecurityCode;

        return $this;
    }

    /**
     * Gets expiryMonth
     *
     * @return string|null
     */
    public function getExpiryMonth()
    {
        return $this->container['expiryMonth'];
    }

    /**
     * Sets expiryMonth
     *
     * @param string|null $expiryMonth The card expiry month. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
     *
     * @return self
     */
    public function setExpiryMonth($expiryMonth)
    {
        if (is_null($expiryMonth)) {
            throw new \InvalidArgumentException('non-nullable expiryMonth cannot be null');
        }
        $this->container['expiryMonth'] = $expiryMonth;

        return $this;
    }

    /**
     * Gets expiryYear
     *
     * @return string|null
     */
    public function getExpiryYear()
    {
        return $this->container['expiryYear'];
    }

    /**
     * Sets expiryYear
     *
     * @param string|null $expiryYear The card expiry year. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
     *
     * @return self
     */
    public function setExpiryYear($expiryYear)
    {
        if (is_null($expiryYear)) {
            throw new \InvalidArgumentException('non-nullable expiryYear cannot be null');
        }
        $this->container['expiryYear'] = $expiryYear;

        return $this;
    }

    /**
     * Gets networkPaymentReference
     *
     * @return string|null
     */
    public function getNetworkPaymentReference()
    {
        return $this->container['networkPaymentReference'];
    }

    /**
     * Sets networkPaymentReference
     *
     * @param string|null $networkPaymentReference The network token reference. This is the [`networkTxReference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_additionalData-ResponseAdditionalDataCommon-networkTxReference) from the response to the first payment.
     *
     * @return self
     */
    public function setNetworkPaymentReference($networkPaymentReference)
    {
        if (is_null($networkPaymentReference)) {
            throw new \InvalidArgumentException('non-nullable networkPaymentReference cannot be null');
        }
        $this->container['networkPaymentReference'] = $networkPaymentReference;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number The card number. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets shopperNotificationReference
     *
     * @return string|null
     */
    public function getShopperNotificationReference()
    {
        return $this->container['shopperNotificationReference'];
    }

    /**
     * Sets shopperNotificationReference
     *
     * @param string|null $shopperNotificationReference The `shopperNotificationReference` returned in the response when you requested to notify the shopper. Used for recurring payment only.
     *
     * @return self
     */
    public function setShopperNotificationReference($shopperNotificationReference)
    {
        if (is_null($shopperNotificationReference)) {
            throw new \InvalidArgumentException('non-nullable shopperNotificationReference cannot be null');
        }
        $this->container['shopperNotificationReference'] = $shopperNotificationReference;

        return $this;
    }

    /**
     * Gets threeDS2SdkVersion
     *
     * @return string|null
     */
    public function getThreeDS2SdkVersion()
    {
        return $this->container['threeDS2SdkVersion'];
    }

    /**
     * Sets threeDS2SdkVersion
     *
     * @param string|null $threeDS2SdkVersion Required for mobile integrations. Version of the 3D Secure 2 mobile SDK.
     *
     * @return self
     */
    public function setThreeDS2SdkVersion($threeDS2SdkVersion)
    {
        if (is_null($threeDS2SdkVersion)) {
            throw new \InvalidArgumentException('non-nullable threeDS2SdkVersion cannot be null');
        }
        $this->container['threeDS2SdkVersion'] = $threeDS2SdkVersion;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string $firstName The shopper's first name.
     *
     * @return self
     */
    public function setFirstName($firstName)
    {
        if (is_null($firstName)) {
            throw new \InvalidArgumentException('non-nullable firstName cannot be null');
        }
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string $lastName The shopper's last name.
     *
     * @return self
     */
    public function setLastName($lastName)
    {
        if (is_null($lastName)) {
            throw new \InvalidArgumentException('non-nullable lastName cannot be null');
        }
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets shopperEmail
     *
     * @return string
     */
    public function getShopperEmail()
    {
        return $this->container['shopperEmail'];
    }

    /**
     * Sets shopperEmail
     *
     * @param string $shopperEmail
     *
     * @return self
     */
    public function setShopperEmail($shopperEmail)
    {
        if (is_null($shopperEmail)) {
            throw new \InvalidArgumentException('non-nullable shopperEmail cannot be null');
        }
        $this->container['shopperEmail'] = $shopperEmail;

        return $this;
    }

    /**
     * Gets telephoneNumber
     *
     * @return string
     */
    public function getTelephoneNumber()
    {
        return $this->container['telephoneNumber'];
    }

    /**
     * Sets telephoneNumber
     *
     * @param string $telephoneNumber
     *
     * @return self
     */
    public function setTelephoneNumber($telephoneNumber)
    {
        if (is_null($telephoneNumber)) {
            throw new \InvalidArgumentException('non-nullable telephoneNumber cannot be null');
        }
        $this->container['telephoneNumber'] = $telephoneNumber;

        return $this;
    }

    /**
     * Gets googlePayToken
     *
     * @return string
     */
    public function getGooglePayToken()
    {
        return $this->container['googlePayToken'];
    }

    /**
     * Sets googlePayToken
     *
     * @param string $googlePayToken The `token` that you obtained from the [Google Pay API](https://developers.google.com/pay/api/web/reference/response-objects#PaymentData) `PaymentData` response.
     *
     * @return self
     */
    public function setGooglePayToken($googlePayToken)
    {
        if (is_null($googlePayToken)) {
            throw new \InvalidArgumentException('non-nullable googlePayToken cannot be null');
        }
        $this->container['googlePayToken'] = $googlePayToken;

        return $this;
    }

    /**
     * Gets subtype
     *
     * @return string|null
     */
    public function getSubtype()
    {
        return $this->container['subtype'];
    }

    /**
     * Sets subtype
     *
     * @param string|null $subtype The type of flow to initiate.
     *
     * @return self
     */
    public function setSubtype($subtype)
    {
        if (is_null($subtype)) {
            throw new \InvalidArgumentException('non-nullable subtype cannot be null');
        }
        $this->container['subtype'] = $subtype;

        return $this;
    }

    /**
     * Gets masterpassTransactionId
     *
     * @return string
     */
    public function getMasterpassTransactionId()
    {
        return $this->container['masterpassTransactionId'];
    }

    /**
     * Sets masterpassTransactionId
     *
     * @param string $masterpassTransactionId The Masterpass transaction ID.
     *
     * @return self
     */
    public function setMasterpassTransactionId($masterpassTransactionId)
    {
        if (is_null($masterpassTransactionId)) {
            throw new \InvalidArgumentException('non-nullable masterpassTransactionId cannot be null');
        }
        $this->container['masterpassTransactionId'] = $masterpassTransactionId;

        return $this;
    }

    /**
     * Gets orderID
     *
     * @return string|null
     */
    public function getOrderID()
    {
        return $this->container['orderID'];
    }

    /**
     * Sets orderID
     *
     * @param string|null $orderID The unique ID associated with the order.
     *
     * @return self
     */
    public function setOrderID($orderID)
    {
        if (is_null($orderID)) {
            throw new \InvalidArgumentException('non-nullable orderID cannot be null');
        }
        $this->container['orderID'] = $orderID;

        return $this;
    }

    /**
     * Gets payeePreferred
     *
     * @return string|null
     */
    public function getPayeePreferred()
    {
        return $this->container['payeePreferred'];
    }

    /**
     * Sets payeePreferred
     *
     * @param string|null $payeePreferred IMMEDIATE_PAYMENT_REQUIRED or UNRESTRICTED
     *
     * @return self
     */
    public function setPayeePreferred($payeePreferred)
    {
        if (is_null($payeePreferred)) {
            throw new \InvalidArgumentException('non-nullable payeePreferred cannot be null');
        }
        $this->container['payeePreferred'] = $payeePreferred;

        return $this;
    }

    /**
     * Gets payerID
     *
     * @return string|null
     */
    public function getPayerID()
    {
        return $this->container['payerID'];
    }

    /**
     * Sets payerID
     *
     * @param string|null $payerID The unique ID associated with the payer.
     *
     * @return self
     */
    public function setPayerID($payerID)
    {
        if (is_null($payerID)) {
            throw new \InvalidArgumentException('non-nullable payerID cannot be null');
        }
        $this->container['payerID'] = $payerID;

        return $this;
    }

    /**
     * Gets payerSelected
     *
     * @return string|null
     */
    public function getPayerSelected()
    {
        return $this->container['payerSelected'];
    }

    /**
     * Sets payerSelected
     *
     * @param string|null $payerSelected PAYPAL or PAYPAL_CREDIT
     *
     * @return self
     */
    public function setPayerSelected($payerSelected)
    {
        if (is_null($payerSelected)) {
            throw new \InvalidArgumentException('non-nullable payerSelected cannot be null');
        }
        $this->container['payerSelected'] = $payerSelected;

        return $this;
    }

    /**
     * Gets virtualPaymentAddress
     *
     * @return string|null
     */
    public function getVirtualPaymentAddress()
    {
        return $this->container['virtualPaymentAddress'];
    }

    /**
     * Sets virtualPaymentAddress
     *
     * @param string|null $virtualPaymentAddress The virtual payment address for UPI.
     *
     * @return self
     */
    public function setVirtualPaymentAddress($virtualPaymentAddress)
    {
        if (is_null($virtualPaymentAddress)) {
            throw new \InvalidArgumentException('non-nullable virtualPaymentAddress cannot be null');
        }
        $this->container['virtualPaymentAddress'] = $virtualPaymentAddress;

        return $this;
    }

    /**
     * Gets samsungPayToken
     *
     * @return string
     */
    public function getSamsungPayToken()
    {
        return $this->container['samsungPayToken'];
    }

    /**
     * Sets samsungPayToken
     *
     * @param string $samsungPayToken The payload you received from the Samsung Pay SDK response.
     *
     * @return self
     */
    public function setSamsungPayToken($samsungPayToken)
    {
        if (is_null($samsungPayToken)) {
            throw new \InvalidArgumentException('non-nullable samsungPayToken cannot be null');
        }
        $this->container['samsungPayToken'] = $samsungPayToken;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string $iban The International Bank Account Number (IBAN).
     *
     * @return self
     */
    public function setIban($iban)
    {
        if (is_null($iban)) {
            throw new \InvalidArgumentException('non-nullable iban cannot be null');
        }
        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets billingSequenceNumber
     *
     * @return string
     */
    public function getBillingSequenceNumber()
    {
        return $this->container['billingSequenceNumber'];
    }

    /**
     * Sets billingSequenceNumber
     *
     * @param string $billingSequenceNumber The sequence number for the debit. For example, send **2** if this is the second debit for the subscription. The sequence number is included in the notification sent to the shopper.
     *
     * @return self
     */
    public function setBillingSequenceNumber($billingSequenceNumber)
    {
        if (is_null($billingSequenceNumber)) {
            throw new \InvalidArgumentException('non-nullable billingSequenceNumber cannot be null');
        }
        $this->container['billingSequenceNumber'] = $billingSequenceNumber;

        return $this;
    }

    /**
     * Gets visaCheckoutCallId
     *
     * @return string
     */
    public function getVisaCheckoutCallId()
    {
        return $this->container['visaCheckoutCallId'];
    }

    /**
     * Sets visaCheckoutCallId
     *
     * @param string $visaCheckoutCallId The Visa Click to Pay Call ID value. When your shopper selects a payment and/or a shipping address from Visa Click to Pay, you will receive a Visa Click to Pay Call ID.
     *
     * @return self
     */
    public function setVisaCheckoutCallId($visaCheckoutCallId)
    {
        if (is_null($visaCheckoutCallId)) {
            throw new \InvalidArgumentException('non-nullable visaCheckoutCallId cannot be null');
        }
        $this->container['visaCheckoutCallId'] = $visaCheckoutCallId;

        return $this;
    }

    /**
     * Gets appId
     *
     * @return string|null
     */
    public function getAppId()
    {
        return $this->container['appId'];
    }

    /**
     * Sets appId
     *
     * @param string|null $appId appId
     *
     * @return self
     */
    public function setAppId($appId)
    {
        if (is_null($appId)) {
            throw new \InvalidArgumentException('non-nullable appId cannot be null');
        }
        $this->container['appId'] = $appId;

        return $this;
    }

    /**
     * Gets openid
     *
     * @return string|null
     */
    public function getOpenid()
    {
        return $this->container['openid'];
    }

    /**
     * Sets openid
     *
     * @param string|null $openid openid
     *
     * @return self
     */
    public function setOpenid($openid)
    {
        if (is_null($openid)) {
            throw new \InvalidArgumentException('non-nullable openid cannot be null');
        }
        $this->container['openid'] = $openid;

        return $this;
    }

    /**
     * Gets clickAndCollect
     *
     * @return string|null
     */
    public function getClickAndCollect()
    {
        return $this->container['clickAndCollect'];
    }

    /**
     * Sets clickAndCollect
     *
     * @param string|null $clickAndCollect Set this to **true** if the shopper would like to pick up and collect their order, instead of having the goods delivered to them.
     *
     * @return self
     */
    public function setClickAndCollect($clickAndCollect)
    {
        if (is_null($clickAndCollect)) {
            throw new \InvalidArgumentException('non-nullable clickAndCollect cannot be null');
        }
        $this->container['clickAndCollect'] = $clickAndCollect;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
