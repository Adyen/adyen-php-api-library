<?php

/**
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 70
 * Contact: developer-experience@adyen.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Adyen\Model\Checkout;

use \ArrayAccess;
use \Adyen\Model\Checkout\ObjectSerializer;

/**
 * CreatePaymentLinkRequest Class Doc Comment
 *
 * @category Class
 * @package  Adyen\Model\Checkout
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreatePaymentLinkRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreatePaymentLinkRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allowed_payment_methods' => 'string[]',
        'amount' => '\Adyen\Model\Checkout\Amount',
        'billing_address' => '\Adyen\Model\Checkout\Address',
        'blocked_payment_methods' => 'string[]',
        'capture_delay_hours' => 'int',
        'country_code' => 'string',
        'date_of_birth' => '\DateTime',
        'deliver_at' => '\DateTime',
        'delivery_address' => '\Adyen\Model\Checkout\Address',
        'description' => 'string',
        'expires_at' => 'string',
        'installment_options' => 'array<string,\Adyen\Model\Checkout\InstallmentOption>',
        'line_items' => '\Adyen\Model\Checkout\LineItem[]',
        'manual_capture' => 'bool',
        'mcc' => 'string',
        'merchant_account' => 'string',
        'merchant_order_reference' => 'string',
        'metadata' => 'array<string,string>',
        'recurring_processing_model' => 'string',
        'reference' => 'string',
        'required_shopper_fields' => 'string[]',
        'return_url' => 'string',
        'reusable' => 'bool',
        'risk_data' => '\Adyen\Model\Checkout\RiskData',
        'shopper_email' => 'string',
        'shopper_locale' => 'string',
        'shopper_name' => '\Adyen\Model\Checkout\Name',
        'shopper_reference' => 'string',
        'shopper_statement' => 'string',
        'show_remove_payment_method_button' => 'bool',
        'social_security_number' => 'string',
        'split_card_funding_sources' => 'bool',
        'splits' => '\Adyen\Model\Checkout\Split[]',
        'store' => 'string',
        'store_payment_method_mode' => 'string',
        'telephone_number' => 'string',
        'theme_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allowed_payment_methods' => null,
        'amount' => null,
        'billing_address' => null,
        'blocked_payment_methods' => null,
        'capture_delay_hours' => 'int32',
        'country_code' => null,
        'date_of_birth' => 'date',
        'deliver_at' => 'date-time',
        'delivery_address' => null,
        'description' => null,
        'expires_at' => null,
        'installment_options' => null,
        'line_items' => null,
        'manual_capture' => null,
        'mcc' => null,
        'merchant_account' => null,
        'merchant_order_reference' => null,
        'metadata' => null,
        'recurring_processing_model' => null,
        'reference' => null,
        'required_shopper_fields' => null,
        'return_url' => null,
        'reusable' => null,
        'risk_data' => null,
        'shopper_email' => null,
        'shopper_locale' => null,
        'shopper_name' => null,
        'shopper_reference' => null,
        'shopper_statement' => null,
        'show_remove_payment_method_button' => null,
        'social_security_number' => null,
        'split_card_funding_sources' => null,
        'splits' => null,
        'store' => null,
        'store_payment_method_mode' => null,
        'telephone_number' => null,
        'theme_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'allowed_payment_methods' => false,
		'amount' => false,
		'billing_address' => false,
		'blocked_payment_methods' => false,
		'capture_delay_hours' => false,
		'country_code' => false,
		'date_of_birth' => false,
		'deliver_at' => false,
		'delivery_address' => false,
		'description' => false,
		'expires_at' => false,
		'installment_options' => false,
		'line_items' => false,
		'manual_capture' => false,
		'mcc' => false,
		'merchant_account' => false,
		'merchant_order_reference' => false,
		'metadata' => false,
		'recurring_processing_model' => false,
		'reference' => false,
		'required_shopper_fields' => false,
		'return_url' => false,
		'reusable' => false,
		'risk_data' => false,
		'shopper_email' => false,
		'shopper_locale' => false,
		'shopper_name' => false,
		'shopper_reference' => false,
		'shopper_statement' => false,
		'show_remove_payment_method_button' => false,
		'social_security_number' => false,
		'split_card_funding_sources' => false,
		'splits' => false,
		'store' => false,
		'store_payment_method_mode' => false,
		'telephone_number' => false,
		'theme_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allowed_payment_methods' => 'allowedPaymentMethods',
        'amount' => 'amount',
        'billing_address' => 'billingAddress',
        'blocked_payment_methods' => 'blockedPaymentMethods',
        'capture_delay_hours' => 'captureDelayHours',
        'country_code' => 'countryCode',
        'date_of_birth' => 'dateOfBirth',
        'deliver_at' => 'deliverAt',
        'delivery_address' => 'deliveryAddress',
        'description' => 'description',
        'expires_at' => 'expiresAt',
        'installment_options' => 'installmentOptions',
        'line_items' => 'lineItems',
        'manual_capture' => 'manualCapture',
        'mcc' => 'mcc',
        'merchant_account' => 'merchantAccount',
        'merchant_order_reference' => 'merchantOrderReference',
        'metadata' => 'metadata',
        'recurring_processing_model' => 'recurringProcessingModel',
        'reference' => 'reference',
        'required_shopper_fields' => 'requiredShopperFields',
        'return_url' => 'returnUrl',
        'reusable' => 'reusable',
        'risk_data' => 'riskData',
        'shopper_email' => 'shopperEmail',
        'shopper_locale' => 'shopperLocale',
        'shopper_name' => 'shopperName',
        'shopper_reference' => 'shopperReference',
        'shopper_statement' => 'shopperStatement',
        'show_remove_payment_method_button' => 'showRemovePaymentMethodButton',
        'social_security_number' => 'socialSecurityNumber',
        'split_card_funding_sources' => 'splitCardFundingSources',
        'splits' => 'splits',
        'store' => 'store',
        'store_payment_method_mode' => 'storePaymentMethodMode',
        'telephone_number' => 'telephoneNumber',
        'theme_id' => 'themeId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allowed_payment_methods' => 'setAllowedPaymentMethods',
        'amount' => 'setAmount',
        'billing_address' => 'setBillingAddress',
        'blocked_payment_methods' => 'setBlockedPaymentMethods',
        'capture_delay_hours' => 'setCaptureDelayHours',
        'country_code' => 'setCountryCode',
        'date_of_birth' => 'setDateOfBirth',
        'deliver_at' => 'setDeliverAt',
        'delivery_address' => 'setDeliveryAddress',
        'description' => 'setDescription',
        'expires_at' => 'setExpiresAt',
        'installment_options' => 'setInstallmentOptions',
        'line_items' => 'setLineItems',
        'manual_capture' => 'setManualCapture',
        'mcc' => 'setMcc',
        'merchant_account' => 'setMerchantAccount',
        'merchant_order_reference' => 'setMerchantOrderReference',
        'metadata' => 'setMetadata',
        'recurring_processing_model' => 'setRecurringProcessingModel',
        'reference' => 'setReference',
        'required_shopper_fields' => 'setRequiredShopperFields',
        'return_url' => 'setReturnUrl',
        'reusable' => 'setReusable',
        'risk_data' => 'setRiskData',
        'shopper_email' => 'setShopperEmail',
        'shopper_locale' => 'setShopperLocale',
        'shopper_name' => 'setShopperName',
        'shopper_reference' => 'setShopperReference',
        'shopper_statement' => 'setShopperStatement',
        'show_remove_payment_method_button' => 'setShowRemovePaymentMethodButton',
        'social_security_number' => 'setSocialSecurityNumber',
        'split_card_funding_sources' => 'setSplitCardFundingSources',
        'splits' => 'setSplits',
        'store' => 'setStore',
        'store_payment_method_mode' => 'setStorePaymentMethodMode',
        'telephone_number' => 'setTelephoneNumber',
        'theme_id' => 'setThemeId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allowed_payment_methods' => 'getAllowedPaymentMethods',
        'amount' => 'getAmount',
        'billing_address' => 'getBillingAddress',
        'blocked_payment_methods' => 'getBlockedPaymentMethods',
        'capture_delay_hours' => 'getCaptureDelayHours',
        'country_code' => 'getCountryCode',
        'date_of_birth' => 'getDateOfBirth',
        'deliver_at' => 'getDeliverAt',
        'delivery_address' => 'getDeliveryAddress',
        'description' => 'getDescription',
        'expires_at' => 'getExpiresAt',
        'installment_options' => 'getInstallmentOptions',
        'line_items' => 'getLineItems',
        'manual_capture' => 'getManualCapture',
        'mcc' => 'getMcc',
        'merchant_account' => 'getMerchantAccount',
        'merchant_order_reference' => 'getMerchantOrderReference',
        'metadata' => 'getMetadata',
        'recurring_processing_model' => 'getRecurringProcessingModel',
        'reference' => 'getReference',
        'required_shopper_fields' => 'getRequiredShopperFields',
        'return_url' => 'getReturnUrl',
        'reusable' => 'getReusable',
        'risk_data' => 'getRiskData',
        'shopper_email' => 'getShopperEmail',
        'shopper_locale' => 'getShopperLocale',
        'shopper_name' => 'getShopperName',
        'shopper_reference' => 'getShopperReference',
        'shopper_statement' => 'getShopperStatement',
        'show_remove_payment_method_button' => 'getShowRemovePaymentMethodButton',
        'social_security_number' => 'getSocialSecurityNumber',
        'split_card_funding_sources' => 'getSplitCardFundingSources',
        'splits' => 'getSplits',
        'store' => 'getStore',
        'store_payment_method_mode' => 'getStorePaymentMethodMode',
        'telephone_number' => 'getTelephoneNumber',
        'theme_id' => 'getThemeId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const RECURRING_PROCESSING_MODEL_CARD_ON_FILE = 'CardOnFile';
    public const RECURRING_PROCESSING_MODEL_SUBSCRIPTION = 'Subscription';
    public const RECURRING_PROCESSING_MODEL_UNSCHEDULED_CARD_ON_FILE = 'UnscheduledCardOnFile';
    public const REQUIRED_SHOPPER_FIELDS_BILLING_ADDRESS = 'billingAddress';
    public const REQUIRED_SHOPPER_FIELDS_DELIVERY_ADDRESS = 'deliveryAddress';
    public const REQUIRED_SHOPPER_FIELDS_SHOPPER_EMAIL = 'shopperEmail';
    public const REQUIRED_SHOPPER_FIELDS_SHOPPER_NAME = 'shopperName';
    public const REQUIRED_SHOPPER_FIELDS_TELEPHONE_NUMBER = 'telephoneNumber';
    public const STORE_PAYMENT_METHOD_MODE_ASK_FOR_CONSENT = 'askForConsent';
    public const STORE_PAYMENT_METHOD_MODE_DISABLED = 'disabled';
    public const STORE_PAYMENT_METHOD_MODE_ENABLED = 'enabled';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRecurringProcessingModelAllowableValues()
    {
        return [
            self::RECURRING_PROCESSING_MODEL_CARD_ON_FILE,
            self::RECURRING_PROCESSING_MODEL_SUBSCRIPTION,
            self::RECURRING_PROCESSING_MODEL_UNSCHEDULED_CARD_ON_FILE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRequiredShopperFieldsAllowableValues()
    {
        return [
            self::REQUIRED_SHOPPER_FIELDS_BILLING_ADDRESS,
            self::REQUIRED_SHOPPER_FIELDS_DELIVERY_ADDRESS,
            self::REQUIRED_SHOPPER_FIELDS_SHOPPER_EMAIL,
            self::REQUIRED_SHOPPER_FIELDS_SHOPPER_NAME,
            self::REQUIRED_SHOPPER_FIELDS_TELEPHONE_NUMBER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStorePaymentMethodModeAllowableValues()
    {
        return [
            self::STORE_PAYMENT_METHOD_MODE_ASK_FOR_CONSENT,
            self::STORE_PAYMENT_METHOD_MODE_DISABLED,
            self::STORE_PAYMENT_METHOD_MODE_ENABLED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('allowed_payment_methods', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('billing_address', $data ?? [], null);
        $this->setIfExists('blocked_payment_methods', $data ?? [], null);
        $this->setIfExists('capture_delay_hours', $data ?? [], null);
        $this->setIfExists('country_code', $data ?? [], null);
        $this->setIfExists('date_of_birth', $data ?? [], null);
        $this->setIfExists('deliver_at', $data ?? [], null);
        $this->setIfExists('delivery_address', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('expires_at', $data ?? [], null);
        $this->setIfExists('installment_options', $data ?? [], null);
        $this->setIfExists('line_items', $data ?? [], null);
        $this->setIfExists('manual_capture', $data ?? [], null);
        $this->setIfExists('mcc', $data ?? [], null);
        $this->setIfExists('merchant_account', $data ?? [], null);
        $this->setIfExists('merchant_order_reference', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('recurring_processing_model', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('required_shopper_fields', $data ?? [], null);
        $this->setIfExists('return_url', $data ?? [], null);
        $this->setIfExists('reusable', $data ?? [], null);
        $this->setIfExists('risk_data', $data ?? [], null);
        $this->setIfExists('shopper_email', $data ?? [], null);
        $this->setIfExists('shopper_locale', $data ?? [], null);
        $this->setIfExists('shopper_name', $data ?? [], null);
        $this->setIfExists('shopper_reference', $data ?? [], null);
        $this->setIfExists('shopper_statement', $data ?? [], null);
        $this->setIfExists('show_remove_payment_method_button', $data ?? [], true);
        $this->setIfExists('social_security_number', $data ?? [], null);
        $this->setIfExists('split_card_funding_sources', $data ?? [], false);
        $this->setIfExists('splits', $data ?? [], null);
        $this->setIfExists('store', $data ?? [], null);
        $this->setIfExists('store_payment_method_mode', $data ?? [], null);
        $this->setIfExists('telephone_number', $data ?? [], null);
        $this->setIfExists('theme_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['merchant_account'] === null) {
            $invalidProperties[] = "'merchant_account' can't be null";
        }
        $allowedValues = $this->getRecurringProcessingModelAllowableValues();
        if (!is_null($this->container['recurring_processing_model']) && !in_array($this->container['recurring_processing_model'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'recurring_processing_model', must be one of '%s'",
                $this->container['recurring_processing_model'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['reference'] === null) {
            $invalidProperties[] = "'reference' can't be null";
        }
        $allowedValues = $this->getStorePaymentMethodModeAllowableValues();
        if (!is_null($this->container['store_payment_method_mode']) && !in_array($this->container['store_payment_method_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'store_payment_method_mode', must be one of '%s'",
                $this->container['store_payment_method_mode'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allowed_payment_methods
     *
     * @return string[]|null
     */
    public function getAllowedPaymentMethods()
    {
        return $this->container['allowed_payment_methods'];
    }

    /**
     * Sets allowed_payment_methods
     *
     * @param string[]|null $allowed_payment_methods List of payment methods to be presented to the shopper. To refer to payment methods, use their `paymentMethod.type` from [Payment methods overview](https://docs.adyen.com/payment-methods).  Example: `\"allowedPaymentMethods\":[\"ideal\",\"giropay\"]`
     *
     * @return self
     */
    public function setAllowedPaymentMethods($allowed_payment_methods)
    {
        if (is_null($allowed_payment_methods)) {
            throw new \InvalidArgumentException('non-nullable allowed_payment_methods cannot be null');
        }
        $this->container['allowed_payment_methods'] = $allowed_payment_methods;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \Adyen\Model\Checkout\Amount
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \Adyen\Model\Checkout\Amount $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return \Adyen\Model\Checkout\Address|null
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param \Adyen\Model\Checkout\Address|null $billing_address billing_address
     *
     * @return self
     */
    public function setBillingAddress($billing_address)
    {
        if (is_null($billing_address)) {
            throw new \InvalidArgumentException('non-nullable billing_address cannot be null');
        }
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets blocked_payment_methods
     *
     * @return string[]|null
     */
    public function getBlockedPaymentMethods()
    {
        return $this->container['blocked_payment_methods'];
    }

    /**
     * Sets blocked_payment_methods
     *
     * @param string[]|null $blocked_payment_methods List of payment methods to be hidden from the shopper. To refer to payment methods, use their `paymentMethod.type` from [Payment methods overview](https://docs.adyen.com/payment-methods).  Example: `\"blockedPaymentMethods\":[\"ideal\",\"giropay\"]`
     *
     * @return self
     */
    public function setBlockedPaymentMethods($blocked_payment_methods)
    {
        if (is_null($blocked_payment_methods)) {
            throw new \InvalidArgumentException('non-nullable blocked_payment_methods cannot be null');
        }
        $this->container['blocked_payment_methods'] = $blocked_payment_methods;

        return $this;
    }

    /**
     * Gets capture_delay_hours
     *
     * @return int|null
     */
    public function getCaptureDelayHours()
    {
        return $this->container['capture_delay_hours'];
    }

    /**
     * Sets capture_delay_hours
     *
     * @param int|null $capture_delay_hours The delay between the authorisation and scheduled auto-capture, specified in hours.
     *
     * @return self
     */
    public function setCaptureDelayHours($capture_delay_hours)
    {
        if (is_null($capture_delay_hours)) {
            throw new \InvalidArgumentException('non-nullable capture_delay_hours cannot be null');
        }
        $this->container['capture_delay_hours'] = $capture_delay_hours;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code The shopper's two-letter country code.
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        if (is_null($country_code)) {
            throw new \InvalidArgumentException('non-nullable country_code cannot be null');
        }
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return \DateTime|null
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \DateTime|null $date_of_birth The shopper's date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD
     *
     * @return self
     */
    public function setDateOfBirth($date_of_birth)
    {
        if (is_null($date_of_birth)) {
            throw new \InvalidArgumentException('non-nullable date_of_birth cannot be null');
        }
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets deliver_at
     *
     * @return \DateTime|null
     */
    public function getDeliverAt()
    {
        return $this->container['deliver_at'];
    }

    /**
     * Sets deliver_at
     *
     * @param \DateTime|null $deliver_at The date and time when the purchased goods should be delivered.  [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.
     *
     * @return self
     */
    public function setDeliverAt($deliver_at)
    {
        if (is_null($deliver_at)) {
            throw new \InvalidArgumentException('non-nullable deliver_at cannot be null');
        }
        $this->container['deliver_at'] = $deliver_at;

        return $this;
    }

    /**
     * Gets delivery_address
     *
     * @return \Adyen\Model\Checkout\Address|null
     */
    public function getDeliveryAddress()
    {
        return $this->container['delivery_address'];
    }

    /**
     * Sets delivery_address
     *
     * @param \Adyen\Model\Checkout\Address|null $delivery_address delivery_address
     *
     * @return self
     */
    public function setDeliveryAddress($delivery_address)
    {
        if (is_null($delivery_address)) {
            throw new \InvalidArgumentException('non-nullable delivery_address cannot be null');
        }
        $this->container['delivery_address'] = $delivery_address;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A short description visible on the payment page. Maximum length: 280 characters.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return string|null
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param string|null $expires_at The date when the payment link expires.  [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.  The maximum expiry date is 70 days after the payment link is created.  If not provided, the payment link expires 24 hours after it was created.
     *
     * @return self
     */
    public function setExpiresAt($expires_at)
    {
        if (is_null($expires_at)) {
            throw new \InvalidArgumentException('non-nullable expires_at cannot be null');
        }
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets installment_options
     *
     * @return array<string,\Adyen\Model\Checkout\InstallmentOption>|null
     */
    public function getInstallmentOptions()
    {
        return $this->container['installment_options'];
    }

    /**
     * Sets installment_options
     *
     * @param array<string,\Adyen\Model\Checkout\InstallmentOption>|null $installment_options A set of key-value pairs that specifies the installment options available per payment method. The key must be a payment method name in lowercase. For example, **card** to specify installment options for all cards, or **visa** or **mc**. The value must be an object containing the installment options.
     *
     * @return self
     */
    public function setInstallmentOptions($installment_options)
    {
        if (is_null($installment_options)) {
            throw new \InvalidArgumentException('non-nullable installment_options cannot be null');
        }
        $this->container['installment_options'] = $installment_options;

        return $this;
    }

    /**
     * Gets line_items
     *
     * @return \Adyen\Model\Checkout\LineItem[]|null
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param \Adyen\Model\Checkout\LineItem[]|null $line_items Price and product information about the purchased items, to be included on the invoice sent to the shopper. This parameter is required for open invoice (_buy now, pay later_) payment methods such Afterpay, Clearpay, Klarna, RatePay, and Zip.
     *
     * @return self
     */
    public function setLineItems($line_items)
    {
        if (is_null($line_items)) {
            throw new \InvalidArgumentException('non-nullable line_items cannot be null');
        }
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets manual_capture
     *
     * @return bool|null
     */
    public function getManualCapture()
    {
        return $this->container['manual_capture'];
    }

    /**
     * Sets manual_capture
     *
     * @param bool|null $manual_capture Indicates if the payment must be [captured manually](https://docs.adyen.com/online-payments/capture).
     *
     * @return self
     */
    public function setManualCapture($manual_capture)
    {
        if (is_null($manual_capture)) {
            throw new \InvalidArgumentException('non-nullable manual_capture cannot be null');
        }
        $this->container['manual_capture'] = $manual_capture;

        return $this;
    }

    /**
     * Gets mcc
     *
     * @return string|null
     */
    public function getMcc()
    {
        return $this->container['mcc'];
    }

    /**
     * Sets mcc
     *
     * @param string|null $mcc The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.
     *
     * @return self
     */
    public function setMcc($mcc)
    {
        if (is_null($mcc)) {
            throw new \InvalidArgumentException('non-nullable mcc cannot be null');
        }
        $this->container['mcc'] = $mcc;

        return $this;
    }

    /**
     * Gets merchant_account
     *
     * @return string
     */
    public function getMerchantAccount()
    {
        return $this->container['merchant_account'];
    }

    /**
     * Sets merchant_account
     *
     * @param string $merchant_account The merchant account identifier for which the payment link is created.
     *
     * @return self
     */
    public function setMerchantAccount($merchant_account)
    {
        if (is_null($merchant_account)) {
            throw new \InvalidArgumentException('non-nullable merchant_account cannot be null');
        }
        $this->container['merchant_account'] = $merchant_account;

        return $this;
    }

    /**
     * Gets merchant_order_reference
     *
     * @return string|null
     */
    public function getMerchantOrderReference()
    {
        return $this->container['merchant_order_reference'];
    }

    /**
     * Sets merchant_order_reference
     *
     * @param string|null $merchant_order_reference This reference allows linking multiple transactions to each other for reporting purposes (for example, order auth-rate). The reference should be unique per billing cycle.
     *
     * @return self
     */
    public function setMerchantOrderReference($merchant_order_reference)
    {
        if (is_null($merchant_order_reference)) {
            throw new \InvalidArgumentException('non-nullable merchant_order_reference cannot be null');
        }
        $this->container['merchant_order_reference'] = $merchant_order_reference;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,string>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string>|null $metadata Metadata consists of entries, each of which includes a key and a value. Limitations: * Maximum 20 key-value pairs per request. Otherwise, error \"177\" occurs: \"Metadata size exceeds limit\" * Maximum 20 characters per key. Otherwise, error \"178\" occurs: \"Metadata key size exceeds limit\" * A key cannot have the name `checkout.linkId`. Any value that you provide with this key is going to be replaced by the real payment link ID.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets recurring_processing_model
     *
     * @return string|null
     */
    public function getRecurringProcessingModel()
    {
        return $this->container['recurring_processing_model'];
    }

    /**
     * Sets recurring_processing_model
     *
     * @param string|null $recurring_processing_model Defines a recurring payment type. Required when creating a token to store payment details. Possible values: * **Subscription** – A transaction for a fixed or variable amount, which follows a fixed schedule. * **CardOnFile** – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * **UnscheduledCardOnFile** – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or has variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.
     *
     * @return self
     */
    public function setRecurringProcessingModel($recurring_processing_model)
    {
        if (is_null($recurring_processing_model)) {
            throw new \InvalidArgumentException('non-nullable recurring_processing_model cannot be null');
        }
        $allowedValues = $this->getRecurringProcessingModelAllowableValues();
        if (!in_array($recurring_processing_model, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'recurring_processing_model', must be one of '%s'",
                    $recurring_processing_model,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['recurring_processing_model'] = $recurring_processing_model;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference A reference that is used to uniquely identify the payment in future communications about the payment status.
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets required_shopper_fields
     *
     * @return string[]|null
     */
    public function getRequiredShopperFields()
    {
        return $this->container['required_shopper_fields'];
    }

    /**
     * Sets required_shopper_fields
     *
     * @param string[]|null $required_shopper_fields List of fields that the shopper has to provide on the payment page before completing the payment. For more information, refer to [Provide shopper information](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#shopper-information).  Possible values: * **billingAddress** – The address where to send the invoice. * **deliveryAddress** – The address where the purchased goods should be delivered. * **shopperEmail** – The shopper's email address. * **shopperName** – The shopper's full name. * **telephoneNumber** – The shopper's phone number.
     *
     * @return self
     */
    public function setRequiredShopperFields($required_shopper_fields)
    {
        if (is_null($required_shopper_fields)) {
            throw new \InvalidArgumentException('non-nullable required_shopper_fields cannot be null');
        }
        $allowedValues = $this->getRequiredShopperFieldsAllowableValues();
        if (array_diff($required_shopper_fields, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'required_shopper_fields', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['required_shopper_fields'] = $required_shopper_fields;

        return $this;
    }

    /**
     * Gets return_url
     *
     * @return string|null
     */
    public function getReturnUrl()
    {
        return $this->container['return_url'];
    }

    /**
     * Sets return_url
     *
     * @param string|null $return_url Website URL used for redirection after payment is completed. If provided, a **Continue** button will be shown on the payment page. If shoppers select the button, they are redirected to the specified URL.
     *
     * @return self
     */
    public function setReturnUrl($return_url)
    {
        if (is_null($return_url)) {
            throw new \InvalidArgumentException('non-nullable return_url cannot be null');
        }
        $this->container['return_url'] = $return_url;

        return $this;
    }

    /**
     * Gets reusable
     *
     * @return bool|null
     */
    public function getReusable()
    {
        return $this->container['reusable'];
    }

    /**
     * Sets reusable
     *
     * @param bool|null $reusable Indicates whether the payment link can be reused for multiple payments. If not provided, this defaults to **false** which means the link can be used for one successful payment only.
     *
     * @return self
     */
    public function setReusable($reusable)
    {
        if (is_null($reusable)) {
            throw new \InvalidArgumentException('non-nullable reusable cannot be null');
        }
        $this->container['reusable'] = $reusable;

        return $this;
    }

    /**
     * Gets risk_data
     *
     * @return \Adyen\Model\Checkout\RiskData|null
     */
    public function getRiskData()
    {
        return $this->container['risk_data'];
    }

    /**
     * Sets risk_data
     *
     * @param \Adyen\Model\Checkout\RiskData|null $risk_data risk_data
     *
     * @return self
     */
    public function setRiskData($risk_data)
    {
        if (is_null($risk_data)) {
            throw new \InvalidArgumentException('non-nullable risk_data cannot be null');
        }
        $this->container['risk_data'] = $risk_data;

        return $this;
    }

    /**
     * Gets shopper_email
     *
     * @return string|null
     */
    public function getShopperEmail()
    {
        return $this->container['shopper_email'];
    }

    /**
     * Sets shopper_email
     *
     * @param string|null $shopper_email The shopper's email address.
     *
     * @return self
     */
    public function setShopperEmail($shopper_email)
    {
        if (is_null($shopper_email)) {
            throw new \InvalidArgumentException('non-nullable shopper_email cannot be null');
        }
        $this->container['shopper_email'] = $shopper_email;

        return $this;
    }

    /**
     * Gets shopper_locale
     *
     * @return string|null
     */
    public function getShopperLocale()
    {
        return $this->container['shopper_locale'];
    }

    /**
     * Sets shopper_locale
     *
     * @param string|null $shopper_locale The language to be used in the payment page, specified by a combination of a language and country code. For example, `en-US`.  For a list of shopper locales that Pay by Link supports, refer to [Language and localization](https://docs.adyen.com/online-payments/pay-by-link#language-and-localization).
     *
     * @return self
     */
    public function setShopperLocale($shopper_locale)
    {
        if (is_null($shopper_locale)) {
            throw new \InvalidArgumentException('non-nullable shopper_locale cannot be null');
        }
        $this->container['shopper_locale'] = $shopper_locale;

        return $this;
    }

    /**
     * Gets shopper_name
     *
     * @return \Adyen\Model\Checkout\Name|null
     */
    public function getShopperName()
    {
        return $this->container['shopper_name'];
    }

    /**
     * Sets shopper_name
     *
     * @param \Adyen\Model\Checkout\Name|null $shopper_name shopper_name
     *
     * @return self
     */
    public function setShopperName($shopper_name)
    {
        if (is_null($shopper_name)) {
            throw new \InvalidArgumentException('non-nullable shopper_name cannot be null');
        }
        $this->container['shopper_name'] = $shopper_name;

        return $this;
    }

    /**
     * Gets shopper_reference
     *
     * @return string|null
     */
    public function getShopperReference()
    {
        return $this->container['shopper_reference'];
    }

    /**
     * Sets shopper_reference
     *
     * @param string|null $shopper_reference Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.
     *
     * @return self
     */
    public function setShopperReference($shopper_reference)
    {
        if (is_null($shopper_reference)) {
            throw new \InvalidArgumentException('non-nullable shopper_reference cannot be null');
        }
        $this->container['shopper_reference'] = $shopper_reference;

        return $this;
    }

    /**
     * Gets shopper_statement
     *
     * @return string|null
     */
    public function getShopperStatement()
    {
        return $this->container['shopper_statement'];
    }

    /**
     * Sets shopper_statement
     *
     * @param string|null $shopper_statement The text to be shown on the shopper's bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /_**.
     *
     * @return self
     */
    public function setShopperStatement($shopper_statement)
    {
        if (is_null($shopper_statement)) {
            throw new \InvalidArgumentException('non-nullable shopper_statement cannot be null');
        }
        $this->container['shopper_statement'] = $shopper_statement;

        return $this;
    }

    /**
     * Gets show_remove_payment_method_button
     *
     * @return bool|null
     */
    public function getShowRemovePaymentMethodButton()
    {
        return $this->container['show_remove_payment_method_button'];
    }

    /**
     * Sets show_remove_payment_method_button
     *
     * @param bool|null $show_remove_payment_method_button Set to **false** to hide the button that lets the shopper remove a stored payment method.
     *
     * @return self
     */
    public function setShowRemovePaymentMethodButton($show_remove_payment_method_button)
    {
        if (is_null($show_remove_payment_method_button)) {
            throw new \InvalidArgumentException('non-nullable show_remove_payment_method_button cannot be null');
        }
        $this->container['show_remove_payment_method_button'] = $show_remove_payment_method_button;

        return $this;
    }

    /**
     * Gets social_security_number
     *
     * @return string|null
     */
    public function getSocialSecurityNumber()
    {
        return $this->container['social_security_number'];
    }

    /**
     * Sets social_security_number
     *
     * @param string|null $social_security_number The shopper's social security number.
     *
     * @return self
     */
    public function setSocialSecurityNumber($social_security_number)
    {
        if (is_null($social_security_number)) {
            throw new \InvalidArgumentException('non-nullable social_security_number cannot be null');
        }
        $this->container['social_security_number'] = $social_security_number;

        return $this;
    }

    /**
     * Gets split_card_funding_sources
     *
     * @return bool|null
     */
    public function getSplitCardFundingSources()
    {
        return $this->container['split_card_funding_sources'];
    }

    /**
     * Sets split_card_funding_sources
     *
     * @param bool|null $split_card_funding_sources Boolean value indicating whether the card payment method should be split into separate debit and credit options.
     *
     * @return self
     */
    public function setSplitCardFundingSources($split_card_funding_sources)
    {
        if (is_null($split_card_funding_sources)) {
            throw new \InvalidArgumentException('non-nullable split_card_funding_sources cannot be null');
        }
        $this->container['split_card_funding_sources'] = $split_card_funding_sources;

        return $this;
    }

    /**
     * Gets splits
     *
     * @return \Adyen\Model\Checkout\Split[]|null
     */
    public function getSplits()
    {
        return $this->container['splits'];
    }

    /**
     * Sets splits
     *
     * @param \Adyen\Model\Checkout\Split[]|null $splits An array of objects specifying how the payment should be split between accounts when using Adyen for Platforms. For details, refer to [Providing split information](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information).
     *
     * @return self
     */
    public function setSplits($splits)
    {
        if (is_null($splits)) {
            throw new \InvalidArgumentException('non-nullable splits cannot be null');
        }
        $this->container['splits'] = $splits;

        return $this;
    }

    /**
     * Gets store
     *
     * @return string|null
     */
    public function getStore()
    {
        return $this->container['store'];
    }

    /**
     * Sets store
     *
     * @param string|null $store The physical store, for which this payment is processed.
     *
     * @return self
     */
    public function setStore($store)
    {
        if (is_null($store)) {
            throw new \InvalidArgumentException('non-nullable store cannot be null');
        }
        $this->container['store'] = $store;

        return $this;
    }

    /**
     * Gets store_payment_method_mode
     *
     * @return string|null
     */
    public function getStorePaymentMethodMode()
    {
        return $this->container['store_payment_method_mode'];
    }

    /**
     * Sets store_payment_method_mode
     *
     * @param string|null $store_payment_method_mode Indicates if the details of the payment method will be stored for the shopper. Possible values: * **disabled** – No details will be stored (default). * **askForConsent** – If the `shopperReference` is provided, the UI lets the shopper choose if they want their payment details to be stored. * **enabled** – If the `shopperReference` is provided, the details will be stored without asking the shopper for consent.
     *
     * @return self
     */
    public function setStorePaymentMethodMode($store_payment_method_mode)
    {
        if (is_null($store_payment_method_mode)) {
            throw new \InvalidArgumentException('non-nullable store_payment_method_mode cannot be null');
        }
        $allowedValues = $this->getStorePaymentMethodModeAllowableValues();
        if (!in_array($store_payment_method_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'store_payment_method_mode', must be one of '%s'",
                    $store_payment_method_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['store_payment_method_mode'] = $store_payment_method_mode;

        return $this;
    }

    /**
     * Gets telephone_number
     *
     * @return string|null
     */
    public function getTelephoneNumber()
    {
        return $this->container['telephone_number'];
    }

    /**
     * Sets telephone_number
     *
     * @param string|null $telephone_number The shopper's telephone number.
     *
     * @return self
     */
    public function setTelephoneNumber($telephone_number)
    {
        if (is_null($telephone_number)) {
            throw new \InvalidArgumentException('non-nullable telephone_number cannot be null');
        }
        $this->container['telephone_number'] = $telephone_number;

        return $this;
    }

    /**
     * Gets theme_id
     *
     * @return string|null
     */
    public function getThemeId()
    {
        return $this->container['theme_id'];
    }

    /**
     * Sets theme_id
     *
     * @param string|null $theme_id A [theme](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#themes) to customize the appearance of the payment page. If not specified, the payment page is rendered according to the theme set as default in your Customer Area.
     *
     * @return self
     */
    public function setThemeId($theme_id)
    {
        if (is_null($theme_id)) {
            throw new \InvalidArgumentException('non-nullable theme_id cannot be null');
        }
        $this->container['theme_id'] = $theme_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


