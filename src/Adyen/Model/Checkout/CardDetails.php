<?php

/**
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 70
 * Contact: developer-experience@adyen.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Adyen\Model\Checkout;

use \ArrayAccess;
use Adyen\Model\Checkout\ObjectSerializer;

/**
 * CardDetails Class Doc Comment
 *
 * @category Class
 * @package  Adyen
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CardDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CardDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'brand' => 'string',
        'checkout_attempt_id' => 'string',
        'cupsecureplus_smscode' => 'string',
        'cvc' => 'string',
        'encrypted_card_number' => 'string',
        'encrypted_expiry_month' => 'string',
        'encrypted_expiry_year' => 'string',
        'encrypted_security_code' => 'string',
        'expiry_month' => 'string',
        'expiry_year' => 'string',
        'funding_source' => 'string',
        'holder_name' => 'string',
        'network_payment_reference' => 'string',
        'number' => 'string',
        'recurring_detail_reference' => 'string',
        'shopper_notification_reference' => 'string',
        'stored_payment_method_id' => 'string',
        'three_ds2_sdk_version' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'brand' => null,
        'checkout_attempt_id' => null,
        'cupsecureplus_smscode' => null,
        'cvc' => null,
        'encrypted_card_number' => null,
        'encrypted_expiry_month' => null,
        'encrypted_expiry_year' => null,
        'encrypted_security_code' => null,
        'expiry_month' => null,
        'expiry_year' => null,
        'funding_source' => null,
        'holder_name' => null,
        'network_payment_reference' => null,
        'number' => null,
        'recurring_detail_reference' => null,
        'shopper_notification_reference' => null,
        'stored_payment_method_id' => null,
        'three_ds2_sdk_version' => null,
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'brand' => false,
		'checkout_attempt_id' => false,
		'cupsecureplus_smscode' => false,
		'cvc' => false,
		'encrypted_card_number' => false,
		'encrypted_expiry_month' => false,
		'encrypted_expiry_year' => false,
		'encrypted_security_code' => false,
		'expiry_month' => false,
		'expiry_year' => false,
		'funding_source' => false,
		'holder_name' => false,
		'network_payment_reference' => false,
		'number' => false,
		'recurring_detail_reference' => false,
		'shopper_notification_reference' => false,
		'stored_payment_method_id' => false,
		'three_ds2_sdk_version' => false,
		'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'brand' => 'brand',
        'checkout_attempt_id' => 'checkoutAttemptId',
        'cupsecureplus_smscode' => 'cupsecureplus.smscode',
        'cvc' => 'cvc',
        'encrypted_card_number' => 'encryptedCardNumber',
        'encrypted_expiry_month' => 'encryptedExpiryMonth',
        'encrypted_expiry_year' => 'encryptedExpiryYear',
        'encrypted_security_code' => 'encryptedSecurityCode',
        'expiry_month' => 'expiryMonth',
        'expiry_year' => 'expiryYear',
        'funding_source' => 'fundingSource',
        'holder_name' => 'holderName',
        'network_payment_reference' => 'networkPaymentReference',
        'number' => 'number',
        'recurring_detail_reference' => 'recurringDetailReference',
        'shopper_notification_reference' => 'shopperNotificationReference',
        'stored_payment_method_id' => 'storedPaymentMethodId',
        'three_ds2_sdk_version' => 'threeDS2SdkVersion',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'brand' => 'setBrand',
        'checkout_attempt_id' => 'setCheckoutAttemptId',
        'cupsecureplus_smscode' => 'setCupsecureplusSmscode',
        'cvc' => 'setCvc',
        'encrypted_card_number' => 'setEncryptedCardNumber',
        'encrypted_expiry_month' => 'setEncryptedExpiryMonth',
        'encrypted_expiry_year' => 'setEncryptedExpiryYear',
        'encrypted_security_code' => 'setEncryptedSecurityCode',
        'expiry_month' => 'setExpiryMonth',
        'expiry_year' => 'setExpiryYear',
        'funding_source' => 'setFundingSource',
        'holder_name' => 'setHolderName',
        'network_payment_reference' => 'setNetworkPaymentReference',
        'number' => 'setNumber',
        'recurring_detail_reference' => 'setRecurringDetailReference',
        'shopper_notification_reference' => 'setShopperNotificationReference',
        'stored_payment_method_id' => 'setStoredPaymentMethodId',
        'three_ds2_sdk_version' => 'setThreeDs2SdkVersion',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'brand' => 'getBrand',
        'checkout_attempt_id' => 'getCheckoutAttemptId',
        'cupsecureplus_smscode' => 'getCupsecureplusSmscode',
        'cvc' => 'getCvc',
        'encrypted_card_number' => 'getEncryptedCardNumber',
        'encrypted_expiry_month' => 'getEncryptedExpiryMonth',
        'encrypted_expiry_year' => 'getEncryptedExpiryYear',
        'encrypted_security_code' => 'getEncryptedSecurityCode',
        'expiry_month' => 'getExpiryMonth',
        'expiry_year' => 'getExpiryYear',
        'funding_source' => 'getFundingSource',
        'holder_name' => 'getHolderName',
        'network_payment_reference' => 'getNetworkPaymentReference',
        'number' => 'getNumber',
        'recurring_detail_reference' => 'getRecurringDetailReference',
        'shopper_notification_reference' => 'getShopperNotificationReference',
        'stored_payment_method_id' => 'getStoredPaymentMethodId',
        'three_ds2_sdk_version' => 'getThreeDs2SdkVersion',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FUNDING_SOURCE_DEBIT = 'debit';
    public const TYPE_SCHEME = 'scheme';
    public const TYPE_NETWORK_TOKEN = 'networkToken';
    public const TYPE_GIFTCARD = 'giftcard';
    public const TYPE_ALLIANCEDATA = 'alliancedata';
    public const TYPE_CARD = 'card';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFundingSourceAllowableValues()
    {
        return [
            self::FUNDING_SOURCE_DEBIT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SCHEME,
            self::TYPE_NETWORK_TOKEN,
            self::TYPE_GIFTCARD,
            self::TYPE_ALLIANCEDATA,
            self::TYPE_CARD,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('brand', $data ?? [], null);
        $this->setIfExists('checkout_attempt_id', $data ?? [], null);
        $this->setIfExists('cupsecureplus_smscode', $data ?? [], null);
        $this->setIfExists('cvc', $data ?? [], null);
        $this->setIfExists('encrypted_card_number', $data ?? [], null);
        $this->setIfExists('encrypted_expiry_month', $data ?? [], null);
        $this->setIfExists('encrypted_expiry_year', $data ?? [], null);
        $this->setIfExists('encrypted_security_code', $data ?? [], null);
        $this->setIfExists('expiry_month', $data ?? [], null);
        $this->setIfExists('expiry_year', $data ?? [], null);
        $this->setIfExists('funding_source', $data ?? [], null);
        $this->setIfExists('holder_name', $data ?? [], null);
        $this->setIfExists('network_payment_reference', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('recurring_detail_reference', $data ?? [], null);
        $this->setIfExists('shopper_notification_reference', $data ?? [], null);
        $this->setIfExists('stored_payment_method_id', $data ?? [], null);
        $this->setIfExists('three_ds2_sdk_version', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], 'scheme');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['encrypted_card_number'] === null) {
            $invalidProperties[] = "'encrypted_card_number' can't be null";
        }
        if ((mb_strlen($this->container['encrypted_card_number']) > 10000)) {
            $invalidProperties[] = "invalid value for 'encrypted_card_number', the character length must be smaller than or equal to 10000.";
        }

        if ($this->container['encrypted_expiry_month'] === null) {
            $invalidProperties[] = "'encrypted_expiry_month' can't be null";
        }
        if ((mb_strlen($this->container['encrypted_expiry_month']) > 10000)) {
            $invalidProperties[] = "invalid value for 'encrypted_expiry_month', the character length must be smaller than or equal to 10000.";
        }

        if ($this->container['encrypted_expiry_year'] === null) {
            $invalidProperties[] = "'encrypted_expiry_year' can't be null";
        }
        if ((mb_strlen($this->container['encrypted_expiry_year']) > 10000)) {
            $invalidProperties[] = "invalid value for 'encrypted_expiry_year', the character length must be smaller than or equal to 10000.";
        }

        if (!is_null($this->container['encrypted_security_code']) && (mb_strlen($this->container['encrypted_security_code']) > 10000)) {
            $invalidProperties[] = "invalid value for 'encrypted_security_code', the character length must be smaller than or equal to 10000.";
        }

        $allowedValues = $this->getFundingSourceAllowableValues();
        if (!is_null($this->container['funding_source']) && !in_array($this->container['funding_source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'funding_source', must be one of '%s'",
                $this->container['funding_source'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['three_ds2_sdk_version']) && (mb_strlen($this->container['three_ds2_sdk_version']) > 12)) {
            $invalidProperties[] = "invalid value for 'three_ds2_sdk_version', the character length must be smaller than or equal to 12.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets brand
     *
     * @return string|null
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string|null $brand Secondary brand of the card. For example: **plastix**, **hmclub**.
     *
     * @return self
     */
    public function setBrand($brand)
    {
        if (is_null($brand)) {
            throw new \InvalidArgumentException('non-nullable brand cannot be null');
        }
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets checkout_attempt_id
     *
     * @return string|null
     */
    public function getCheckoutAttemptId()
    {
        return $this->container['checkout_attempt_id'];
    }

    /**
     * Sets checkout_attempt_id
     *
     * @param string|null $checkout_attempt_id The checkout attempt identifier.
     *
     * @return self
     */
    public function setCheckoutAttemptId($checkout_attempt_id)
    {
        if (is_null($checkout_attempt_id)) {
            throw new \InvalidArgumentException('non-nullable checkout_attempt_id cannot be null');
        }
        $this->container['checkout_attempt_id'] = $checkout_attempt_id;

        return $this;
    }

    /**
     * Gets cupsecureplus_smscode
     *
     * @return string|null
     * @deprecated
     */
    public function getCupsecureplusSmscode()
    {
        return $this->container['cupsecureplus_smscode'];
    }

    /**
     * Sets cupsecureplus_smscode
     *
     * @param string|null $cupsecureplus_smscode cupsecureplus_smscode
     *
     * @return self
     * @deprecated
     */
    public function setCupsecureplusSmscode($cupsecureplus_smscode)
    {
        if (is_null($cupsecureplus_smscode)) {
            throw new \InvalidArgumentException('non-nullable cupsecureplus_smscode cannot be null');
        }
        $this->container['cupsecureplus_smscode'] = $cupsecureplus_smscode;

        return $this;
    }

    /**
     * Gets cvc
     *
     * @return string|null
     */
    public function getCvc()
    {
        return $this->container['cvc'];
    }

    /**
     * Sets cvc
     *
     * @param string|null $cvc The card verification code. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
     *
     * @return self
     */
    public function setCvc($cvc)
    {
        if (is_null($cvc)) {
            throw new \InvalidArgumentException('non-nullable cvc cannot be null');
        }
        $this->container['cvc'] = $cvc;

        return $this;
    }

    /**
     * Gets encrypted_card_number
     *
     * @return string
     */
    public function getEncryptedCardNumber()
    {
        return $this->container['encrypted_card_number'];
    }

    /**
     * Sets encrypted_card_number
     *
     * @param string $encrypted_card_number The encrypted card number.
     *
     * @return self
     */
    public function setEncryptedCardNumber($encrypted_card_number)
    {
        if (is_null($encrypted_card_number)) {
            throw new \InvalidArgumentException('non-nullable encrypted_card_number cannot be null');
        }
        if ((mb_strlen($encrypted_card_number) > 10000)) {
            throw new \InvalidArgumentException('invalid length for $encrypted_card_number when calling CardDetails., must be smaller than or equal to 10000.');
        }

        $this->container['encrypted_card_number'] = $encrypted_card_number;

        return $this;
    }

    /**
     * Gets encrypted_expiry_month
     *
     * @return string
     */
    public function getEncryptedExpiryMonth()
    {
        return $this->container['encrypted_expiry_month'];
    }

    /**
     * Sets encrypted_expiry_month
     *
     * @param string $encrypted_expiry_month The encrypted card expiry month.
     *
     * @return self
     */
    public function setEncryptedExpiryMonth($encrypted_expiry_month)
    {
        if (is_null($encrypted_expiry_month)) {
            throw new \InvalidArgumentException('non-nullable encrypted_expiry_month cannot be null');
        }
        if ((mb_strlen($encrypted_expiry_month) > 10000)) {
            throw new \InvalidArgumentException('invalid length for $encrypted_expiry_month when calling CardDetails., must be smaller than or equal to 10000.');
        }

        $this->container['encrypted_expiry_month'] = $encrypted_expiry_month;

        return $this;
    }

    /**
     * Gets encrypted_expiry_year
     *
     * @return string
     */
    public function getEncryptedExpiryYear()
    {
        return $this->container['encrypted_expiry_year'];
    }

    /**
     * Sets encrypted_expiry_year
     *
     * @param string $encrypted_expiry_year The encrypted card expiry year.
     *
     * @return self
     */
    public function setEncryptedExpiryYear($encrypted_expiry_year)
    {
        if (is_null($encrypted_expiry_year)) {
            throw new \InvalidArgumentException('non-nullable encrypted_expiry_year cannot be null');
        }
        if ((mb_strlen($encrypted_expiry_year) > 10000)) {
            throw new \InvalidArgumentException('invalid length for $encrypted_expiry_year when calling CardDetails., must be smaller than or equal to 10000.');
        }

        $this->container['encrypted_expiry_year'] = $encrypted_expiry_year;

        return $this;
    }

    /**
     * Gets encrypted_security_code
     *
     * @return string|null
     */
    public function getEncryptedSecurityCode()
    {
        return $this->container['encrypted_security_code'];
    }

    /**
     * Sets encrypted_security_code
     *
     * @param string|null $encrypted_security_code The encrypted card verification code.
     *
     * @return self
     */
    public function setEncryptedSecurityCode($encrypted_security_code)
    {
        if (is_null($encrypted_security_code)) {
            throw new \InvalidArgumentException('non-nullable encrypted_security_code cannot be null');
        }
        if ((mb_strlen($encrypted_security_code) > 10000)) {
            throw new \InvalidArgumentException('invalid length for $encrypted_security_code when calling CardDetails., must be smaller than or equal to 10000.');
        }

        $this->container['encrypted_security_code'] = $encrypted_security_code;

        return $this;
    }

    /**
     * Gets expiry_month
     *
     * @return string|null
     */
    public function getExpiryMonth()
    {
        return $this->container['expiry_month'];
    }

    /**
     * Sets expiry_month
     *
     * @param string|null $expiry_month The card expiry month. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
     *
     * @return self
     */
    public function setExpiryMonth($expiry_month)
    {
        if (is_null($expiry_month)) {
            throw new \InvalidArgumentException('non-nullable expiry_month cannot be null');
        }
        $this->container['expiry_month'] = $expiry_month;

        return $this;
    }

    /**
     * Gets expiry_year
     *
     * @return string|null
     */
    public function getExpiryYear()
    {
        return $this->container['expiry_year'];
    }

    /**
     * Sets expiry_year
     *
     * @param string|null $expiry_year The card expiry year. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
     *
     * @return self
     */
    public function setExpiryYear($expiry_year)
    {
        if (is_null($expiry_year)) {
            throw new \InvalidArgumentException('non-nullable expiry_year cannot be null');
        }
        $this->container['expiry_year'] = $expiry_year;

        return $this;
    }

    /**
     * Gets funding_source
     *
     * @return string|null
     */
    public function getFundingSource()
    {
        return $this->container['funding_source'];
    }

    /**
     * Sets funding_source
     *
     * @param string|null $funding_source The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.
     *
     * @return self
     */
    public function setFundingSource($funding_source)
    {
        if (is_null($funding_source)) {
            throw new \InvalidArgumentException('non-nullable funding_source cannot be null');
        }
        $allowedValues = $this->getFundingSourceAllowableValues();
        if (!in_array($funding_source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'funding_source', must be one of '%s'",
                    $funding_source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['funding_source'] = $funding_source;

        return $this;
    }

    /**
     * Gets holder_name
     *
     * @return string|null
     */
    public function getHolderName()
    {
        return $this->container['holder_name'];
    }

    /**
     * Sets holder_name
     *
     * @param string|null $holder_name The name of the card holder.
     *
     * @return self
     */
    public function setHolderName($holder_name)
    {
        if (is_null($holder_name)) {
            throw new \InvalidArgumentException('non-nullable holder_name cannot be null');
        }
        $this->container['holder_name'] = $holder_name;

        return $this;
    }

    /**
     * Gets network_payment_reference
     *
     * @return string|null
     */
    public function getNetworkPaymentReference()
    {
        return $this->container['network_payment_reference'];
    }

    /**
     * Sets network_payment_reference
     *
     * @param string|null $network_payment_reference The network token reference. This is the [`networkTxReference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_additionalData-ResponseAdditionalDataCommon-networkTxReference) from the response to the first payment.
     *
     * @return self
     */
    public function setNetworkPaymentReference($network_payment_reference)
    {
        if (is_null($network_payment_reference)) {
            throw new \InvalidArgumentException('non-nullable network_payment_reference cannot be null');
        }
        $this->container['network_payment_reference'] = $network_payment_reference;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number The card number. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets recurring_detail_reference
     *
     * @return string|null
     * @deprecated
     */
    public function getRecurringDetailReference()
    {
        return $this->container['recurring_detail_reference'];
    }

    /**
     * Sets recurring_detail_reference
     *
     * @param string|null $recurring_detail_reference This is the `recurringDetailReference` returned in the response when you created the token.
     *
     * @return self
     * @deprecated
     */
    public function setRecurringDetailReference($recurring_detail_reference)
    {
        if (is_null($recurring_detail_reference)) {
            throw new \InvalidArgumentException('non-nullable recurring_detail_reference cannot be null');
        }
        $this->container['recurring_detail_reference'] = $recurring_detail_reference;

        return $this;
    }

    /**
     * Gets shopper_notification_reference
     *
     * @return string|null
     */
    public function getShopperNotificationReference()
    {
        return $this->container['shopper_notification_reference'];
    }

    /**
     * Sets shopper_notification_reference
     *
     * @param string|null $shopper_notification_reference The `shopperNotificationReference` returned in the response when you requested to notify the shopper. Used only for recurring payments in India.
     *
     * @return self
     */
    public function setShopperNotificationReference($shopper_notification_reference)
    {
        if (is_null($shopper_notification_reference)) {
            throw new \InvalidArgumentException('non-nullable shopper_notification_reference cannot be null');
        }
        $this->container['shopper_notification_reference'] = $shopper_notification_reference;

        return $this;
    }

    /**
     * Gets stored_payment_method_id
     *
     * @return string|null
     */
    public function getStoredPaymentMethodId()
    {
        return $this->container['stored_payment_method_id'];
    }

    /**
     * Sets stored_payment_method_id
     *
     * @param string|null $stored_payment_method_id This is the `recurringDetailReference` returned in the response when you created the token.
     *
     * @return self
     */
    public function setStoredPaymentMethodId($stored_payment_method_id)
    {
        if (is_null($stored_payment_method_id)) {
            throw new \InvalidArgumentException('non-nullable stored_payment_method_id cannot be null');
        }
        $this->container['stored_payment_method_id'] = $stored_payment_method_id;

        return $this;
    }

    /**
     * Gets three_ds2_sdk_version
     *
     * @return string|null
     */
    public function getThreeDs2SdkVersion()
    {
        return $this->container['three_ds2_sdk_version'];
    }

    /**
     * Sets three_ds2_sdk_version
     *
     * @param string|null $three_ds2_sdk_version Version of the 3D Secure 2 mobile SDK.
     *
     * @return self
     */
    public function setThreeDs2SdkVersion($three_ds2_sdk_version)
    {
        if (is_null($three_ds2_sdk_version)) {
            throw new \InvalidArgumentException('non-nullable three_ds2_sdk_version cannot be null');
        }
        if ((mb_strlen($three_ds2_sdk_version) > 12)) {
            throw new \InvalidArgumentException('invalid length for $three_ds2_sdk_version when calling CardDetails., must be smaller than or equal to 12.');
        }

        $this->container['three_ds2_sdk_version'] = $three_ds2_sdk_version;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Default payment method details. Common for scheme payment methods, and for simple payment method details.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


