<?php

/**
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 70
 * Contact: developer-experience@adyen.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Adyen\Model\Checkout;

use \ArrayAccess;
use Adyen\Model\Checkout\ObjectSerializer;

/**
 * AdditionalDataSubMerchant Class Doc Comment
 *
 * @category Class
 * @package  Adyen
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AdditionalDataSubMerchant implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AdditionalDataSubMerchant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sub_merchant_number_of_sub_sellers' => 'string',
        'sub_merchant_sub_seller_sub_seller_nr_city' => 'string',
        'sub_merchant_sub_seller_sub_seller_nr_country' => 'string',
        'sub_merchant_sub_seller_sub_seller_nr_id' => 'string',
        'sub_merchant_sub_seller_sub_seller_nr_mcc' => 'string',
        'sub_merchant_sub_seller_sub_seller_nr_name' => 'string',
        'sub_merchant_sub_seller_sub_seller_nr_postal_code' => 'string',
        'sub_merchant_sub_seller_sub_seller_nr_state' => 'string',
        'sub_merchant_sub_seller_sub_seller_nr_street' => 'string',
        'sub_merchant_sub_seller_sub_seller_nr_tax_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sub_merchant_number_of_sub_sellers' => null,
        'sub_merchant_sub_seller_sub_seller_nr_city' => null,
        'sub_merchant_sub_seller_sub_seller_nr_country' => null,
        'sub_merchant_sub_seller_sub_seller_nr_id' => null,
        'sub_merchant_sub_seller_sub_seller_nr_mcc' => null,
        'sub_merchant_sub_seller_sub_seller_nr_name' => null,
        'sub_merchant_sub_seller_sub_seller_nr_postal_code' => null,
        'sub_merchant_sub_seller_sub_seller_nr_state' => null,
        'sub_merchant_sub_seller_sub_seller_nr_street' => null,
        'sub_merchant_sub_seller_sub_seller_nr_tax_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'sub_merchant_number_of_sub_sellers' => false,
		'sub_merchant_sub_seller_sub_seller_nr_city' => false,
		'sub_merchant_sub_seller_sub_seller_nr_country' => false,
		'sub_merchant_sub_seller_sub_seller_nr_id' => false,
		'sub_merchant_sub_seller_sub_seller_nr_mcc' => false,
		'sub_merchant_sub_seller_sub_seller_nr_name' => false,
		'sub_merchant_sub_seller_sub_seller_nr_postal_code' => false,
		'sub_merchant_sub_seller_sub_seller_nr_state' => false,
		'sub_merchant_sub_seller_sub_seller_nr_street' => false,
		'sub_merchant_sub_seller_sub_seller_nr_tax_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sub_merchant_number_of_sub_sellers' => 'subMerchant.numberOfSubSellers',
        'sub_merchant_sub_seller_sub_seller_nr_city' => 'subMerchant.subSeller[subSellerNr].city',
        'sub_merchant_sub_seller_sub_seller_nr_country' => 'subMerchant.subSeller[subSellerNr].country',
        'sub_merchant_sub_seller_sub_seller_nr_id' => 'subMerchant.subSeller[subSellerNr].id',
        'sub_merchant_sub_seller_sub_seller_nr_mcc' => 'subMerchant.subSeller[subSellerNr].mcc',
        'sub_merchant_sub_seller_sub_seller_nr_name' => 'subMerchant.subSeller[subSellerNr].name',
        'sub_merchant_sub_seller_sub_seller_nr_postal_code' => 'subMerchant.subSeller[subSellerNr].postalCode',
        'sub_merchant_sub_seller_sub_seller_nr_state' => 'subMerchant.subSeller[subSellerNr].state',
        'sub_merchant_sub_seller_sub_seller_nr_street' => 'subMerchant.subSeller[subSellerNr].street',
        'sub_merchant_sub_seller_sub_seller_nr_tax_id' => 'subMerchant.subSeller[subSellerNr].taxId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sub_merchant_number_of_sub_sellers' => 'setSubMerchantNumberOfSubSellers',
        'sub_merchant_sub_seller_sub_seller_nr_city' => 'setSubMerchantSubSellerSubSellerNrCity',
        'sub_merchant_sub_seller_sub_seller_nr_country' => 'setSubMerchantSubSellerSubSellerNrCountry',
        'sub_merchant_sub_seller_sub_seller_nr_id' => 'setSubMerchantSubSellerSubSellerNrId',
        'sub_merchant_sub_seller_sub_seller_nr_mcc' => 'setSubMerchantSubSellerSubSellerNrMcc',
        'sub_merchant_sub_seller_sub_seller_nr_name' => 'setSubMerchantSubSellerSubSellerNrName',
        'sub_merchant_sub_seller_sub_seller_nr_postal_code' => 'setSubMerchantSubSellerSubSellerNrPostalCode',
        'sub_merchant_sub_seller_sub_seller_nr_state' => 'setSubMerchantSubSellerSubSellerNrState',
        'sub_merchant_sub_seller_sub_seller_nr_street' => 'setSubMerchantSubSellerSubSellerNrStreet',
        'sub_merchant_sub_seller_sub_seller_nr_tax_id' => 'setSubMerchantSubSellerSubSellerNrTaxId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sub_merchant_number_of_sub_sellers' => 'getSubMerchantNumberOfSubSellers',
        'sub_merchant_sub_seller_sub_seller_nr_city' => 'getSubMerchantSubSellerSubSellerNrCity',
        'sub_merchant_sub_seller_sub_seller_nr_country' => 'getSubMerchantSubSellerSubSellerNrCountry',
        'sub_merchant_sub_seller_sub_seller_nr_id' => 'getSubMerchantSubSellerSubSellerNrId',
        'sub_merchant_sub_seller_sub_seller_nr_mcc' => 'getSubMerchantSubSellerSubSellerNrMcc',
        'sub_merchant_sub_seller_sub_seller_nr_name' => 'getSubMerchantSubSellerSubSellerNrName',
        'sub_merchant_sub_seller_sub_seller_nr_postal_code' => 'getSubMerchantSubSellerSubSellerNrPostalCode',
        'sub_merchant_sub_seller_sub_seller_nr_state' => 'getSubMerchantSubSellerSubSellerNrState',
        'sub_merchant_sub_seller_sub_seller_nr_street' => 'getSubMerchantSubSellerSubSellerNrStreet',
        'sub_merchant_sub_seller_sub_seller_nr_tax_id' => 'getSubMerchantSubSellerSubSellerNrTaxId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sub_merchant_number_of_sub_sellers', $data ?? [], null);
        $this->setIfExists('sub_merchant_sub_seller_sub_seller_nr_city', $data ?? [], null);
        $this->setIfExists('sub_merchant_sub_seller_sub_seller_nr_country', $data ?? [], null);
        $this->setIfExists('sub_merchant_sub_seller_sub_seller_nr_id', $data ?? [], null);
        $this->setIfExists('sub_merchant_sub_seller_sub_seller_nr_mcc', $data ?? [], null);
        $this->setIfExists('sub_merchant_sub_seller_sub_seller_nr_name', $data ?? [], null);
        $this->setIfExists('sub_merchant_sub_seller_sub_seller_nr_postal_code', $data ?? [], null);
        $this->setIfExists('sub_merchant_sub_seller_sub_seller_nr_state', $data ?? [], null);
        $this->setIfExists('sub_merchant_sub_seller_sub_seller_nr_street', $data ?? [], null);
        $this->setIfExists('sub_merchant_sub_seller_sub_seller_nr_tax_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sub_merchant_number_of_sub_sellers
     *
     * @return string|null
     */
    public function getSubMerchantNumberOfSubSellers()
    {
        return $this->container['sub_merchant_number_of_sub_sellers'];
    }

    /**
     * Sets sub_merchant_number_of_sub_sellers
     *
     * @param string|null $sub_merchant_number_of_sub_sellers Required for transactions performed by registered payment facilitators. Indicates the number of sub-merchants contained in the request. For example, **3**.
     *
     * @return self
     */
    public function setSubMerchantNumberOfSubSellers($sub_merchant_number_of_sub_sellers)
    {
        if (is_null($sub_merchant_number_of_sub_sellers)) {
            throw new \InvalidArgumentException('non-nullable sub_merchant_number_of_sub_sellers cannot be null');
        }
        $this->container['sub_merchant_number_of_sub_sellers'] = $sub_merchant_number_of_sub_sellers;

        return $this;
    }

    /**
     * Gets sub_merchant_sub_seller_sub_seller_nr_city
     *
     * @return string|null
     */
    public function getSubMerchantSubSellerSubSellerNrCity()
    {
        return $this->container['sub_merchant_sub_seller_sub_seller_nr_city'];
    }

    /**
     * Sets sub_merchant_sub_seller_sub_seller_nr_city
     *
     * @param string|null $sub_merchant_sub_seller_sub_seller_nr_city Required for transactions performed by registered payment facilitators. The city of the sub-merchant's address. * Format: Alphanumeric * Maximum length: 13 characters
     *
     * @return self
     */
    public function setSubMerchantSubSellerSubSellerNrCity($sub_merchant_sub_seller_sub_seller_nr_city)
    {
        if (is_null($sub_merchant_sub_seller_sub_seller_nr_city)) {
            throw new \InvalidArgumentException('non-nullable sub_merchant_sub_seller_sub_seller_nr_city cannot be null');
        }
        $this->container['sub_merchant_sub_seller_sub_seller_nr_city'] = $sub_merchant_sub_seller_sub_seller_nr_city;

        return $this;
    }

    /**
     * Gets sub_merchant_sub_seller_sub_seller_nr_country
     *
     * @return string|null
     */
    public function getSubMerchantSubSellerSubSellerNrCountry()
    {
        return $this->container['sub_merchant_sub_seller_sub_seller_nr_country'];
    }

    /**
     * Sets sub_merchant_sub_seller_sub_seller_nr_country
     *
     * @param string|null $sub_merchant_sub_seller_sub_seller_nr_country Required for transactions performed by registered payment facilitators. The three-letter country code of the sub-merchant's address. For example, **BRA** for Brazil.  * Format: [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) * Fixed length: 3 characters
     *
     * @return self
     */
    public function setSubMerchantSubSellerSubSellerNrCountry($sub_merchant_sub_seller_sub_seller_nr_country)
    {
        if (is_null($sub_merchant_sub_seller_sub_seller_nr_country)) {
            throw new \InvalidArgumentException('non-nullable sub_merchant_sub_seller_sub_seller_nr_country cannot be null');
        }
        $this->container['sub_merchant_sub_seller_sub_seller_nr_country'] = $sub_merchant_sub_seller_sub_seller_nr_country;

        return $this;
    }

    /**
     * Gets sub_merchant_sub_seller_sub_seller_nr_id
     *
     * @return string|null
     */
    public function getSubMerchantSubSellerSubSellerNrId()
    {
        return $this->container['sub_merchant_sub_seller_sub_seller_nr_id'];
    }

    /**
     * Sets sub_merchant_sub_seller_sub_seller_nr_id
     *
     * @param string|null $sub_merchant_sub_seller_sub_seller_nr_id Required for transactions performed by registered payment facilitators. A unique identifier that you create for the sub-merchant, used by schemes to identify the sub-merchant.  * Format: Alphanumeric * Maximum length: 15 characters
     *
     * @return self
     */
    public function setSubMerchantSubSellerSubSellerNrId($sub_merchant_sub_seller_sub_seller_nr_id)
    {
        if (is_null($sub_merchant_sub_seller_sub_seller_nr_id)) {
            throw new \InvalidArgumentException('non-nullable sub_merchant_sub_seller_sub_seller_nr_id cannot be null');
        }
        $this->container['sub_merchant_sub_seller_sub_seller_nr_id'] = $sub_merchant_sub_seller_sub_seller_nr_id;

        return $this;
    }

    /**
     * Gets sub_merchant_sub_seller_sub_seller_nr_mcc
     *
     * @return string|null
     */
    public function getSubMerchantSubSellerSubSellerNrMcc()
    {
        return $this->container['sub_merchant_sub_seller_sub_seller_nr_mcc'];
    }

    /**
     * Sets sub_merchant_sub_seller_sub_seller_nr_mcc
     *
     * @param string|null $sub_merchant_sub_seller_sub_seller_nr_mcc Required for transactions performed by registered payment facilitators. The sub-merchant's 4-digit Merchant Category Code (MCC).  * Format: Numeric * Fixed length: 4 digits
     *
     * @return self
     */
    public function setSubMerchantSubSellerSubSellerNrMcc($sub_merchant_sub_seller_sub_seller_nr_mcc)
    {
        if (is_null($sub_merchant_sub_seller_sub_seller_nr_mcc)) {
            throw new \InvalidArgumentException('non-nullable sub_merchant_sub_seller_sub_seller_nr_mcc cannot be null');
        }
        $this->container['sub_merchant_sub_seller_sub_seller_nr_mcc'] = $sub_merchant_sub_seller_sub_seller_nr_mcc;

        return $this;
    }

    /**
     * Gets sub_merchant_sub_seller_sub_seller_nr_name
     *
     * @return string|null
     */
    public function getSubMerchantSubSellerSubSellerNrName()
    {
        return $this->container['sub_merchant_sub_seller_sub_seller_nr_name'];
    }

    /**
     * Sets sub_merchant_sub_seller_sub_seller_nr_name
     *
     * @param string|null $sub_merchant_sub_seller_sub_seller_nr_name Required for transactions performed by registered payment facilitators. The name of the sub-merchant. Based on scheme specifications, this value will overwrite the shopper statement  that will appear in the card statement. * Format: Alphanumeric * Maximum length: 22 characters
     *
     * @return self
     */
    public function setSubMerchantSubSellerSubSellerNrName($sub_merchant_sub_seller_sub_seller_nr_name)
    {
        if (is_null($sub_merchant_sub_seller_sub_seller_nr_name)) {
            throw new \InvalidArgumentException('non-nullable sub_merchant_sub_seller_sub_seller_nr_name cannot be null');
        }
        $this->container['sub_merchant_sub_seller_sub_seller_nr_name'] = $sub_merchant_sub_seller_sub_seller_nr_name;

        return $this;
    }

    /**
     * Gets sub_merchant_sub_seller_sub_seller_nr_postal_code
     *
     * @return string|null
     */
    public function getSubMerchantSubSellerSubSellerNrPostalCode()
    {
        return $this->container['sub_merchant_sub_seller_sub_seller_nr_postal_code'];
    }

    /**
     * Sets sub_merchant_sub_seller_sub_seller_nr_postal_code
     *
     * @param string|null $sub_merchant_sub_seller_sub_seller_nr_postal_code Required for transactions performed by registered payment facilitators. The postal code of the sub-merchant's address, without dashes. * Format: Numeric * Fixed length: 8 digits
     *
     * @return self
     */
    public function setSubMerchantSubSellerSubSellerNrPostalCode($sub_merchant_sub_seller_sub_seller_nr_postal_code)
    {
        if (is_null($sub_merchant_sub_seller_sub_seller_nr_postal_code)) {
            throw new \InvalidArgumentException('non-nullable sub_merchant_sub_seller_sub_seller_nr_postal_code cannot be null');
        }
        $this->container['sub_merchant_sub_seller_sub_seller_nr_postal_code'] = $sub_merchant_sub_seller_sub_seller_nr_postal_code;

        return $this;
    }

    /**
     * Gets sub_merchant_sub_seller_sub_seller_nr_state
     *
     * @return string|null
     */
    public function getSubMerchantSubSellerSubSellerNrState()
    {
        return $this->container['sub_merchant_sub_seller_sub_seller_nr_state'];
    }

    /**
     * Sets sub_merchant_sub_seller_sub_seller_nr_state
     *
     * @param string|null $sub_merchant_sub_seller_sub_seller_nr_state Required for transactions performed by registered payment facilitators. The state code of the sub-merchant's address, if applicable to the country. * Format: Alphanumeric * Maximum length: 2 characters
     *
     * @return self
     */
    public function setSubMerchantSubSellerSubSellerNrState($sub_merchant_sub_seller_sub_seller_nr_state)
    {
        if (is_null($sub_merchant_sub_seller_sub_seller_nr_state)) {
            throw new \InvalidArgumentException('non-nullable sub_merchant_sub_seller_sub_seller_nr_state cannot be null');
        }
        $this->container['sub_merchant_sub_seller_sub_seller_nr_state'] = $sub_merchant_sub_seller_sub_seller_nr_state;

        return $this;
    }

    /**
     * Gets sub_merchant_sub_seller_sub_seller_nr_street
     *
     * @return string|null
     */
    public function getSubMerchantSubSellerSubSellerNrStreet()
    {
        return $this->container['sub_merchant_sub_seller_sub_seller_nr_street'];
    }

    /**
     * Sets sub_merchant_sub_seller_sub_seller_nr_street
     *
     * @param string|null $sub_merchant_sub_seller_sub_seller_nr_street Required for transactions performed by registered payment facilitators. The street name and house number of the sub-merchant's address. * Format: Alphanumeric * Maximum length: 60 characters
     *
     * @return self
     */
    public function setSubMerchantSubSellerSubSellerNrStreet($sub_merchant_sub_seller_sub_seller_nr_street)
    {
        if (is_null($sub_merchant_sub_seller_sub_seller_nr_street)) {
            throw new \InvalidArgumentException('non-nullable sub_merchant_sub_seller_sub_seller_nr_street cannot be null');
        }
        $this->container['sub_merchant_sub_seller_sub_seller_nr_street'] = $sub_merchant_sub_seller_sub_seller_nr_street;

        return $this;
    }

    /**
     * Gets sub_merchant_sub_seller_sub_seller_nr_tax_id
     *
     * @return string|null
     */
    public function getSubMerchantSubSellerSubSellerNrTaxId()
    {
        return $this->container['sub_merchant_sub_seller_sub_seller_nr_tax_id'];
    }

    /**
     * Sets sub_merchant_sub_seller_sub_seller_nr_tax_id
     *
     * @param string|null $sub_merchant_sub_seller_sub_seller_nr_tax_id Required for transactions performed by registered payment facilitators. The tax ID of the sub-merchant. * Format: Numeric * Fixed length: 11 digits for the CPF or 14 digits for the CNPJ
     *
     * @return self
     */
    public function setSubMerchantSubSellerSubSellerNrTaxId($sub_merchant_sub_seller_sub_seller_nr_tax_id)
    {
        if (is_null($sub_merchant_sub_seller_sub_seller_nr_tax_id)) {
            throw new \InvalidArgumentException('non-nullable sub_merchant_sub_seller_sub_seller_nr_tax_id cannot be null');
        }
        $this->container['sub_merchant_sub_seller_sub_seller_nr_tax_id'] = $sub_merchant_sub_seller_sub_seller_nr_tax_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
