<?php

/**
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 70
 * Contact: developer-experience@adyen.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Adyen\Model\Checkout;

use \ArrayAccess;
use Adyen\Model\Checkout\ObjectSerializer;

/**
 * ThreeDSecureData Class Doc Comment
 *
 * @category Class
 * @package  Adyen
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ThreeDSecureData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ThreeDSecureData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'authentication_response' => 'string',
        'cavv' => 'string',
        'cavv_algorithm' => 'string',
        'challenge_cancel' => 'string',
        'directory_response' => 'string',
        'ds_trans_id' => 'string',
        'eci' => 'string',
        'risk_score' => 'string',
        'three_ds_version' => 'string',
        'token_authentication_verification_value' => 'string',
        'trans_status_reason' => 'string',
        'xid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'authentication_response' => null,
        'cavv' => 'byte',
        'cavv_algorithm' => null,
        'challenge_cancel' => null,
        'directory_response' => null,
        'ds_trans_id' => null,
        'eci' => null,
        'risk_score' => null,
        'three_ds_version' => null,
        'token_authentication_verification_value' => 'byte',
        'trans_status_reason' => null,
        'xid' => 'byte'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'authentication_response' => false,
		'cavv' => false,
		'cavv_algorithm' => false,
		'challenge_cancel' => false,
		'directory_response' => false,
		'ds_trans_id' => false,
		'eci' => false,
		'risk_score' => false,
		'three_ds_version' => false,
		'token_authentication_verification_value' => false,
		'trans_status_reason' => false,
		'xid' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authentication_response' => 'authenticationResponse',
        'cavv' => 'cavv',
        'cavv_algorithm' => 'cavvAlgorithm',
        'challenge_cancel' => 'challengeCancel',
        'directory_response' => 'directoryResponse',
        'ds_trans_id' => 'dsTransID',
        'eci' => 'eci',
        'risk_score' => 'riskScore',
        'three_ds_version' => 'threeDSVersion',
        'token_authentication_verification_value' => 'tokenAuthenticationVerificationValue',
        'trans_status_reason' => 'transStatusReason',
        'xid' => 'xid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authentication_response' => 'setAuthenticationResponse',
        'cavv' => 'setCavv',
        'cavv_algorithm' => 'setCavvAlgorithm',
        'challenge_cancel' => 'setChallengeCancel',
        'directory_response' => 'setDirectoryResponse',
        'ds_trans_id' => 'setDsTransId',
        'eci' => 'setEci',
        'risk_score' => 'setRiskScore',
        'three_ds_version' => 'setThreeDsVersion',
        'token_authentication_verification_value' => 'setTokenAuthenticationVerificationValue',
        'trans_status_reason' => 'setTransStatusReason',
        'xid' => 'setXid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authentication_response' => 'getAuthenticationResponse',
        'cavv' => 'getCavv',
        'cavv_algorithm' => 'getCavvAlgorithm',
        'challenge_cancel' => 'getChallengeCancel',
        'directory_response' => 'getDirectoryResponse',
        'ds_trans_id' => 'getDsTransId',
        'eci' => 'getEci',
        'risk_score' => 'getRiskScore',
        'three_ds_version' => 'getThreeDsVersion',
        'token_authentication_verification_value' => 'getTokenAuthenticationVerificationValue',
        'trans_status_reason' => 'getTransStatusReason',
        'xid' => 'getXid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const AUTHENTICATION_RESPONSE_Y = 'Y';
    public const AUTHENTICATION_RESPONSE_N = 'N';
    public const AUTHENTICATION_RESPONSE_U = 'U';
    public const AUTHENTICATION_RESPONSE_A = 'A';
    public const CHALLENGE_CANCEL__01 = '01';
    public const CHALLENGE_CANCEL__02 = '02';
    public const CHALLENGE_CANCEL__03 = '03';
    public const CHALLENGE_CANCEL__04 = '04';
    public const CHALLENGE_CANCEL__05 = '05';
    public const CHALLENGE_CANCEL__06 = '06';
    public const CHALLENGE_CANCEL__07 = '07';
    public const DIRECTORY_RESPONSE_A = 'A';
    public const DIRECTORY_RESPONSE_C = 'C';
    public const DIRECTORY_RESPONSE_D = 'D';
    public const DIRECTORY_RESPONSE_I = 'I';
    public const DIRECTORY_RESPONSE_N = 'N';
    public const DIRECTORY_RESPONSE_R = 'R';
    public const DIRECTORY_RESPONSE_U = 'U';
    public const DIRECTORY_RESPONSE_Y = 'Y';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthenticationResponseAllowableValues()
    {
        return [
            self::AUTHENTICATION_RESPONSE_Y,
            self::AUTHENTICATION_RESPONSE_N,
            self::AUTHENTICATION_RESPONSE_U,
            self::AUTHENTICATION_RESPONSE_A,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChallengeCancelAllowableValues()
    {
        return [
            self::CHALLENGE_CANCEL__01,
            self::CHALLENGE_CANCEL__02,
            self::CHALLENGE_CANCEL__03,
            self::CHALLENGE_CANCEL__04,
            self::CHALLENGE_CANCEL__05,
            self::CHALLENGE_CANCEL__06,
            self::CHALLENGE_CANCEL__07,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDirectoryResponseAllowableValues()
    {
        return [
            self::DIRECTORY_RESPONSE_A,
            self::DIRECTORY_RESPONSE_C,
            self::DIRECTORY_RESPONSE_D,
            self::DIRECTORY_RESPONSE_I,
            self::DIRECTORY_RESPONSE_N,
            self::DIRECTORY_RESPONSE_R,
            self::DIRECTORY_RESPONSE_U,
            self::DIRECTORY_RESPONSE_Y,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('authentication_response', $data ?? [], null);
        $this->setIfExists('cavv', $data ?? [], null);
        $this->setIfExists('cavv_algorithm', $data ?? [], null);
        $this->setIfExists('challenge_cancel', $data ?? [], null);
        $this->setIfExists('directory_response', $data ?? [], null);
        $this->setIfExists('ds_trans_id', $data ?? [], null);
        $this->setIfExists('eci', $data ?? [], null);
        $this->setIfExists('risk_score', $data ?? [], null);
        $this->setIfExists('three_ds_version', $data ?? [], null);
        $this->setIfExists('token_authentication_verification_value', $data ?? [], null);
        $this->setIfExists('trans_status_reason', $data ?? [], null);
        $this->setIfExists('xid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAuthenticationResponseAllowableValues();
        if (!is_null($this->container['authentication_response']) && !in_array($this->container['authentication_response'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authentication_response', must be one of '%s'",
                $this->container['authentication_response'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getChallengeCancelAllowableValues();
        if (!is_null($this->container['challenge_cancel']) && !in_array($this->container['challenge_cancel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'challenge_cancel', must be one of '%s'",
                $this->container['challenge_cancel'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDirectoryResponseAllowableValues();
        if (!is_null($this->container['directory_response']) && !in_array($this->container['directory_response'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'directory_response', must be one of '%s'",
                $this->container['directory_response'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authentication_response
     *
     * @return string|null
     */
    public function getAuthenticationResponse()
    {
        return $this->container['authentication_response'];
    }

    /**
     * Sets authentication_response
     *
     * @param string|null $authentication_response In 3D Secure 1, the authentication response if the shopper was redirected.  In 3D Secure 2, this is the `transStatus` from the challenge result. If the transaction was frictionless, omit this parameter.
     *
     * @return self
     */
    public function setAuthenticationResponse($authentication_response)
    {
        if (is_null($authentication_response)) {
            throw new \InvalidArgumentException('non-nullable authentication_response cannot be null');
        }
        $allowedValues = $this->getAuthenticationResponseAllowableValues();
        if (!in_array($authentication_response, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authentication_response', must be one of '%s'",
                    $authentication_response,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authentication_response'] = $authentication_response;

        return $this;
    }

    /**
     * Gets cavv
     *
     * @return string|null
     */
    public function getCavv()
    {
        return $this->container['cavv'];
    }

    /**
     * Sets cavv
     *
     * @param string|null $cavv The cardholder authentication value (base64 encoded, 20 bytes in a decoded form).
     *
     * @return self
     */
    public function setCavv($cavv)
    {
        if (is_null($cavv)) {
            throw new \InvalidArgumentException('non-nullable cavv cannot be null');
        }
        $this->container['cavv'] = $cavv;

        return $this;
    }

    /**
     * Gets cavv_algorithm
     *
     * @return string|null
     */
    public function getCavvAlgorithm()
    {
        return $this->container['cavv_algorithm'];
    }

    /**
     * Sets cavv_algorithm
     *
     * @param string|null $cavv_algorithm The CAVV algorithm used. Include this only for 3D Secure 1.
     *
     * @return self
     */
    public function setCavvAlgorithm($cavv_algorithm)
    {
        if (is_null($cavv_algorithm)) {
            throw new \InvalidArgumentException('non-nullable cavv_algorithm cannot be null');
        }
        $this->container['cavv_algorithm'] = $cavv_algorithm;

        return $this;
    }

    /**
     * Gets challenge_cancel
     *
     * @return string|null
     */
    public function getChallengeCancel()
    {
        return $this->container['challenge_cancel'];
    }

    /**
     * Sets challenge_cancel
     *
     * @param string|null $challenge_cancel Indicator informing the Access Control Server (ACS) and the Directory Server (DS) that the authentication has been cancelled. For possible values, refer to [3D Secure API reference](https://docs.adyen.com/online-payments/3d-secure/api-reference#mpidata).
     *
     * @return self
     */
    public function setChallengeCancel($challenge_cancel)
    {
        if (is_null($challenge_cancel)) {
            throw new \InvalidArgumentException('non-nullable challenge_cancel cannot be null');
        }
        $allowedValues = $this->getChallengeCancelAllowableValues();
        if (!in_array($challenge_cancel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'challenge_cancel', must be one of '%s'",
                    $challenge_cancel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['challenge_cancel'] = $challenge_cancel;

        return $this;
    }

    /**
     * Gets directory_response
     *
     * @return string|null
     */
    public function getDirectoryResponse()
    {
        return $this->container['directory_response'];
    }

    /**
     * Sets directory_response
     *
     * @param string|null $directory_response In 3D Secure 1, this is the enrollment response from the 3D directory server.  In 3D Secure 2, this is the `transStatus` from the `ARes`.
     *
     * @return self
     */
    public function setDirectoryResponse($directory_response)
    {
        if (is_null($directory_response)) {
            throw new \InvalidArgumentException('non-nullable directory_response cannot be null');
        }
        $allowedValues = $this->getDirectoryResponseAllowableValues();
        if (!in_array($directory_response, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'directory_response', must be one of '%s'",
                    $directory_response,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['directory_response'] = $directory_response;

        return $this;
    }

    /**
     * Gets ds_trans_id
     *
     * @return string|null
     */
    public function getDsTransId()
    {
        return $this->container['ds_trans_id'];
    }

    /**
     * Sets ds_trans_id
     *
     * @param string|null $ds_trans_id Supported for 3D Secure 2. The unique transaction identifier assigned by the Directory Server (DS) to identify a single transaction.
     *
     * @return self
     */
    public function setDsTransId($ds_trans_id)
    {
        if (is_null($ds_trans_id)) {
            throw new \InvalidArgumentException('non-nullable ds_trans_id cannot be null');
        }
        $this->container['ds_trans_id'] = $ds_trans_id;

        return $this;
    }

    /**
     * Gets eci
     *
     * @return string|null
     */
    public function getEci()
    {
        return $this->container['eci'];
    }

    /**
     * Sets eci
     *
     * @param string|null $eci The electronic commerce indicator.
     *
     * @return self
     */
    public function setEci($eci)
    {
        if (is_null($eci)) {
            throw new \InvalidArgumentException('non-nullable eci cannot be null');
        }
        $this->container['eci'] = $eci;

        return $this;
    }

    /**
     * Gets risk_score
     *
     * @return string|null
     */
    public function getRiskScore()
    {
        return $this->container['risk_score'];
    }

    /**
     * Sets risk_score
     *
     * @param string|null $risk_score Risk score calculated by Directory Server (DS). Required for Cartes Bancaires integrations.
     *
     * @return self
     */
    public function setRiskScore($risk_score)
    {
        if (is_null($risk_score)) {
            throw new \InvalidArgumentException('non-nullable risk_score cannot be null');
        }
        $this->container['risk_score'] = $risk_score;

        return $this;
    }

    /**
     * Gets three_ds_version
     *
     * @return string|null
     */
    public function getThreeDsVersion()
    {
        return $this->container['three_ds_version'];
    }

    /**
     * Sets three_ds_version
     *
     * @param string|null $three_ds_version The version of the 3D Secure protocol.
     *
     * @return self
     */
    public function setThreeDsVersion($three_ds_version)
    {
        if (is_null($three_ds_version)) {
            throw new \InvalidArgumentException('non-nullable three_ds_version cannot be null');
        }
        $this->container['three_ds_version'] = $three_ds_version;

        return $this;
    }

    /**
     * Gets token_authentication_verification_value
     *
     * @return string|null
     */
    public function getTokenAuthenticationVerificationValue()
    {
        return $this->container['token_authentication_verification_value'];
    }

    /**
     * Sets token_authentication_verification_value
     *
     * @param string|null $token_authentication_verification_value Network token authentication verification value (TAVV). The network token cryptogram.
     *
     * @return self
     */
    public function setTokenAuthenticationVerificationValue($token_authentication_verification_value)
    {
        if (is_null($token_authentication_verification_value)) {
            throw new \InvalidArgumentException('non-nullable token_authentication_verification_value cannot be null');
        }
        $this->container['token_authentication_verification_value'] = $token_authentication_verification_value;

        return $this;
    }

    /**
     * Gets trans_status_reason
     *
     * @return string|null
     */
    public function getTransStatusReason()
    {
        return $this->container['trans_status_reason'];
    }

    /**
     * Sets trans_status_reason
     *
     * @param string|null $trans_status_reason Provides information on why the `transStatus` field has the specified value. For possible values, refer to [our docs](https://docs.adyen.com/online-payments/3d-secure/api-reference#possible-transstatusreason-values).
     *
     * @return self
     */
    public function setTransStatusReason($trans_status_reason)
    {
        if (is_null($trans_status_reason)) {
            throw new \InvalidArgumentException('non-nullable trans_status_reason cannot be null');
        }
        $this->container['trans_status_reason'] = $trans_status_reason;

        return $this;
    }

    /**
     * Gets xid
     *
     * @return string|null
     */
    public function getXid()
    {
        return $this->container['xid'];
    }

    /**
     * Sets xid
     *
     * @param string|null $xid Supported for 3D Secure 1. The transaction identifier (Base64-encoded, 20 bytes in a decoded form).
     *
     * @return self
     */
    public function setXid($xid)
    {
        if (is_null($xid)) {
            throw new \InvalidArgumentException('non-nullable xid cannot be null');
        }
        $this->container['xid'] = $xid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


