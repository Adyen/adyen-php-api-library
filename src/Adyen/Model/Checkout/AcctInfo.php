<?php

/**
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 70
 * Contact: developer-experience@adyen.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Adyen\Model\Checkout;

use \ArrayAccess;
use \Adyen\Model\Checkout\ObjectSerializer;

/**
 * AcctInfo Class Doc Comment
 *
 * @category Class
 * @package  Adyen\Model\Checkout
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AcctInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AcctInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ch_acc_age_ind' => 'string',
        'ch_acc_change' => 'string',
        'ch_acc_change_ind' => 'string',
        'ch_acc_pw_change' => 'string',
        'ch_acc_pw_change_ind' => 'string',
        'ch_acc_string' => 'string',
        'nb_purchase_account' => 'string',
        'payment_acc_age' => 'string',
        'payment_acc_ind' => 'string',
        'provision_attempts_day' => 'string',
        'ship_address_usage' => 'string',
        'ship_address_usage_ind' => 'string',
        'ship_name_indicator' => 'string',
        'suspicious_acc_activity' => 'string',
        'txn_activity_day' => 'string',
        'txn_activity_year' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ch_acc_age_ind' => null,
        'ch_acc_change' => null,
        'ch_acc_change_ind' => null,
        'ch_acc_pw_change' => null,
        'ch_acc_pw_change_ind' => null,
        'ch_acc_string' => null,
        'nb_purchase_account' => null,
        'payment_acc_age' => null,
        'payment_acc_ind' => null,
        'provision_attempts_day' => null,
        'ship_address_usage' => null,
        'ship_address_usage_ind' => null,
        'ship_name_indicator' => null,
        'suspicious_acc_activity' => null,
        'txn_activity_day' => null,
        'txn_activity_year' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ch_acc_age_ind' => false,
		'ch_acc_change' => false,
		'ch_acc_change_ind' => false,
		'ch_acc_pw_change' => false,
		'ch_acc_pw_change_ind' => false,
		'ch_acc_string' => false,
		'nb_purchase_account' => false,
		'payment_acc_age' => false,
		'payment_acc_ind' => false,
		'provision_attempts_day' => false,
		'ship_address_usage' => false,
		'ship_address_usage_ind' => false,
		'ship_name_indicator' => false,
		'suspicious_acc_activity' => false,
		'txn_activity_day' => false,
		'txn_activity_year' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ch_acc_age_ind' => 'chAccAgeInd',
        'ch_acc_change' => 'chAccChange',
        'ch_acc_change_ind' => 'chAccChangeInd',
        'ch_acc_pw_change' => 'chAccPwChange',
        'ch_acc_pw_change_ind' => 'chAccPwChangeInd',
        'ch_acc_string' => 'chAccString',
        'nb_purchase_account' => 'nbPurchaseAccount',
        'payment_acc_age' => 'paymentAccAge',
        'payment_acc_ind' => 'paymentAccInd',
        'provision_attempts_day' => 'provisionAttemptsDay',
        'ship_address_usage' => 'shipAddressUsage',
        'ship_address_usage_ind' => 'shipAddressUsageInd',
        'ship_name_indicator' => 'shipNameIndicator',
        'suspicious_acc_activity' => 'suspiciousAccActivity',
        'txn_activity_day' => 'txnActivityDay',
        'txn_activity_year' => 'txnActivityYear'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ch_acc_age_ind' => 'setChAccAgeInd',
        'ch_acc_change' => 'setChAccChange',
        'ch_acc_change_ind' => 'setChAccChangeInd',
        'ch_acc_pw_change' => 'setChAccPwChange',
        'ch_acc_pw_change_ind' => 'setChAccPwChangeInd',
        'ch_acc_string' => 'setChAccString',
        'nb_purchase_account' => 'setNbPurchaseAccount',
        'payment_acc_age' => 'setPaymentAccAge',
        'payment_acc_ind' => 'setPaymentAccInd',
        'provision_attempts_day' => 'setProvisionAttemptsDay',
        'ship_address_usage' => 'setShipAddressUsage',
        'ship_address_usage_ind' => 'setShipAddressUsageInd',
        'ship_name_indicator' => 'setShipNameIndicator',
        'suspicious_acc_activity' => 'setSuspiciousAccActivity',
        'txn_activity_day' => 'setTxnActivityDay',
        'txn_activity_year' => 'setTxnActivityYear'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ch_acc_age_ind' => 'getChAccAgeInd',
        'ch_acc_change' => 'getChAccChange',
        'ch_acc_change_ind' => 'getChAccChangeInd',
        'ch_acc_pw_change' => 'getChAccPwChange',
        'ch_acc_pw_change_ind' => 'getChAccPwChangeInd',
        'ch_acc_string' => 'getChAccString',
        'nb_purchase_account' => 'getNbPurchaseAccount',
        'payment_acc_age' => 'getPaymentAccAge',
        'payment_acc_ind' => 'getPaymentAccInd',
        'provision_attempts_day' => 'getProvisionAttemptsDay',
        'ship_address_usage' => 'getShipAddressUsage',
        'ship_address_usage_ind' => 'getShipAddressUsageInd',
        'ship_name_indicator' => 'getShipNameIndicator',
        'suspicious_acc_activity' => 'getSuspiciousAccActivity',
        'txn_activity_day' => 'getTxnActivityDay',
        'txn_activity_year' => 'getTxnActivityYear'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CH_ACC_AGE_IND__01 = '01';
    public const CH_ACC_AGE_IND__02 = '02';
    public const CH_ACC_AGE_IND__03 = '03';
    public const CH_ACC_AGE_IND__04 = '04';
    public const CH_ACC_AGE_IND__05 = '05';
    public const CH_ACC_CHANGE_IND__01 = '01';
    public const CH_ACC_CHANGE_IND__02 = '02';
    public const CH_ACC_CHANGE_IND__03 = '03';
    public const CH_ACC_CHANGE_IND__04 = '04';
    public const CH_ACC_PW_CHANGE_IND__01 = '01';
    public const CH_ACC_PW_CHANGE_IND__02 = '02';
    public const CH_ACC_PW_CHANGE_IND__03 = '03';
    public const CH_ACC_PW_CHANGE_IND__04 = '04';
    public const CH_ACC_PW_CHANGE_IND__05 = '05';
    public const PAYMENT_ACC_IND__01 = '01';
    public const PAYMENT_ACC_IND__02 = '02';
    public const PAYMENT_ACC_IND__03 = '03';
    public const PAYMENT_ACC_IND__04 = '04';
    public const PAYMENT_ACC_IND__05 = '05';
    public const SHIP_ADDRESS_USAGE_IND__01 = '01';
    public const SHIP_ADDRESS_USAGE_IND__02 = '02';
    public const SHIP_ADDRESS_USAGE_IND__03 = '03';
    public const SHIP_ADDRESS_USAGE_IND__04 = '04';
    public const SHIP_NAME_INDICATOR__01 = '01';
    public const SHIP_NAME_INDICATOR__02 = '02';
    public const SUSPICIOUS_ACC_ACTIVITY__01 = '01';
    public const SUSPICIOUS_ACC_ACTIVITY__02 = '02';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChAccAgeIndAllowableValues()
    {
        return [
            self::CH_ACC_AGE_IND__01,
            self::CH_ACC_AGE_IND__02,
            self::CH_ACC_AGE_IND__03,
            self::CH_ACC_AGE_IND__04,
            self::CH_ACC_AGE_IND__05,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChAccChangeIndAllowableValues()
    {
        return [
            self::CH_ACC_CHANGE_IND__01,
            self::CH_ACC_CHANGE_IND__02,
            self::CH_ACC_CHANGE_IND__03,
            self::CH_ACC_CHANGE_IND__04,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChAccPwChangeIndAllowableValues()
    {
        return [
            self::CH_ACC_PW_CHANGE_IND__01,
            self::CH_ACC_PW_CHANGE_IND__02,
            self::CH_ACC_PW_CHANGE_IND__03,
            self::CH_ACC_PW_CHANGE_IND__04,
            self::CH_ACC_PW_CHANGE_IND__05,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentAccIndAllowableValues()
    {
        return [
            self::PAYMENT_ACC_IND__01,
            self::PAYMENT_ACC_IND__02,
            self::PAYMENT_ACC_IND__03,
            self::PAYMENT_ACC_IND__04,
            self::PAYMENT_ACC_IND__05,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShipAddressUsageIndAllowableValues()
    {
        return [
            self::SHIP_ADDRESS_USAGE_IND__01,
            self::SHIP_ADDRESS_USAGE_IND__02,
            self::SHIP_ADDRESS_USAGE_IND__03,
            self::SHIP_ADDRESS_USAGE_IND__04,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShipNameIndicatorAllowableValues()
    {
        return [
            self::SHIP_NAME_INDICATOR__01,
            self::SHIP_NAME_INDICATOR__02,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSuspiciousAccActivityAllowableValues()
    {
        return [
            self::SUSPICIOUS_ACC_ACTIVITY__01,
            self::SUSPICIOUS_ACC_ACTIVITY__02,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ch_acc_age_ind', $data ?? [], null);
        $this->setIfExists('ch_acc_change', $data ?? [], null);
        $this->setIfExists('ch_acc_change_ind', $data ?? [], null);
        $this->setIfExists('ch_acc_pw_change', $data ?? [], null);
        $this->setIfExists('ch_acc_pw_change_ind', $data ?? [], null);
        $this->setIfExists('ch_acc_string', $data ?? [], null);
        $this->setIfExists('nb_purchase_account', $data ?? [], null);
        $this->setIfExists('payment_acc_age', $data ?? [], null);
        $this->setIfExists('payment_acc_ind', $data ?? [], null);
        $this->setIfExists('provision_attempts_day', $data ?? [], null);
        $this->setIfExists('ship_address_usage', $data ?? [], null);
        $this->setIfExists('ship_address_usage_ind', $data ?? [], null);
        $this->setIfExists('ship_name_indicator', $data ?? [], null);
        $this->setIfExists('suspicious_acc_activity', $data ?? [], null);
        $this->setIfExists('txn_activity_day', $data ?? [], null);
        $this->setIfExists('txn_activity_year', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getChAccAgeIndAllowableValues();
        if (!is_null($this->container['ch_acc_age_ind']) && !in_array($this->container['ch_acc_age_ind'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ch_acc_age_ind', must be one of '%s'",
                $this->container['ch_acc_age_ind'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ch_acc_age_ind']) && (mb_strlen($this->container['ch_acc_age_ind']) > 2)) {
            $invalidProperties[] = "invalid value for 'ch_acc_age_ind', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['ch_acc_age_ind']) && (mb_strlen($this->container['ch_acc_age_ind']) < 2)) {
            $invalidProperties[] = "invalid value for 'ch_acc_age_ind', the character length must be bigger than or equal to 2.";
        }

        $allowedValues = $this->getChAccChangeIndAllowableValues();
        if (!is_null($this->container['ch_acc_change_ind']) && !in_array($this->container['ch_acc_change_ind'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ch_acc_change_ind', must be one of '%s'",
                $this->container['ch_acc_change_ind'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ch_acc_change_ind']) && (mb_strlen($this->container['ch_acc_change_ind']) > 2)) {
            $invalidProperties[] = "invalid value for 'ch_acc_change_ind', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['ch_acc_change_ind']) && (mb_strlen($this->container['ch_acc_change_ind']) < 2)) {
            $invalidProperties[] = "invalid value for 'ch_acc_change_ind', the character length must be bigger than or equal to 2.";
        }

        $allowedValues = $this->getChAccPwChangeIndAllowableValues();
        if (!is_null($this->container['ch_acc_pw_change_ind']) && !in_array($this->container['ch_acc_pw_change_ind'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ch_acc_pw_change_ind', must be one of '%s'",
                $this->container['ch_acc_pw_change_ind'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ch_acc_pw_change_ind']) && (mb_strlen($this->container['ch_acc_pw_change_ind']) > 2)) {
            $invalidProperties[] = "invalid value for 'ch_acc_pw_change_ind', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['ch_acc_pw_change_ind']) && (mb_strlen($this->container['ch_acc_pw_change_ind']) < 2)) {
            $invalidProperties[] = "invalid value for 'ch_acc_pw_change_ind', the character length must be bigger than or equal to 2.";
        }

        $allowedValues = $this->getPaymentAccIndAllowableValues();
        if (!is_null($this->container['payment_acc_ind']) && !in_array($this->container['payment_acc_ind'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_acc_ind', must be one of '%s'",
                $this->container['payment_acc_ind'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['payment_acc_ind']) && (mb_strlen($this->container['payment_acc_ind']) > 2)) {
            $invalidProperties[] = "invalid value for 'payment_acc_ind', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['payment_acc_ind']) && (mb_strlen($this->container['payment_acc_ind']) < 2)) {
            $invalidProperties[] = "invalid value for 'payment_acc_ind', the character length must be bigger than or equal to 2.";
        }

        $allowedValues = $this->getShipAddressUsageIndAllowableValues();
        if (!is_null($this->container['ship_address_usage_ind']) && !in_array($this->container['ship_address_usage_ind'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ship_address_usage_ind', must be one of '%s'",
                $this->container['ship_address_usage_ind'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ship_address_usage_ind']) && (mb_strlen($this->container['ship_address_usage_ind']) > 2)) {
            $invalidProperties[] = "invalid value for 'ship_address_usage_ind', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['ship_address_usage_ind']) && (mb_strlen($this->container['ship_address_usage_ind']) < 2)) {
            $invalidProperties[] = "invalid value for 'ship_address_usage_ind', the character length must be bigger than or equal to 2.";
        }

        $allowedValues = $this->getShipNameIndicatorAllowableValues();
        if (!is_null($this->container['ship_name_indicator']) && !in_array($this->container['ship_name_indicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ship_name_indicator', must be one of '%s'",
                $this->container['ship_name_indicator'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ship_name_indicator']) && (mb_strlen($this->container['ship_name_indicator']) > 2)) {
            $invalidProperties[] = "invalid value for 'ship_name_indicator', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['ship_name_indicator']) && (mb_strlen($this->container['ship_name_indicator']) < 2)) {
            $invalidProperties[] = "invalid value for 'ship_name_indicator', the character length must be bigger than or equal to 2.";
        }

        $allowedValues = $this->getSuspiciousAccActivityAllowableValues();
        if (!is_null($this->container['suspicious_acc_activity']) && !in_array($this->container['suspicious_acc_activity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'suspicious_acc_activity', must be one of '%s'",
                $this->container['suspicious_acc_activity'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['suspicious_acc_activity']) && (mb_strlen($this->container['suspicious_acc_activity']) > 2)) {
            $invalidProperties[] = "invalid value for 'suspicious_acc_activity', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['suspicious_acc_activity']) && (mb_strlen($this->container['suspicious_acc_activity']) < 2)) {
            $invalidProperties[] = "invalid value for 'suspicious_acc_activity', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['txn_activity_day']) && (mb_strlen($this->container['txn_activity_day']) > 3)) {
            $invalidProperties[] = "invalid value for 'txn_activity_day', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['txn_activity_year']) && (mb_strlen($this->container['txn_activity_year']) > 3)) {
            $invalidProperties[] = "invalid value for 'txn_activity_year', the character length must be smaller than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ch_acc_age_ind
     *
     * @return string|null
     */
    public function getChAccAgeInd()
    {
        return $this->container['ch_acc_age_ind'];
    }

    /**
     * Sets ch_acc_age_ind
     *
     * @param string|null $ch_acc_age_ind Length of time that the cardholder has had the account with the 3DS Requestor.  Allowed values: * **01** — No account * **02** — Created during this transaction * **03** — Less than 30 days * **04** — 30–60 days * **05** — More than 60 days
     *
     * @return self
     */
    public function setChAccAgeInd($ch_acc_age_ind)
    {
        if (is_null($ch_acc_age_ind)) {
            throw new \InvalidArgumentException('non-nullable ch_acc_age_ind cannot be null');
        }
        $allowedValues = $this->getChAccAgeIndAllowableValues();
        if (!in_array($ch_acc_age_ind, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ch_acc_age_ind', must be one of '%s'",
                    $ch_acc_age_ind,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($ch_acc_age_ind) > 2)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_age_ind when calling AcctInfo., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($ch_acc_age_ind) < 2)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_age_ind when calling AcctInfo., must be bigger than or equal to 2.');
        }

        $this->container['ch_acc_age_ind'] = $ch_acc_age_ind;

        return $this;
    }

    /**
     * Gets ch_acc_change
     *
     * @return string|null
     */
    public function getChAccChange()
    {
        return $this->container['ch_acc_change'];
    }

    /**
     * Sets ch_acc_change
     *
     * @param string|null $ch_acc_change Date that the cardholder’s account with the 3DS Requestor was last changed, including Billing or Shipping address, new payment account, or new user(s) added.  Format: **YYYYMMDD**
     *
     * @return self
     */
    public function setChAccChange($ch_acc_change)
    {
        if (is_null($ch_acc_change)) {
            throw new \InvalidArgumentException('non-nullable ch_acc_change cannot be null');
        }
        $this->container['ch_acc_change'] = $ch_acc_change;

        return $this;
    }

    /**
     * Gets ch_acc_change_ind
     *
     * @return string|null
     */
    public function getChAccChangeInd()
    {
        return $this->container['ch_acc_change_ind'];
    }

    /**
     * Sets ch_acc_change_ind
     *
     * @param string|null $ch_acc_change_ind Length of time since the cardholder’s account information with the 3DS Requestor was last changed, including Billing or Shipping address, new payment account, or new user(s) added.  Allowed values: * **01** — Changed during this transaction * **02** — Less than 30 days * **03** — 30–60 days * **04** — More than 60 days
     *
     * @return self
     */
    public function setChAccChangeInd($ch_acc_change_ind)
    {
        if (is_null($ch_acc_change_ind)) {
            throw new \InvalidArgumentException('non-nullable ch_acc_change_ind cannot be null');
        }
        $allowedValues = $this->getChAccChangeIndAllowableValues();
        if (!in_array($ch_acc_change_ind, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ch_acc_change_ind', must be one of '%s'",
                    $ch_acc_change_ind,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($ch_acc_change_ind) > 2)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_change_ind when calling AcctInfo., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($ch_acc_change_ind) < 2)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_change_ind when calling AcctInfo., must be bigger than or equal to 2.');
        }

        $this->container['ch_acc_change_ind'] = $ch_acc_change_ind;

        return $this;
    }

    /**
     * Gets ch_acc_pw_change
     *
     * @return string|null
     */
    public function getChAccPwChange()
    {
        return $this->container['ch_acc_pw_change'];
    }

    /**
     * Sets ch_acc_pw_change
     *
     * @param string|null $ch_acc_pw_change Date that cardholder’s account with the 3DS Requestor had a password change or account reset.  Format: **YYYYMMDD**
     *
     * @return self
     */
    public function setChAccPwChange($ch_acc_pw_change)
    {
        if (is_null($ch_acc_pw_change)) {
            throw new \InvalidArgumentException('non-nullable ch_acc_pw_change cannot be null');
        }
        $this->container['ch_acc_pw_change'] = $ch_acc_pw_change;

        return $this;
    }

    /**
     * Gets ch_acc_pw_change_ind
     *
     * @return string|null
     */
    public function getChAccPwChangeInd()
    {
        return $this->container['ch_acc_pw_change_ind'];
    }

    /**
     * Sets ch_acc_pw_change_ind
     *
     * @param string|null $ch_acc_pw_change_ind Indicates the length of time since the cardholder’s account with the 3DS Requestor had a password change or account reset.  Allowed values: * **01** — No change * **02** — Changed during this transaction * **03** — Less than 30 days * **04** — 30–60 days * **05** — More than 60 days
     *
     * @return self
     */
    public function setChAccPwChangeInd($ch_acc_pw_change_ind)
    {
        if (is_null($ch_acc_pw_change_ind)) {
            throw new \InvalidArgumentException('non-nullable ch_acc_pw_change_ind cannot be null');
        }
        $allowedValues = $this->getChAccPwChangeIndAllowableValues();
        if (!in_array($ch_acc_pw_change_ind, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ch_acc_pw_change_ind', must be one of '%s'",
                    $ch_acc_pw_change_ind,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($ch_acc_pw_change_ind) > 2)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_pw_change_ind when calling AcctInfo., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($ch_acc_pw_change_ind) < 2)) {
            throw new \InvalidArgumentException('invalid length for $ch_acc_pw_change_ind when calling AcctInfo., must be bigger than or equal to 2.');
        }

        $this->container['ch_acc_pw_change_ind'] = $ch_acc_pw_change_ind;

        return $this;
    }

    /**
     * Gets ch_acc_string
     *
     * @return string|null
     */
    public function getChAccString()
    {
        return $this->container['ch_acc_string'];
    }

    /**
     * Sets ch_acc_string
     *
     * @param string|null $ch_acc_string Date that the cardholder opened the account with the 3DS Requestor.  Format: **YYYYMMDD**
     *
     * @return self
     */
    public function setChAccString($ch_acc_string)
    {
        if (is_null($ch_acc_string)) {
            throw new \InvalidArgumentException('non-nullable ch_acc_string cannot be null');
        }
        $this->container['ch_acc_string'] = $ch_acc_string;

        return $this;
    }

    /**
     * Gets nb_purchase_account
     *
     * @return string|null
     */
    public function getNbPurchaseAccount()
    {
        return $this->container['nb_purchase_account'];
    }

    /**
     * Sets nb_purchase_account
     *
     * @param string|null $nb_purchase_account Number of purchases with this cardholder account during the previous six months. Max length: 4 characters.
     *
     * @return self
     */
    public function setNbPurchaseAccount($nb_purchase_account)
    {
        if (is_null($nb_purchase_account)) {
            throw new \InvalidArgumentException('non-nullable nb_purchase_account cannot be null');
        }
        $this->container['nb_purchase_account'] = $nb_purchase_account;

        return $this;
    }

    /**
     * Gets payment_acc_age
     *
     * @return string|null
     */
    public function getPaymentAccAge()
    {
        return $this->container['payment_acc_age'];
    }

    /**
     * Sets payment_acc_age
     *
     * @param string|null $payment_acc_age String that the payment account was enrolled in the cardholder’s account with the 3DS Requestor.  Format: **YYYYMMDD**
     *
     * @return self
     */
    public function setPaymentAccAge($payment_acc_age)
    {
        if (is_null($payment_acc_age)) {
            throw new \InvalidArgumentException('non-nullable payment_acc_age cannot be null');
        }
        $this->container['payment_acc_age'] = $payment_acc_age;

        return $this;
    }

    /**
     * Gets payment_acc_ind
     *
     * @return string|null
     */
    public function getPaymentAccInd()
    {
        return $this->container['payment_acc_ind'];
    }

    /**
     * Sets payment_acc_ind
     *
     * @param string|null $payment_acc_ind Indicates the length of time that the payment account was enrolled in the cardholder’s account with the 3DS Requestor.  Allowed values: * **01** — No account (guest checkout) * **02** — During this transaction * **03** — Less than 30 days * **04** — 30–60 days * **05** — More than 60 days
     *
     * @return self
     */
    public function setPaymentAccInd($payment_acc_ind)
    {
        if (is_null($payment_acc_ind)) {
            throw new \InvalidArgumentException('non-nullable payment_acc_ind cannot be null');
        }
        $allowedValues = $this->getPaymentAccIndAllowableValues();
        if (!in_array($payment_acc_ind, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_acc_ind', must be one of '%s'",
                    $payment_acc_ind,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($payment_acc_ind) > 2)) {
            throw new \InvalidArgumentException('invalid length for $payment_acc_ind when calling AcctInfo., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($payment_acc_ind) < 2)) {
            throw new \InvalidArgumentException('invalid length for $payment_acc_ind when calling AcctInfo., must be bigger than or equal to 2.');
        }

        $this->container['payment_acc_ind'] = $payment_acc_ind;

        return $this;
    }

    /**
     * Gets provision_attempts_day
     *
     * @return string|null
     */
    public function getProvisionAttemptsDay()
    {
        return $this->container['provision_attempts_day'];
    }

    /**
     * Sets provision_attempts_day
     *
     * @param string|null $provision_attempts_day Number of Add Card attempts in the last 24 hours. Max length: 3 characters.
     *
     * @return self
     */
    public function setProvisionAttemptsDay($provision_attempts_day)
    {
        if (is_null($provision_attempts_day)) {
            throw new \InvalidArgumentException('non-nullable provision_attempts_day cannot be null');
        }
        $this->container['provision_attempts_day'] = $provision_attempts_day;

        return $this;
    }

    /**
     * Gets ship_address_usage
     *
     * @return string|null
     */
    public function getShipAddressUsage()
    {
        return $this->container['ship_address_usage'];
    }

    /**
     * Sets ship_address_usage
     *
     * @param string|null $ship_address_usage String when the shipping address used for this transaction was first used with the 3DS Requestor.  Format: **YYYYMMDD**
     *
     * @return self
     */
    public function setShipAddressUsage($ship_address_usage)
    {
        if (is_null($ship_address_usage)) {
            throw new \InvalidArgumentException('non-nullable ship_address_usage cannot be null');
        }
        $this->container['ship_address_usage'] = $ship_address_usage;

        return $this;
    }

    /**
     * Gets ship_address_usage_ind
     *
     * @return string|null
     */
    public function getShipAddressUsageInd()
    {
        return $this->container['ship_address_usage_ind'];
    }

    /**
     * Sets ship_address_usage_ind
     *
     * @param string|null $ship_address_usage_ind Indicates when the shipping address used for this transaction was first used with the 3DS Requestor.  Allowed values: * **01** — This transaction * **02** — Less than 30 days * **03** — 30–60 days * **04** — More than 60 days
     *
     * @return self
     */
    public function setShipAddressUsageInd($ship_address_usage_ind)
    {
        if (is_null($ship_address_usage_ind)) {
            throw new \InvalidArgumentException('non-nullable ship_address_usage_ind cannot be null');
        }
        $allowedValues = $this->getShipAddressUsageIndAllowableValues();
        if (!in_array($ship_address_usage_ind, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ship_address_usage_ind', must be one of '%s'",
                    $ship_address_usage_ind,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($ship_address_usage_ind) > 2)) {
            throw new \InvalidArgumentException('invalid length for $ship_address_usage_ind when calling AcctInfo., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($ship_address_usage_ind) < 2)) {
            throw new \InvalidArgumentException('invalid length for $ship_address_usage_ind when calling AcctInfo., must be bigger than or equal to 2.');
        }

        $this->container['ship_address_usage_ind'] = $ship_address_usage_ind;

        return $this;
    }

    /**
     * Gets ship_name_indicator
     *
     * @return string|null
     */
    public function getShipNameIndicator()
    {
        return $this->container['ship_name_indicator'];
    }

    /**
     * Sets ship_name_indicator
     *
     * @param string|null $ship_name_indicator Indicates if the Cardholder Name on the account is identical to the shipping Name used for this transaction.  Allowed values: * **01** — Account Name identical to shipping Name * **02** — Account Name different to shipping Name
     *
     * @return self
     */
    public function setShipNameIndicator($ship_name_indicator)
    {
        if (is_null($ship_name_indicator)) {
            throw new \InvalidArgumentException('non-nullable ship_name_indicator cannot be null');
        }
        $allowedValues = $this->getShipNameIndicatorAllowableValues();
        if (!in_array($ship_name_indicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ship_name_indicator', must be one of '%s'",
                    $ship_name_indicator,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($ship_name_indicator) > 2)) {
            throw new \InvalidArgumentException('invalid length for $ship_name_indicator when calling AcctInfo., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($ship_name_indicator) < 2)) {
            throw new \InvalidArgumentException('invalid length for $ship_name_indicator when calling AcctInfo., must be bigger than or equal to 2.');
        }

        $this->container['ship_name_indicator'] = $ship_name_indicator;

        return $this;
    }

    /**
     * Gets suspicious_acc_activity
     *
     * @return string|null
     */
    public function getSuspiciousAccActivity()
    {
        return $this->container['suspicious_acc_activity'];
    }

    /**
     * Sets suspicious_acc_activity
     *
     * @param string|null $suspicious_acc_activity Indicates whether the 3DS Requestor has experienced suspicious activity (including previous fraud) on the cardholder account.  Allowed values: * **01** — No suspicious activity has been observed * **02** — Suspicious activity has been observed
     *
     * @return self
     */
    public function setSuspiciousAccActivity($suspicious_acc_activity)
    {
        if (is_null($suspicious_acc_activity)) {
            throw new \InvalidArgumentException('non-nullable suspicious_acc_activity cannot be null');
        }
        $allowedValues = $this->getSuspiciousAccActivityAllowableValues();
        if (!in_array($suspicious_acc_activity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'suspicious_acc_activity', must be one of '%s'",
                    $suspicious_acc_activity,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($suspicious_acc_activity) > 2)) {
            throw new \InvalidArgumentException('invalid length for $suspicious_acc_activity when calling AcctInfo., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($suspicious_acc_activity) < 2)) {
            throw new \InvalidArgumentException('invalid length for $suspicious_acc_activity when calling AcctInfo., must be bigger than or equal to 2.');
        }

        $this->container['suspicious_acc_activity'] = $suspicious_acc_activity;

        return $this;
    }

    /**
     * Gets txn_activity_day
     *
     * @return string|null
     */
    public function getTxnActivityDay()
    {
        return $this->container['txn_activity_day'];
    }

    /**
     * Sets txn_activity_day
     *
     * @param string|null $txn_activity_day Number of transactions (successful and abandoned) for this cardholder account with the 3DS Requestor across all payment accounts in the previous 24 hours. Max length: 3 characters.
     *
     * @return self
     */
    public function setTxnActivityDay($txn_activity_day)
    {
        if (is_null($txn_activity_day)) {
            throw new \InvalidArgumentException('non-nullable txn_activity_day cannot be null');
        }
        if ((mb_strlen($txn_activity_day) > 3)) {
            throw new \InvalidArgumentException('invalid length for $txn_activity_day when calling AcctInfo., must be smaller than or equal to 3.');
        }

        $this->container['txn_activity_day'] = $txn_activity_day;

        return $this;
    }

    /**
     * Gets txn_activity_year
     *
     * @return string|null
     */
    public function getTxnActivityYear()
    {
        return $this->container['txn_activity_year'];
    }

    /**
     * Sets txn_activity_year
     *
     * @param string|null $txn_activity_year Number of transactions (successful and abandoned) for this cardholder account with the 3DS Requestor across all payment accounts in the previous year. Max length: 3 characters.
     *
     * @return self
     */
    public function setTxnActivityYear($txn_activity_year)
    {
        if (is_null($txn_activity_year)) {
            throw new \InvalidArgumentException('non-nullable txn_activity_year cannot be null');
        }
        if ((mb_strlen($txn_activity_year) > 3)) {
            throw new \InvalidArgumentException('invalid length for $txn_activity_year when calling AcctInfo., must be smaller than or equal to 3.');
        }

        $this->container['txn_activity_year'] = $txn_activity_year;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


